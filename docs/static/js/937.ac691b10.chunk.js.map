{"version":3,"file":"static/js/937.ac691b10.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","provider","status","ADAPTER_STATUS","WalletLoginError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","_window$solana","options","arguments","undefined","solana","isPhantom","_window$solana2","PhantomAdapter","constructor","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","_wallet","off","_onDisconnect","isWalletConnected","_this$_wallet","isConnected","_this$phantomProvider","phantomProvider","Error","init","checkInitializationRequirements","WalletInitializationError","PhantomInjectedProvider","config","log","autoConnect","connect","error","_this","checkConnectionRequirements","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","_len","args","Array","_key","apply","reason","Web3AuthError","publicKey","on","cleanup","disconnectSession","_this$_wallet2","disconnect","injectedProvider","setupProvider","reconnected"],"sourceRoot":""}