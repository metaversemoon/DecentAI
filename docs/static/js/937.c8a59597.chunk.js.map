{"version":3,"file":"static/js/937.c8a59597.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","_BaseAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_","wrap","_context","prev","next","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","stop","_x","_authenticateUser","_callee2","_this$chainConfig","chainNamespace","chainId","accounts","existingToken","payload","challenge","encodedMessage","signedMessage","idToken","_context2","provider","status","ADAPTER_STATUS","WalletLoginError","request","method","sent","length","getSavedToken","name","checkIfTokenIsExpired","abrupt","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","TextEncoder","encode","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","_disconnectSession","_callee3","_context3","_get","_getPrototypeOf","prototype","call","clearToken","_disconnect","_callee4","_context4","rehydrated","emit","ADAPTER_EVENTS","BaseAdapter","poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","_ref2","_window$solana","options","_args2","undefined","solana","isPhantom","_window$solana2","PhantomAdapter","_BaseSolanaAdapter","_this2","_defineProperty","_assertThisInitialized","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","_wallet","off","_onDisconnect","get","_this$_wallet","isConnected","_this$phantomProvider","phantomProvider","set","Error","_args3","WalletInitializationError","PhantomInjectedProvider","config","log","autoConnect","connect","t0","_connect","_callee5","_this","handleDisconnect","_this3","_context5","adapter","_handleDisconnect","_ref3","connectWithProvider","once","_len","args","Array","_key","reason","Web3AuthError","finish","publicKey","on","t1","_callee6","_this$_wallet2","_args6","_context6","cleanup","disconnect","_getUserInfo","_callee7","_context7","isWalletConnected","_connectWithProvider","_callee8","injectedProvider","_context8","setupProvider","reconnected"],"sourceRoot":""}