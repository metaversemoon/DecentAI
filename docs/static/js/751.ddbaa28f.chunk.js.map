{"version":3,"file":"static/js/751.ddbaa28f.chunk.js","mappings":";+JAsIA,MAAAA,EAAAC,EAAA,OAYA,SAAgBC,EAAgBC,GAC9B,KAAMA,aAAaC,YACjB,MAAM,IAAIC,UAAU,yBAExB,CAKA,SAAgBC,EAAmBH,GAEjC,OADAD,EAAgBC,GACTH,EAAAO,OAAOC,KAAKL,EAAEM,OAAQN,EAAEO,WAAYP,EAAEQ,OAC/C,CAkBA,MAAsBC,EAKpBC,YAAYC,EAAcC,GACxB,IAAKC,OAAOC,UAAUH,GACpB,MAAM,IAAIT,UAAU,2BAYtB,KAAKS,KAAOA,EAUZ,KAAKC,SAAWA,CAClB,CAiBAG,wBACE,MAAO,EACT,CAwDAC,QAAQhB,EAAgBiB,GACtB,GAAI,EAAI,KAAKN,KACX,MAAM,IAAIO,WAAW,sBAEvB,OAAO,KAAKP,IACd,CAkBAQ,UAAUP,GACR,MAAMQ,EAAKC,OAAOC,OAAO,KAAKZ,YAAYa,WAG1C,OAFAF,OAAOG,OAAOJ,EAAI,MAClBA,EAAGR,SAAWA,EACPQ,CACT,CAsBAK,UAAUC,GAEV,EAQF,SAAgBC,EAAiBC,EAAcC,GAC7C,OAAIA,EAAGjB,SACEgB,EAAO,IAAMC,EAAGjB,SAAW,IAE7BgB,CACT,CAkFA,MAAsBE,UAAuBrB,EAY3CsB,UACE,MAAM,IAAIC,MAAM,6BAClB,EAkBF,MAAaC,UAAoBH,EAG/BpB,cAA8C,IAAlCwB,EAAWC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGvB,EAAiBuB,UAAA3B,OAAA,EAAA2B,UAAA,QAAAC,EAC5C,IAAMvB,OAAOC,UAAUoB,IAAkB,GAAKA,EAC5C,MAAM,IAAIhC,UAAU,4CAEtB,OAAO,EAAGU,GAKV,KAAKsB,YAAcA,CACrB,CAGAH,UACE,OAAO,CACT,CAGAM,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7BpC,EAAgBC,GAChB,MAAMsC,EAAMtC,EAAEQ,OAASS,EACvB,OAAOsB,KAAKC,MAAMF,EAAM,KAAKJ,YAC/B,CAGAO,OAAOC,EAAa1C,EAAeiB,GACjC,OAAO,CACT,EAuBF,MAAa0B,UAAqBb,EAGhCpB,YAAYkC,GAAqD,IAA7B3B,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGvB,EAAiBuB,UAAA3B,OAAA,EAAA2B,UAAA,QAAAC,EAC/D,KAAMQ,aAAkBnC,GACtB,MAAM,IAAIP,UAAU,2BAGtB,IAAKW,OAAOC,UAAUG,GACpB,MAAM,IAAIf,UAAU,uCAGtB,MAAM0C,EAAOjC,KAAMC,GAAYgC,EAAOhC,UAGtC,KAAKgC,OAASA,EAQd,KAAK3B,OAASA,CAChB,CAGAc,UACE,OAAS,KAAKa,kBAAkBC,GACpB,KAAKD,kBAAkBE,CACrC,CAGAT,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO,KAAKS,OAAOP,OAAOrC,EAAGiB,EAAS,KAAKA,OAC7C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC1C,OAAO,KAAKS,OAAOH,OAAOC,EAAK1C,EAAGiB,EAAS,KAAKA,OAClD,EAmBF,MAAa4B,UAAapC,EACxBC,YAAYC,EAAcC,GAExB,GADA,MAAMD,EAAMC,GACR,EAAI,KAAKD,KACX,MAAM,IAAIO,WAAW,+BAEzB,CAGAmB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAG+C,WAAW9B,EAAQ,KAAKN,KACvD,CAGA8B,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGgD,YAAYN,EAAKzB,EAAQ,KAAKN,MAC7C,KAAKA,IACd,EAmBF,MAAamC,UAAerC,EAC1BC,YAAYC,EAAcC,GAExB,GADA,MAAMD,EAAMC,GACR,EAAI,KAAKD,KACX,MAAM,IAAIO,WAAW,+BAEzB,CAGAmB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAGiD,WAAWhC,EAAQ,KAAKN,KACvD,CAGA8B,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGkD,YAAYR,EAAKzB,EAAQ,KAAKN,MAC7C,KAAKA,IACd,EAmBF,MAAawC,UAAY1C,EACvBC,YAAYC,EAAcC,GAExB,GADA,MAAMD,EAAMC,GACR,EAAI,KAAKD,KACX,MAAM,IAAIO,WAAW,+BAEzB,CAGAmB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAGoD,UAAUnC,EAAQ,KAAKN,KACtD,CAGA8B,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGqD,WAAWX,EAAKzB,EAAQ,KAAKN,MAC5C,KAAKA,IACd,EAmBF,MAAa2C,UAAc7C,EACzBC,YAAYC,EAAcC,GAExB,GADA,MAAMD,EAAMC,GACR,EAAI,KAAKD,KACX,MAAM,IAAIO,WAAW,+BAEzB,CAGAmB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAGuD,UAAUtC,EAAQ,KAAKN,KACtD,CAGA8B,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGwD,WAAWd,EAAKzB,EAAQ,KAAKN,MAC5C,KAAKA,IACd,EAGF,MAAM8C,EAAQlB,KAAKmB,IAAI,EAAG,IAI1B,SAASC,EAAYjB,GACnB,MAAMkB,EAAOrB,KAAKC,MAAME,EAAMe,GAE9B,MAAO,CAACG,OAAMC,KADDnB,EAAOkB,EAAOH,EAE7B,CAEA,SAASK,EAAaF,EAAcC,GAClC,OAAOD,EAAOH,EAAQI,CACxB,CAaA,MAAaE,UAAmBtD,EAC9BC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAM7B,EAASH,EAAmBH,GAC5B6D,EAAOvD,EAAO0D,aAAa/C,GAEjC,OAAO6C,EADMxD,EAAO0D,aAAa/C,EAAS,GAChB4C,EAC5B,CAGApB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC1C,MAAM8B,EAAQN,EAAYjB,GACpBpC,EAASH,EAAmBH,GAGlC,OAFAM,EAAO4D,cAAcD,EAAMJ,KAAM5C,GACjCX,EAAO4D,cAAcD,EAAML,KAAM3C,EAAS,GACnC,CACT,EAcF,MAAakD,UAAqB1D,EAChCC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAM7B,EAASH,EAAmBH,GAGlC,OAAO8D,EAFMxD,EAAO8D,aAAanD,GACpBX,EAAO8D,aAAanD,EAAS,GAE5C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC1C,MAAM8B,EAAQN,EAAYjB,GACpBpC,EAASH,EAAmBH,GAGlC,OAFAM,EAAO+D,cAAcJ,EAAML,KAAM3C,GACjCX,EAAO+D,cAAcJ,EAAMJ,KAAM5C,EAAS,GACnC,CACT,EAcF,MAAaqD,UAAkB7D,EAC7BC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAM7B,EAASH,EAAmBH,GAC5B6D,EAAOvD,EAAO0D,aAAa/C,GAEjC,OAAO6C,EADMxD,EAAOiE,YAAYtD,EAAS,GACf4C,EAC5B,CAGApB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC1C,MAAM8B,EAAQN,EAAYjB,GACpBpC,EAASH,EAAmBH,GAGlC,OAFAM,EAAO4D,cAAcD,EAAMJ,KAAM5C,GACjCX,EAAOkE,aAAaP,EAAML,KAAM3C,EAAS,GAClC,CACT,EAcF,MAAawD,UAAoBhE,EAC/BC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAM7B,EAASH,EAAmBH,GAGlC,OAAO8D,EAFMxD,EAAOoE,YAAYzD,GACnBX,EAAO8D,aAAanD,EAAS,GAE5C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC1C,MAAM8B,EAAQN,EAAYjB,GACpBpC,EAASH,EAAmBH,GAGlC,OAFAM,EAAOqE,aAAaV,EAAML,KAAM3C,GAChCX,EAAO+D,cAAcJ,EAAMJ,KAAM5C,EAAS,GACnC,CACT,EAaF,MAAa2D,UAAcnE,EACzBC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAG6E,YAAY5D,EAC3C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAG8E,aAAapC,EAAKzB,GACjC,CACT,EAaF,MAAa8D,UAAgBtE,EAC3BC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAGgF,YAAY/D,EAC3C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGiF,aAAavC,EAAKzB,GACjC,CACT,EAaF,MAAaiE,UAAezE,EAC1BC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAGmF,aAAalE,EAC5C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGoF,cAAc1C,EAAKzB,GAClC,CACT,EAaF,MAAaoE,UAAiB5E,EAC5BC,YAAYE,GACV,MAAM,EAAGA,EACX,CAGAyB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAOhC,EAAmBH,GAAGsF,aAAarE,EAC5C,CAGAwB,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADAhC,EAAmBH,GAAGuF,cAAc7C,EAAKzB,GAClC,CACT,EAoBF,MAAauE,UAAoB/E,EAI/BC,YAAY+E,EAA0BC,EAAgC9E,GACpE,KAAM6E,aAAyBhF,GAC7B,MAAM,IAAIP,UAAU,kCAEtB,KAAQwF,aAAiB5D,GAAmB4D,EAAM3D,WACxClB,OAAOC,UAAU4E,IAAW,GAAKA,GACzC,MAAM,IAAIxF,UAAU,4EAGtB,IAAIS,GAAQ,IACL+E,aAAiB5D,IAChB,EAAI2D,EAAc9E,OACxBA,EAAO+E,EAAQD,EAAc9E,MAG/B,MAAMA,EAAMC,GAGZ,KAAK6E,cAAgBA,EAOrB,KAAKC,MAAQA,CACf,CAGA1E,QAAQhB,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKxB,KACZ,OAAO,KAAKA,KAEd,IAAIA,EAAO,EACP+E,EAAQ,KAAKA,MAIjB,GAHIA,aAAiB5D,IACnB4D,EAAQA,EAAMrD,OAAOrC,EAAGiB,IAEtB,EAAI,KAAKwE,cAAc9E,KACzBA,EAAO+E,EAAQ,KAAKD,cAAc9E,SAC7B,CACL,IAAIgF,EAAM,EACV,KAAOA,EAAMD,GACX/E,GAAQ,KAAK8E,cAAczE,QAAQhB,EAAGiB,EAASN,KAC7CgF,EAGN,OAAOhF,CACT,CAGA0B,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAMf,EAAU,GAChB,IAAIwE,EAAI,EACJF,EAAQ,KAAKA,MAIjB,IAHIA,aAAiB5D,IACnB4D,EAAQA,EAAMrD,OAAOrC,EAAGiB,IAEnB2E,EAAIF,GACTtE,EAAGyE,KAAK,KAAKJ,cAAcpD,OAAOrC,EAAGiB,IACrCA,GAAU,KAAKwE,cAAczE,QAAQhB,EAAGiB,GACxC2E,GAAK,EAEP,OAAOxE,CACT,CAYAqB,OAAOC,EAAU1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACvC,MAAM2D,EAAM,KAAKL,cACX9E,EAAe+B,EAAIqD,QAAO,CAACpF,EAAMqF,IAC9BrF,EAAOmF,EAAIrD,OAAOuD,EAAGhG,EAAGiB,EAASN,IACvC,GAIH,OAHI,KAAK+E,iBAAiB5D,GACxB,KAAK4D,MAAMjD,OAAOC,EAAIlC,OAAQR,EAAGiB,GAE5BN,CACT,EAmCF,MAAasF,UAAqBxF,EAIhCC,YAAYwF,EAA8BtF,EAAmBuF,GAC3D,IAAMC,MAAMC,QAAQH,KACXA,EAAOH,QAAO,CAACO,EAAKN,IAAMM,GAAQN,aAAavF,IAAS,GAC/D,MAAM,IAAIP,UAAU,4CAEjB,mBAAqBU,QAClBwB,IAAc+D,IACpBA,EAAiBvF,EACjBA,OAAWwB,GAIb,IAAK,MAAMmE,KAAML,EACf,GAAK,EAAIK,EAAG5F,WACJyB,IAAcmE,EAAG3F,SACvB,MAAM,IAAIoB,MAAM,wDAIpB,IAAIrB,GAAQ,EACZ,IACEA,EAAOuF,EAAOH,QAAO,CAACpF,EAAM4F,IAAO5F,EAAO4F,EAAGvF,WAAW,GACxD,MAAOwF,GACP,CAEF,MAAM7F,EAAMC,GAYZ,KAAKsF,OAASA,EAWd,KAAKC,iBAAmBA,CAC1B,CAGAnF,QAAQhB,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKxB,KACZ,OAAO,KAAKA,KAEd,IAAIA,EAAO,EACX,IACEA,EAAO,KAAKuF,OAAOH,QAAO,CAACpF,EAAM4F,KAC/B,MAAME,EAAMF,EAAGvF,QAAQhB,EAAGiB,GAE1B,OADAA,GAAUwF,EACH9F,EAAO8F,CAAG,GAChB,GACH,MAAOD,GACP,MAAM,IAAItF,WAAW,sBAEvB,OAAOP,CACT,CAGA0B,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7BpC,EAAgBC,GAChB,MAAM0G,EAAO,KAAK3F,wBAClB,IAAK,MAAMwF,KAAM,KAAKL,OAKpB,QAJI9D,IAAcmE,EAAG3F,WACnB8F,EAAKH,EAAG3F,UAAuB2F,EAAGlE,OAAOrC,EAAGiB,IAE9CA,GAAUsF,EAAGvF,QAAQhB,EAAGiB,GACpB,KAAKkF,gBACDnG,EAAEQ,SAAWS,EACnB,MAGJ,OAAOyF,CACT,CAOAjE,OAAOC,EAAQ1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACrC,MAAMwE,EAAc1F,EACpB,IAAI2F,EAAa,EACbC,EAAY,EAChB,IAAK,MAAMN,KAAM,KAAKL,OAAQ,CAC5B,IAAIvF,EAAO4F,EAAG5F,KAEd,GADAkG,EAAa,EAAIlG,EAAQA,EAAO,OAC5ByB,IAAcmE,EAAG3F,SAAU,CAC7B,MAAMkG,EAAKpE,EAAI6D,EAAG3F,eACdwB,IAAc0E,IAChBD,EAAYN,EAAG9D,OAAOqE,EAAI9G,EAAGiB,GACzB,EAAIN,IAGNA,EAAO4F,EAAGvF,QAAQhB,EAAGiB,KAI3B2F,EAAa3F,EACbA,GAAUN,EAMZ,OAAQiG,EAAaC,EAAaF,CACpC,CAGAlF,UAAUC,GACR,MAAMgF,EAAO,KAAK3F,wBAClB,IAAK,MAAMwF,KAAM,KAAKL,YACf9D,IAAcmE,EAAG3F,UACd,EAAIc,EAAOlB,SACjBkG,EAAKH,EAAG3F,UAAYc,EAAOqF,SAG/B,OAAOL,CACT,CAUAM,UAAUpG,GACR,GAAI,kBAAoBA,EACtB,MAAM,IAAIV,UAAU,2BAEtB,IAAK,MAAMqG,KAAM,KAAKL,OACpB,GAAIK,EAAG3F,WAAaA,EAClB,OAAO2F,CAIb,CAaAU,SAASrG,GACP,GAAI,kBAAoBA,EACtB,MAAM,IAAIV,UAAU,2BAEtB,IAAIe,EAAS,EACb,IAAK,MAAMsF,KAAM,KAAKL,OAAQ,CAC5B,GAAIK,EAAG3F,WAAaA,EAClB,OAAOK,EAEL,EAAIsF,EAAG5F,KACTM,GAAU,EACD,GAAKA,IACdA,GAAUsF,EAAG5F,MAInB,EAiBF,MAAauG,EAEXxG,YAAYE,GAKV,KAAKA,SAAWA,CAClB,CAMAyB,OAAOrC,EAAgBiB,GACrB,MAAM,IAAIe,MAAM,iCAClB,CAMAS,OAAOC,EAAQ1C,EAAeiB,GAC5B,MAAM,IAAIe,MAAM,iCAClB,EAoBF,MAAamF,UAAiCD,EAE5CxG,YAAYkC,EAAwBhC,GAClC,KAAOgC,aAAkBd,GAChBc,EAAOb,WACd,MAAM,IAAI7B,UAAU,qDAGtB,MAAMU,GAAYgC,EAAOhC,UAAY,WAIrC,KAAKgC,OAASA,CAChB,CAGAP,OAAOrC,EAAeiB,GACpB,OAAO,KAAK2B,OAAOP,OAAOrC,EAAGiB,EAC/B,CAGAwB,OAAOC,EAAa1C,EAAeiB,GACjC,OAAO,KAAK2B,OAAOH,OAAOC,EAAK1C,EAAGiB,EACpC,EA8DF,MAAamG,UAAc3G,EAYzBC,YACI2G,EACAC,EACA1G,GAEF,IAAI2G,EACJ,GAAKF,aAAiBxE,GACdwE,aAAiBvE,EACvByE,EAAgB,IAAIJ,EAAyB,IAAIxE,EAAa0E,SACzD,GAAKA,aAAiBvF,GACfuF,EAAMtF,UAClBwF,EAAgB,IAAIJ,EAAyBE,OACxC,MAAMA,aAAiBH,GAC5B,MAAM,IAAIhH,UAAU,oEAGpBqH,EAAgBF,EAKlB,QAHIjF,IAAckF,IAChBA,EAAgB,QAEX,OAASA,GACNA,aAAyB7G,GACjC,MAAM,IAAIP,UAAU,0CAEtB,GAAI,OAASoH,EAAe,CAC1B,GAAI,EAAIA,EAAc3G,KACpB,MAAM,IAAIqB,MAAM,8CAEdI,IAAckF,EAAc1G,WAC9B0G,EAAgBA,EAAcnG,UAAU,YAQ5C,IAAIR,GAAQ,EACR2G,IACF3G,EAAO2G,EAAc3G,KAChB,GAAKA,IAAW0G,aAAiBxE,GAC9BwE,aAAiBvE,KACvBnC,GAAS4G,EAA2C3E,OAAOjC,OAG/D,MAAMA,EAAMC,GAUZ,KAAK2G,cAAgBA,EAOrB,KAAKC,wBAA2BH,aAAiBxE,GACzCwE,aAAiBvE,EASzB,KAAKwE,cAAgBA,EAYrB,KAAKG,SAAW,GAGhB,IAAIC,EAAwB,KAAKC,wBAAwBC,KAAK,MAe9D,KAAKC,iBAAmB,SAASnF,GAC/B,OAAOgF,EAAsBhF,EAC/B,EAeA,KAAKoF,uBAAyB,SAASC,GACrCL,EAAwBK,EAAIH,KAAK,KACnC,CACF,CAGA5G,QAAQhB,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKxB,KACZ,OAAO,KAAKA,KAKd,MAAMqH,EAAM,KAAKC,WAAWjI,EAAGiB,GAC/B,IAAK+G,EACH,MAAM,IAAIhG,MAAM,qDAElB,OAAOgG,EAAIhH,QAAQhB,EAAGiB,EACxB,CA+BA0G,wBAAwBjF,GACtB,GAAIrB,OAAOE,UAAU2G,eAAeC,KAAKzF,EAAK,KAAK6E,cAAc3G,UAAW,CAC1E,GAAI,KAAK0G,eAAiB,KAAKA,cAAc1G,UACtCS,OAAOE,UAAU2G,eAAeC,KAAKzF,EAAK,KAAK4E,cAAc1G,UAClE,OAEF,MAAMoH,EAAM,KAAKP,SAAS/E,EAAI,KAAK6E,cAAc3G,WACjD,GAAIoH,KACMA,EAAIpF,QACFoF,EAAIpH,UAAYS,OAAOE,UAAU2G,eAAeC,KAAKzF,EAAKsF,EAAIpH,WACxE,OAAOoH,OAGT,IAAK,MAAMI,KAAO,KAAKX,SAAU,CAC/B,MAAMO,EAAM,KAAKP,SAASW,GAC1B,GAAIJ,EAAIpH,UAAYS,OAAOE,UAAU2G,eAAeC,KAAKzF,EAAKsF,EAAIpH,UAChE,OAAOoH,EAIb,MAAM,IAAIhG,MAAM,8BAClB,CAQAK,OAAOrC,GAAyB,IAC1B0G,EADgBzF,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE7B,MAAMkG,EAAM,KAAKd,cACXF,EAAQgB,EAAIhG,OAAOrC,EAAGiB,GACtBqH,EAAM,KAAKb,SAASJ,GAC1B,QAAIjF,IAAckG,EAAK,CACrB,MAAMhB,EAAgB,KAAKA,cAC3B,IAAIiB,EAAgB,EAChB,KAAKf,0BACPe,EAAiBF,EAAiCzF,OAAOjC,MAE3D+F,EAAO,KAAK3F,wBACZ2F,EAAK2B,EAAIzH,UAAYyG,EAGrBX,EAAKY,EAAe1G,UAAa0G,EAAejF,OAAOrC,EAAGiB,EAASsH,QAEnE7B,EAAO4B,EAAIjG,OAAOrC,EAAGiB,GAEvB,OAAOyF,CACT,CAQAjE,OAAOC,EAAmB1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAChD,MAAM6F,EAAM,KAAKH,iBAAiBnF,GAClC,QAAIN,IAAc4F,EAAK,CACrB,MAAMK,EAAM,KAAKd,cAGXe,EAAM,KAAKhB,cACjB,IAAIiB,EAAgB,EAOpB,OANI,KAAKf,0BACPe,EAAiBF,EAAiCzF,OAAOjC,MAE3D0H,EAAI5F,OAAOC,EAAI2F,EAAIzH,UAAWZ,EAAGiB,GAG1BsH,EAAgBD,EAAI7F,OAAOC,EAAI4F,EAAI1H,UAAYZ,EAAGiB,EAASsH,GAEpE,OAAOP,EAAIvF,OAAOC,EAAK1C,EAAGiB,EAC5B,CAeAuH,WAAWC,EAAiB7F,EAA8BhC,GACxD,MAAMQ,EAAK,IAAIsH,EAAc,KAAMD,EAAS7F,EAAQhC,GAEpD,OADA,KAAK6G,SAASgB,GAAWrH,EAClBA,CACT,CAgBA6G,WAAWU,GAAmC,IACxCF,EAD8BxH,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAO3C,OAJEsG,EADEE,aAAc1I,WACN,KAAKsH,cAAclF,OAAOsG,EAAI1H,GAE9B0H,EAEL,KAAKlB,SAASgB,EACvB,EAgCF,MAAaC,UAAsBjI,EAOjCC,YAAYkI,EAAcH,EAAiB7F,EAAqChC,GAC9E,KAAMgI,aAAiBxB,GACrB,MAAM,IAAIlH,UAAU,yBAEtB,IAAMW,OAAOC,UAAU2H,IAAc,EAAIA,EACvC,MAAM,IAAIvI,UAAU,4CAOtB,GALK,kBAAoB0C,QACjBR,IAAcxB,IACpBA,EAAWgC,EACXA,EAAS,MAEPA,EAAQ,CACV,KAAMA,aAAkBnC,GACtB,MAAM,IAAIP,UAAU,2BAEtB,GAAK,OAAS0I,EAAMtB,eACZ,GAAK1E,EAAOjC,MACZiC,EAAOjC,KAAOiI,EAAMtB,cAAc3G,KACxC,MAAM,IAAIqB,MAAM,iDAElB,GAAI,kBAAoBpB,EACtB,MAAM,IAAIV,UAAU,uCAGxB,IAAIS,EAAOiI,EAAMjI,KACb,EAAIiI,EAAMjI,OACZA,EAAOiC,EAASA,EAAOjC,KAAO,EACzB,GAAKA,GAASiI,EAAMpB,0BACvB7G,GAASiI,EAAMrB,cAA2C3E,OAAOjC,OAGrE,MAAMA,EAAMC,GAGZ,KAAKgI,MAAQA,EAKb,KAAKH,QAAUA,EAMf,KAAK7F,OAASA,GAAU,IAC1B,CAGA5B,QAAQhB,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKxB,KAGZ,OAAO,KAAKA,KAEd,IAAI4H,EAAgB,EAChB,KAAKK,MAAMpB,0BACbe,EAAiB,KAAKK,MAAMrB,cAA2C3E,OAAOjC,MAGhF,IAAIA,EAAO,EAIX,OAHI,KAAKiC,SACPjC,EAAO,KAAKiC,OAAO5B,QAAQhB,EAAGiB,EAASsH,IAElCA,EAAgB5H,CACzB,CAGA0B,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAMuE,EAAO,KAAK3F,wBAClB,GAAI,OAAS,KAAK6H,MAAMX,WAAWjI,EAAGiB,GACpC,MAAM,IAAIe,MAAM,oBAElB,IAAIuG,EAAgB,EAWpB,OAVI,KAAKK,MAAMpB,0BACbe,EAAiB,KAAKK,MAAMrB,cAA2C3E,OAAOjC,MAE5E,KAAKiC,OACP8D,EAAK,KAAK9F,UAAY,KAAKgC,OAAOP,OAAOrC,EAAGiB,EAASsH,GAC5C,KAAK3H,SACd8F,EAAK,KAAK9F,WAAY,EACb,KAAKgI,MAAMpB,0BACpBd,EAAK,KAAKkC,MAAMrB,cAAc3G,UAAY,KAAK6H,SAE1C/B,CACT,CAGAjE,OAAOC,EAAmB1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC5CoG,EAAgB,EAIpB,GAHI,KAAKK,MAAMpB,0BACbe,EAAiB,KAAKK,MAAMrB,cAA2C3E,OAAOjC,MAE5E,KAAKiC,SACAvB,OAAOE,UAAU2G,eAAeC,KAAKzF,EAAK,KAAK9B,UACtD,MAAM,IAAIV,UAAU,0BAA4B,KAAKU,UAEvD,KAAKgI,MAAMrB,cAAc9E,OAAO,KAAKgG,QAASzI,EAAGiB,GACjD,IAAIN,EAAO4H,EACX,GAAI,KAAK3F,SACP,KAAKA,OAAOH,OAAOC,EAAI,KAAK9B,UAAWZ,EAAGiB,EAASsH,GACnD5H,GAAQ,KAAKiC,OAAO5B,QAAQhB,EAAGiB,EAASsH,GACnC,GAAK,KAAKK,MAAMjI,MACbA,EAAO,KAAKiI,MAAMjI,MACxB,MAAM,IAAIqB,MAAM,6CAGpB,OAAOrB,CACT,CAIAc,UAAUC,GACR,GAAI,KAAKkB,OACP,OAAO,KAAKA,OAAOnB,UAAUC,EAGjC,EASF,SAASmH,EAAiB7C,GAIxB,OAHI,EAAIA,IACNA,GAAK,YAEAA,CACT,CAiCA,MAAa8C,UAAqBrI,EAQhCC,YAAYqI,EAAqBC,EAAuBpI,GACtD,KAAOmI,aAAgBlG,GACbkG,aAAgBjG,GACxB,MAAM,IAAI5C,UAAU,wCAOtB,GALK,kBAAoB8I,QACjB5G,IAAcxB,IACpBA,EAAWoI,EACXA,GAAM,GAEJ,EAAID,EAAKpI,KACX,MAAM,IAAIO,WAAW,8BAEvB,MAAM6H,EAAKpI,KAAMC,GAKjB,KAAKmI,KAAOA,EASZ,KAAKC,MAAQA,EAQb,KAAK9C,OAAS,GAKd,IAAI+C,EAAQ,EACZ,KAAKC,gBAAkB,SAASlD,GAE9B,OADAiD,EAAQJ,EAAiB7C,GAClB,IACT,EACA,KAAKmD,gBAAkB,WACrB,OAAOF,CACT,CACF,CAGA5G,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAMuE,EAAO,KAAK3F,wBACZkI,EAAQ,KAAKF,KAAK1G,OAAOrC,EAAGiB,GAClC,KAAKiI,gBAAgBD,GACrB,IAAK,MAAM1C,KAAM,KAAKL,YAChB9D,IAAcmE,EAAG3F,WACnB8F,EAAKH,EAAG3F,UAAY2F,EAAGlE,OAAOrC,IAGlC,OAAO0G,CACT,CAOAjE,OAAOC,EAAmB1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAChD,MAAM8G,EAAQ,KAAKF,KAAK1G,OAAOrC,EAAGiB,GAClC,KAAKiI,gBAAgBD,GACrB,IAAK,MAAM1C,KAAM,KAAKL,OACpB,QAAI9D,IAAcmE,EAAG3F,SAAU,CAC7B,MAAMkG,EAAKpE,EAAI6D,EAAG3F,eACdwB,IAAc0E,GAChBP,EAAG9D,OAAOqE,GAIhB,OAAO,KAAKiC,KAAKtG,OAAO,KAAK0G,kBAAmBnJ,EAAGiB,EACrD,CAWAmI,SAASC,EAAczI,GACrB,MAAM0I,EAAK,IAAIC,EAAS,KAAMF,EAAMzI,GAEpC,OADA,KAAKsF,OAAOL,KAAKyD,GACVA,CACT,CAWAE,WAAW5I,GAET,MAAM0I,EAAK,IAAIG,EAAQ,KAAM7I,GAE7B,OADA,KAAKsF,OAAOL,KAAKyD,GACVA,CACT,CAUAI,SAAS9I,GACP,GAAI,kBAAoBA,EACtB,MAAM,IAAIV,UAAU,2BAEtB,IAAK,MAAMqG,KAAM,KAAKL,OACpB,GAAIK,EAAG3F,WAAaA,EAClB,OAAO2F,CAIb,EAuBF,MAAagD,EAOX7I,YAAYiJ,EAAyBN,EAAczI,GACjD,KAAM+I,aAAqBb,GACzB,MAAM,IAAI5I,UAAU,oCAEtB,IAAMW,OAAOC,UAAUuI,IAAW,GAAKA,EACrC,MAAM,IAAInJ,UAAU,iCAEtB,MAAM0J,EAAY,EAAID,EAAUhJ,KAC1BkJ,EAAWF,EAAUzD,OAAOH,QAAO,CAAC+D,EAAKvD,IAAOuD,EAAMvD,EAAG8C,MAAM,GACrE,GAAKA,EAAOQ,EAAYD,EACtB,MAAM,IAAI5H,MAAM,sCACG4H,EAAYC,GAAY,OACzBD,EAAY,YAKhC,KAAKD,UAAYA,EAGjB,KAAKN,KAAOA,EAOZ,KAAKU,WAAa,GAAKV,GAAQ,EAC3B,KAAOA,IACT,KAAKU,UAAY,YAMnB,KAAKC,MAAQH,EACT,KAAKF,UAAUX,MACjB,KAAKgB,MAAQJ,EAAYC,EAAWR,GAKtC,KAAKY,SAAWpB,EAAiB,KAAKkB,WAAa,KAAKC,OAYxD,KAAKpJ,SAAWA,CAClB,CAIAyB,OAAOrC,EAAgBiB,GAIrB,OAFkB4H,EADL,KAAKc,UAAUR,kBACc,KAAKc,YACnB,KAAKD,KAEnC,CAOAvH,OAAOwG,GACL,GAAI,kBAAoBA,IAChBpI,OAAOC,UAAUmI,IACjBA,IAAUJ,EAAiBI,EAAQ,KAAKc,WAC9C,MAAM,IAAI7J,UAAUyB,EAAiB,kBAAmB,MAClC,wCAA0C,KAAKoI,WAEvE,MAAMhB,EAAO,KAAKY,UAAUR,kBACtBe,EAAYrB,EAAiBI,GAAS,KAAKe,OACjD,KAAKL,UAAUT,gBAAgBL,EAAiBE,GAAQ,KAAKkB,UAC5BC,EACnC,EAoBF,MAAaT,UAAgBF,EAC3B7I,YAAYiJ,EAAyB/I,GACnC,MAAM+I,EAAW,EAAG/I,EACtB,CAKAyB,OAAOrC,EAAgBiB,GACrB,QAAS,MAAMoB,OAAOrC,EAAGiB,EAC3B,CAGAwB,OAAOwG,GACD,mBAAqBA,IAEvBA,GAASA,GAEX,MAAMxG,OAAOwG,EACf,EAkBF,MAAakB,UAAa1J,EAExBC,YAAYF,EAAiCI,GAC3C,KAAQJ,aAAkBsB,GAAmBtB,EAAOuB,WAC1ClB,OAAOC,UAAUN,IAAY,GAAKA,GAC1C,MAAM,IAAIN,UAAU,yEAItB,IAAIS,GAAQ,EACNH,aAAkBsB,IACtBnB,EAAOH,GAET,MAAMG,EAAMC,GAOZ,KAAKJ,OAASA,CAChB,CAGAQ,QAAQhB,EAAeiB,GACrB,IAAIN,EAAO,KAAKA,KAIhB,OAHI,EAAIA,IACNA,EAAQ,KAAKH,OAA0B6B,OAAOrC,EAAGiB,IAE5CN,CACT,CAGA0B,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACzBxB,EAAO,KAAKA,KAIhB,OAHI,EAAIA,IACNA,EAAQ,KAAKH,OAA0B6B,OAAOrC,EAAGiB,IAE5Cd,EAAmBH,GAAGoK,MAAMnJ,EAAQA,EAASN,EACtD,CAOA8B,OAAOC,EAAiB1C,EAAeiB,GACrC,IAAIN,EAAO,KAAKH,OAIhB,GAHI,KAAKA,kBAAkBsB,IACzBnB,EAAO+B,EAAIlC,UAEPkC,aAAezC,YAAcU,IAAS+B,EAAIlC,QAC9C,MAAM,IAAIN,UAAUyB,EAAiB,cAAe,MAC9B,qBAAuBhB,EAAO,uBAEtD,GAAKM,EAASN,EAAQX,EAAEQ,OACtB,MAAM,IAAIU,WAAW,gCAEvB,MAAMmJ,EAAYlK,EAAmBuC,GAKrC,OAJAvC,EAAmBH,GAAGsK,MAAMD,EAAUE,SAAS,OAAQtJ,EAAQN,EAAM,OACjE,KAAKH,kBAAkBsB,GACzB,KAAKtB,OAAOiC,OAAO9B,EAAMX,EAAGiB,GAEvBN,CACT,EAgBF,MAAa6J,UAAgB/J,EAC3BC,YAAYE,GACV,OAAO,EAAGA,EACZ,CAGAI,QAAQhB,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC9BpC,EAAgBC,GAChB,IAAI2F,EAAM1E,EACV,KAAQ0E,EAAM3F,EAAEQ,QAAY,IAAMR,EAAE2F,IAClCA,GAAO,EAET,OAAO,EAAIA,EAAM1E,CACnB,CAGAoB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAMxB,EAAO,KAAKK,QAAQhB,EAAGiB,GAC7B,OAAOd,EAAmBH,GAAGoK,MAAMnJ,EAAQA,EAASN,EAAO,GAAG4J,SAAS,QACzE,CAGA9H,OAAOC,EAAa1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAItC,kBAAoBO,IACtBA,EAAM+H,OAAO/H,IAEf,MAAMgI,EAAO7K,EAAAO,OAAOC,KAAKqC,EAAK,QACxB/B,EAAO+J,EAAKlK,OAClB,GAAKS,EAASN,EAAQX,EAAEQ,OACtB,MAAM,IAAIU,WAAW,4BAEvB,MAAMZ,EAASH,EAAmBH,GAGlC,OAFA0K,EAAKC,KAAKrK,EAAQW,GAClBX,EAAOW,EAASN,GAAQ,EACjBA,EAAO,CAChB,EAsBF,MAAaiK,UAAanK,EAExBC,YAAYmK,EAA2BjK,GAKrC,GAJK,kBAAoBiK,QAAazI,IAAcxB,IAClDA,EAAWiK,EACXA,OAAUzI,QAERA,IAAcyI,EAChBA,GAAW,OACN,IAAKhK,OAAOC,UAAU+J,GAC3B,MAAM,IAAI3K,UAAU,8BAGtB,OAAO,EAAGU,GAUV,KAAKiK,QAAUA,CACjB,CAGA7J,QAAQhB,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE9B,OADApC,EAAgBC,GACTA,EAAEQ,OAASS,CACpB,CAGAoB,OAAOrC,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAMxB,EAAO,KAAKK,QAAQhB,EAAGiB,GAC7B,GAAK,GAAK,KAAK4J,SACP,KAAKA,QAAUlK,EACrB,MAAM,IAAIO,WAAW,+BAEvB,OAAOf,EAAmBH,GAAGoK,MAAMnJ,EAAQA,EAASN,GAAM4J,SAAS,QACrE,CAGA9H,OAAOC,EAA4B1C,GAAyB,IAAViB,EAAMkB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAIrD,kBAAoBO,IACtBA,EAAM+H,OAAO/H,IAEf,MAAMgI,EAAO7K,EAAAO,OAAOC,KAAKqC,EAAK,QACxB/B,EAAO+J,EAAKlK,OAClB,GAAK,GAAK,KAAKqK,SACP,KAAKA,QAAUlK,EACrB,MAAM,IAAIO,WAAW,+BAEvB,GAAKD,EAASN,EAAQX,EAAEQ,OACtB,MAAM,IAAIU,WAAW,4BAGvB,OADAwJ,EAAKC,KAAKxK,EAAmBH,GAAIiB,GAC1BN,CACT,EAsBF,MAAamK,UAAoBrK,EAE/BC,YAAYuI,EAAUrI,GACpB,MAAM,EAAGA,GAWT,KAAKqI,MAAQA,CACf,CAGA5G,OAAOrC,EAAgBiB,GACrB,OAAO,KAAKgI,KACd,CAGAxG,OAAOC,EAAQ1C,EAAgBiB,GAE7B,OAAO,CACT,EAOW8J,EAAAA,GAAU,CAACnI,EAAwB3B,EAAiBL,IAC7D,IAAI+B,EAAaC,EAAQ3B,EAAQL,GAIxBmK,EAAAA,GAAOnK,GAA4B,IAAIiC,EAAK,EAAGjC,GAI/CmK,EAAAA,GAAQnK,GAA4B,IAAIiC,EAAK,EAAGjC,GAQhDmK,EAAAA,GAAQnK,GAA4B,IAAIiC,EAAK,EAAGjC,GAYhDmK,EAAAA,GAASnK,GAAkC,IAAImD,EAAWnD,GAoD1DmK,EAAAA,GAASnK,GAAiC,IAAI0D,EAAU1D,GAuCxDmK,EAAAA,GAAU,CAAI7E,EAA8BtF,EAAmBuF,IACxE,IAAIF,EAAaC,EAAQtF,EAAUuF,GAO1B4E,EAAAA,GAAO,CAAItF,EAA0BC,EAAgC9E,IAC9E,IAAI4E,EAAYC,EAAeC,EAAO9E,GAY7BmK,EAAAA,GAAQ,CAACvK,EAAiCI,IAA4B,IAAIuJ,EAAK3J,EAAQI,iGC1kF9F,SAAUoK,EAAOC,GACrB,IAAKpK,OAAOqK,cAAcD,IAAMA,EAAI,EAAG,MAAM,IAAIjJ,MAAM,2BAA2BiJ,IACpF,CAMM,SAAUE,EAAMnL,GACpB,KAAMA,aAAaC,YAAa,MAAM,IAAIC,UAAU,uBAAuB,QAAAkL,EAAAjJ,UAAA3B,OADzB6K,EAAiB,IAAAjF,MAAAgF,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAjBD,EAAiBC,EAAA,GAAAnJ,UAAAmJ,GAEnE,GAAID,EAAQ7K,OAAS,IAAM6K,EAAQE,SAASvL,EAAEQ,QAC5C,MAAM,IAAIN,UAAU,iCAAiCmL,oBAA0BrL,EAAEQ,SACrF,CA2BA,MAAMgL,EAAS,CACbR,SACAS,KArCI,SAAezL,GACnB,GAAiB,mBAANA,EAAiB,MAAM,IAAIgC,MAAM,yBAAyBhC,IACvE,EAoCEmL,QACAO,KAvBI,SAAeA,GACnB,GAAoB,oBAATA,GAA8C,oBAAhBA,EAAKpK,OAC5C,MAAM,IAAIU,MAAM,mDAClBgJ,EAAOU,EAAKC,WACZX,EAAOU,EAAKE,SACd,EAmBEC,OAjBI,SAAiBC,GAAmC,IAApBC,IAAa5J,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,KAAAA,UAAA,GACjD,GAAI2J,EAASE,UAAW,MAAM,IAAIhK,MAAM,oCACxC,GAAI+J,GAAiBD,EAASG,SAAU,MAAM,IAAIjK,MAAM,wCAC1D,EAeEkK,OAdI,SAAiBC,EAAUL,GAC/BX,EAAMgB,GACN,MAAMC,EAAMN,EAASH,UACrB,GAAIQ,EAAI3L,OAAS4L,EACf,MAAM,IAAIpK,MAAM,yDAAyDoK,IAE7E,GAWA,IChCaC,GCZU,kBAATC,MAAqB,WAAYA,MAAOA,KAAKC,ODYhCC,GACzB,IAAIC,SAASD,EAAIlM,OAAQkM,EAAIjM,WAAYiM,EAAIE,aAGlCC,EAAOA,CAAC5D,EAAchC,IAAmBgC,GAAS,GAAKhC,EAAWgC,IAAShC,EAKxF,KAHgF,KAA5D,IAAI9G,WAAW,IAAI2M,YAAY,CAAC,YAAatM,QAAQ,IAG9D,MAAM,IAAI0B,MAAM,+CAEboE,MAAM/F,KAAK,CAAEG,OAAQ,MAAO,CAACwF,EAAGJ,IAAMA,EAAE2E,SAAS,IAAIsC,SAAS,EAAG,OA+DzE,SAAUC,EAAQC,GAEtB,GADoB,kBAATA,IAAmBA,EAT1B,SAAsBC,GAC1B,GAAmB,kBAARA,EACT,MAAM,IAAI9M,UAAU,2CAA2C8M,GAEjE,OAAO,IAAIC,aAAcxK,OAAOuK,EAClC,CAIuCE,CAAYH,MAC3CA,aAAgB9M,YACpB,MAAM,IAAIC,UAAU,iDAAiD6M,MACvE,OAAOA,CACT,CAoBM,MAAgBI,EAiBpBC,QACE,OAAOC,KAAKC,YACd,EA8BI,SAAUC,EAAmCC,GACjD,MAAMC,EAASC,GAA+BF,IAAkBG,OAAOb,EAAQY,IAAUE,SACnFC,EAAML,IAIZ,OAHAC,EAAM9B,UAAYkC,EAAIlC,UACtB8B,EAAM7B,SAAWiC,EAAIjC,SACrB6B,EAAMnM,OAAS,IAAMkM,IACdC,CACT,CE1JM,MAAgBK,UAAgCX,EAcpDzM,YACWkL,EACFD,EACEoC,EACAC,GAETC,QALS,KAAArC,SAAAA,EACF,KAAAD,UAAAA,EACE,KAAAoC,UAAAA,EACA,KAAAC,KAAAA,EATD,KAAA/B,UAAW,EACX,KAAAzL,OAAS,EACT,KAAA0N,IAAM,EACN,KAAAlC,WAAY,EASpBqB,KAAK/M,OAAS,IAAIL,WAAW2L,GAC7ByB,KAAKc,KAAO9B,EAAWgB,KAAK/M,OAC9B,CACAqN,OAAOZ,GACLvB,EAAAA,OAAc6B,MACd,MAAM,KAAEc,EAAI,OAAE7N,EAAM,SAAEsL,GAAayB,KAE7Be,GADNrB,EAAOD,EAAQC,IACEvM,OACjB,IAAK,IAAI0N,EAAM,EAAGA,EAAME,GAAO,CAC7B,MAAMC,EAAO9L,KAAK6J,IAAIR,EAAWyB,KAAKa,IAAKE,EAAMF,GAEjD,GAAIG,IAASzC,EAKbtL,EAAOgO,IAAIvB,EAAKwB,SAASL,EAAKA,EAAMG,GAAOhB,KAAKa,KAChDb,KAAKa,KAAOG,EACZH,GAAOG,EACHhB,KAAKa,MAAQtC,IACfyB,KAAKmB,QAAQL,EAAM,GACnBd,KAAKa,IAAM,OAVb,CACE,MAAMO,EAAWpC,EAAWU,GAC5B,KAAOnB,GAAYwC,EAAMF,EAAKA,GAAOtC,EAAUyB,KAAKmB,QAAQC,EAAUP,IAa1E,OAFAb,KAAK7M,QAAUuM,EAAKvM,OACpB6M,KAAKqB,aACErB,IACT,CACAsB,WAAWxC,GACTX,EAAAA,OAAc6B,MACd7B,EAAAA,OAAcW,EAAKkB,MACnBA,KAAKpB,UAAW,EAIhB,MAAM,OAAE3L,EAAM,KAAE6N,EAAI,SAAEvC,EAAQ,KAAEoC,GAASX,KACzC,IAAI,IAAEa,GAAQb,KAEd/M,EAAO4N,KAAS,IAChBb,KAAK/M,OAAOiO,SAASL,GAAKU,KAAK,GAE3BvB,KAAKU,UAAYnC,EAAWsC,IAC9Bb,KAAKmB,QAAQL,EAAM,GACnBD,EAAM,GAGR,IAAK,IAAItI,EAAIsI,EAAKtI,EAAIgG,EAAUhG,IAAKtF,EAAOsF,GAAK,GAhFrD,SAAsBuI,EAAgB5N,EAAoB0I,EAAe+E,GACvE,GAAiC,oBAAtBG,EAAKU,aAA6B,OAAOV,EAAKU,aAAatO,EAAY0I,EAAO+E,GACzF,MAAMc,EAAOC,OAAO,IACdC,EAAWD,OAAO,YAClBE,EAAKpO,OAAQoI,GAAS6F,EAAQE,GAC9BE,EAAKrO,OAAOoI,EAAQ+F,GACpBG,EAAInB,EAAO,EAAI,EACfoB,EAAIpB,EAAO,EAAI,EACrBG,EAAKkB,UAAU9O,EAAa4O,EAAGF,EAAIjB,GACnCG,EAAKkB,UAAU9O,EAAa6O,EAAGF,EAAIlB,EACrC,CA0EIa,CAAaV,EAAMvC,EAAW,EAAGmD,OAAqB,EAAd1B,KAAK7M,QAAawN,GAC1DX,KAAKmB,QAAQL,EAAM,GACnB,MAAMmB,EAAQjD,EAAWF,GACnBiC,EAAMf,KAAK1B,UAEjB,GAAIyC,EAAM,EAAG,MAAM,IAAIpM,MAAM,+CAC7B,MAAMuN,EAASnB,EAAM,EACfoB,EAAQnC,KAAKoC,MACnB,GAAIF,EAASC,EAAMhP,OAAQ,MAAM,IAAIwB,MAAM,sCAC3C,IAAK,IAAI4D,EAAI,EAAGA,EAAI2J,EAAQ3J,IAAK0J,EAAMD,UAAU,EAAIzJ,EAAG4J,EAAM5J,GAAIoI,EACpE,CACAJ,SACE,MAAM,OAAEtN,EAAM,UAAEqL,GAAc0B,KAC9BA,KAAKsB,WAAWrO,GAChB,MAAMoP,EAAMpP,EAAO8J,MAAM,EAAGuB,GAE5B,OADA0B,KAAKsC,UACED,CACT,CACApC,WAAWsC,GACTA,IAAAA,EAAO,IAAKvC,KAAK3M,aACjBkP,EAAGtB,OAAOjB,KAAKoC,OACf,MAAM,SAAE7D,EAAQ,OAAEtL,EAAM,OAAEE,EAAM,SAAEyL,EAAQ,UAAED,EAAS,IAAEkC,GAAQb,KAM/D,OALAuC,EAAGpP,OAASA,EACZoP,EAAG1B,IAAMA,EACT0B,EAAG3D,SAAWA,EACd2D,EAAG5D,UAAYA,EACXxL,EAASoL,GAAUgE,EAAGtP,OAAOgO,IAAIhO,GAC9BsP,CACT,ECpHF,MAAMC,EAAad,OAAO,GAAK,GAAK,GAC9BD,EAAOC,OAAO,IAGd,SAAUe,EAAQ7E,GACtB,OADmC9I,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACpB,CAAEgN,EAAGtO,OAAOoK,EAAI4E,GAAaT,EAAGvO,OAAQoK,GAAK6D,EAAQe,IAC7D,CAAEV,EAAsC,EAAnCtO,OAAQoK,GAAK6D,EAAQe,GAAiBT,EAA4B,EAAzBvO,OAAOoK,EAAI4E,GAClE,CAwCA,MAqBA,EARY,CACVC,UAAS7L,MApDL,SAAgB8L,GAAyB,IAAVC,EAAE7N,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACjC8N,EAAK,IAAIrD,YAAYmD,EAAIvP,QACzB0P,EAAK,IAAItD,YAAYmD,EAAIvP,QAC7B,IAAK,IAAIoF,EAAI,EAAGA,EAAImK,EAAIvP,OAAQoF,IAAK,CACnC,MAAM,EAAEuJ,EAAC,EAAEC,GAAMU,EAAQC,EAAInK,GAAIoK,IAChCC,EAAGrK,GAAIsK,EAAGtK,IAAM,CAACuJ,EAAGC,GAEvB,MAAO,CAACa,EAAIC,EACd,EA4CkBC,MA1CGA,CAAChB,EAAWC,IAAeL,OAAOI,IAAM,IAAML,EAAQC,OAAOK,IAAM,GA2CtFgB,MAzCYA,CAACjB,EAAWC,EAAWiB,IAAclB,IAAMkB,EAyChDC,MAxCKA,CAACnB,EAAWC,EAAWiB,IAAelB,GAAM,GAAKkB,EAAOjB,IAAMiB,EAyC1EE,OAvCaA,CAACpB,EAAWC,EAAWiB,IAAelB,IAAMkB,EAAMjB,GAAM,GAAKiB,EAuClEG,OAtCKA,CAACrB,EAAWC,EAAWiB,IAAelB,GAAM,GAAKkB,EAAOjB,IAAMiB,EAsC3DI,OApCHA,CAACtB,EAAWC,EAAWiB,IAAelB,GAAM,GAAKkB,EAAOjB,IAAOiB,EAAI,GAoCxDK,OAnCXA,CAACvB,EAAWC,EAAWiB,IAAelB,IAAOkB,EAAI,GAAQjB,GAAM,GAAKiB,EAoCjFM,QAlCcA,CAACxB,EAAWC,IAAcA,EAkC/BwB,QAjCKA,CAACzB,EAAWC,IAAcD,EAkCxC0B,OAhCaA,CAAC1B,EAAWC,EAAWiB,IAAelB,GAAKkB,EAAMjB,IAAO,GAAKiB,EAgClES,OA/BKA,CAAC3B,EAAWC,EAAWiB,IAAejB,GAAKiB,EAAMlB,IAAO,GAAKkB,EA+B1DU,OA7BHA,CAAC5B,EAAWC,EAAWiB,IAAejB,GAAMiB,EAAI,GAAQlB,IAAO,GAAKkB,EA6BzDW,OA5BXA,CAAC7B,EAAWC,EAAWiB,IAAelB,GAAMkB,EAAI,GAAQjB,IAAO,GAAKiB,EA6BjFY,IAxBI,SAAchB,EAAYC,EAAYgB,EAAYC,GACtD,MAAM/B,GAAKc,IAAO,IAAMiB,IAAO,GAC/B,MAAO,CAAEhC,EAAIc,EAAKiB,GAAO9B,EAAI,GAAK,GAAM,GAAM,EAAGA,EAAO,EAAJA,EACtD,EAqBOgC,MAnBOA,CAAClB,EAAYiB,EAAYE,KAAgBnB,IAAO,IAAMiB,IAAO,IAAME,IAAO,GAmB1EC,MAlBAA,CAACC,EAAatB,EAAYiB,EAAYM,IACjDvB,EAAKiB,EAAKM,GAAOD,EAAM,GAAK,GAAM,GAAM,EAiBtBE,MAhBPA,CAACvB,EAAYiB,EAAYE,EAAYK,KAChDxB,IAAO,IAAMiB,IAAO,IAAME,IAAO,IAAMK,IAAO,GAerBC,MAddA,CAACJ,EAAatB,EAAYiB,EAAYM,EAAYI,IAC7D3B,EAAKiB,EAAKM,EAAKI,GAAOL,EAAM,GAAK,GAAM,GAAM,EAabM,MAVrBA,CAACN,EAAatB,EAAYiB,EAAYM,EAAYI,EAAYE,IACzE7B,EAAKiB,EAAKM,EAAKI,EAAKE,GAAOP,EAAM,GAAK,GAAM,GAAM,EASXQ,MAZ5BA,CAAC7B,EAAYiB,EAAYE,EAAYK,EAAYM,KAC5D9B,IAAO,IAAMiB,IAAO,IAAME,IAAO,IAAMK,IAAO,IAAMM,IAAO,KCjDvDC,EAAWC,GAAaC,EAAAA,MAAU,CACvC,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,sBAClEC,KAAInH,GAAK8D,OAAO9D,MAGZoH,EAAa,IAAIzF,YAAY,IAC7B0F,EAAa,IAAI1F,YAAY,IAE7B,MAAO2F,UAAezE,EAsB1BpN,cACEuN,MAAM,IAAK,GAAI,IAAI,GAlBrB,KAAAgC,GAAK,WACL,KAAAC,IAAK,UACL,KAAAgB,IAAK,WACL,KAAAC,IAAK,WACL,KAAAK,GAAK,WACL,KAAAH,IAAK,SACL,KAAAO,IAAK,WACL,KAAAF,GAAK,WACL,KAAAI,GAAK,WACL,KAAAE,IAAK,WACL,KAAAQ,IAAK,WACL,KAAAC,GAAK,UACL,KAAAC,GAAK,UACL,KAAAC,IAAK,SACL,KAAAC,GAAK,WACL,KAAAC,GAAK,SAIL,CAEUpD,MAIR,MAAM,GAAEQ,EAAE,GAAEC,EAAE,GAAEgB,EAAE,GAAEC,EAAE,GAAEK,EAAE,GAAEH,EAAE,GAAEO,EAAE,GAAEF,EAAE,GAAEI,EAAE,GAAEE,EAAE,GAAEQ,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAOxF,KAC3E,MAAO,CAAC4C,EAAIC,EAAIgB,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIQ,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACtE,CAEUvE,IACR2B,EAAYC,EAAYgB,EAAYC,EAAYK,EAAYH,EAAYO,EAAYF,EACpFI,EAAYE,EAAYQ,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,GAEpFxF,KAAK4C,GAAU,EAALA,EACV5C,KAAK6C,GAAU,EAALA,EACV7C,KAAK6D,GAAU,EAALA,EACV7D,KAAK8D,GAAU,EAALA,EACV9D,KAAKmE,GAAU,EAALA,EACVnE,KAAKgE,GAAU,EAALA,EACVhE,KAAKuE,GAAU,EAALA,EACVvE,KAAKqE,GAAU,EAALA,EACVrE,KAAKyE,GAAU,EAALA,EACVzE,KAAK2E,GAAU,EAALA,EACV3E,KAAKmF,GAAU,EAALA,EACVnF,KAAKoF,GAAU,EAALA,EACVpF,KAAKqF,GAAU,EAALA,EACVrF,KAAKsF,GAAU,EAALA,EACVtF,KAAKuF,GAAU,EAALA,EACVvF,KAAKwF,GAAU,EAALA,CACZ,CACUrE,QAAQL,EAAgBlN,GAEhC,IAAK,IAAI2E,EAAI,EAAGA,EAAI,GAAIA,IAAK3E,GAAU,EACrCoR,EAAWzM,GAAKuI,EAAK2E,UAAU7R,GAC/BqR,EAAW1M,GAAKuI,EAAK2E,UAAW7R,GAAU,GAE5C,IAAK,IAAI2E,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAE5B,MAAMmN,EAA4B,EAArBV,EAAWzM,EAAI,IACtBoN,EAA4B,EAArBV,EAAW1M,EAAI,IACtBqN,EAAMd,EAAAA,OAAWY,EAAMC,EAAM,GAAKb,EAAAA,OAAWY,EAAMC,EAAM,GAAKb,EAAAA,MAAUY,EAAMC,EAAM,GACpFE,EAAMf,EAAAA,OAAWY,EAAMC,EAAM,GAAKb,EAAAA,OAAWY,EAAMC,EAAM,GAAKb,EAAAA,MAAUY,EAAMC,EAAM,GAEpFG,EAA0B,EAApBd,EAAWzM,EAAI,GACrBwN,EAA0B,EAApBd,EAAW1M,EAAI,GACrByN,EAAMlB,EAAAA,OAAWgB,EAAKC,EAAK,IAAMjB,EAAAA,OAAWgB,EAAKC,EAAK,IAAMjB,EAAAA,MAAUgB,EAAKC,EAAK,GAChFE,EAAMnB,EAAAA,OAAWgB,EAAKC,EAAK,IAAMjB,EAAAA,OAAWgB,EAAKC,EAAK,IAAMjB,EAAAA,MAAUgB,EAAKC,EAAK,GAEhFG,EAAOpB,EAAAA,MAAUe,EAAKI,EAAKhB,EAAW1M,EAAI,GAAI0M,EAAW1M,EAAI,KAC7D4N,EAAOrB,EAAAA,MAAUoB,EAAMN,EAAKI,EAAKhB,EAAWzM,EAAI,GAAIyM,EAAWzM,EAAI,KACzEyM,EAAWzM,GAAY,EAAP4N,EAChBlB,EAAW1M,GAAY,EAAP2N,EAElB,IAAI,GAAEtD,EAAE,GAAEC,EAAE,GAAEgB,EAAE,GAAEC,EAAE,GAAEK,EAAE,GAAEH,EAAE,GAAEO,EAAE,GAAEF,EAAE,GAAEI,EAAE,GAAEE,EAAE,GAAEQ,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAOxF,KAEzE,IAAK,IAAIzH,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAM6N,EAAUtB,EAAAA,OAAWL,EAAIE,EAAI,IAAMG,EAAAA,OAAWL,EAAIE,EAAI,IAAMG,EAAAA,OAAWL,EAAIE,EAAI,IAC/E0B,EAAUvB,EAAAA,OAAWL,EAAIE,EAAI,IAAMG,EAAAA,OAAWL,EAAIE,EAAI,IAAMG,EAAAA,OAAWL,EAAIE,EAAI,IAE/E2B,EAAQ7B,EAAKU,GAAQV,EAAKY,EAC1BkB,EAAQ5B,EAAKS,GAAQT,EAAKW,EAG1BkB,EAAO1B,EAAAA,MAAUU,EAAIa,EAASE,EAAM1B,EAAUtM,GAAI0M,EAAW1M,IAC7DkO,EAAM3B,EAAAA,MAAU0B,EAAMjB,EAAIa,EAASE,EAAM1B,EAAUrM,GAAIyM,EAAWzM,IAClEmO,EAAa,EAAPF,EAENG,EAAU7B,EAAAA,OAAWlC,EAAIC,EAAI,IAAMiC,EAAAA,OAAWlC,EAAIC,EAAI,IAAMiC,EAAAA,OAAWlC,EAAIC,EAAI,IAC/E+D,EAAU9B,EAAAA,OAAWlC,EAAIC,EAAI,IAAMiC,EAAAA,OAAWlC,EAAIC,EAAI,IAAMiC,EAAAA,OAAWlC,EAAIC,EAAI,IAC/EgE,EAAQjE,EAAKiB,EAAOjB,EAAKuB,EAAON,EAAKM,EACrC2C,EAAQjE,EAAKiB,EAAOjB,EAAKmB,EAAOF,EAAKE,EAC3CuB,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALV,EACLW,EAAU,EAALT,IACF7C,EAAG2C,EAAI1C,EAAG4C,GAAOG,EAAAA,IAAa,EAALP,EAAa,EAALF,EAAc,EAANoC,EAAe,EAANC,IACrDnC,EAAU,EAALJ,EACLE,EAAU,EAALL,EACLG,EAAU,EAALN,EACLG,EAAU,EAALF,EACLD,EAAU,EAALjB,EACLkB,EAAU,EAALjB,EACL,MAAMkE,EAAMjC,EAAAA,MAAU4B,EAAKE,EAASE,GACpClE,EAAKkC,EAAAA,MAAUiC,EAAKN,EAAKE,EAASE,GAClChE,EAAW,EAANkE,IAGJjF,EAAGc,EAAIb,EAAGc,GAAOiC,EAAAA,IAAkB,EAAV9E,KAAK4C,GAAkB,EAAV5C,KAAK6C,GAAa,EAALD,EAAa,EAALC,MAC3Df,EAAG+B,EAAI9B,EAAG+B,GAAOgB,EAAAA,IAAkB,EAAV9E,KAAK6D,GAAkB,EAAV7D,KAAK8D,GAAa,EAALD,EAAa,EAALC,MAC3DhC,EAAGqC,EAAIpC,EAAGiC,GAAOc,EAAAA,IAAkB,EAAV9E,KAAKmE,GAAkB,EAAVnE,KAAKgE,GAAa,EAALG,EAAa,EAALH,MAC3DlC,EAAGyC,EAAIxC,EAAGsC,GAAOS,EAAAA,IAAkB,EAAV9E,KAAKuE,GAAkB,EAAVvE,KAAKqE,GAAa,EAALE,EAAa,EAALF,MAC3DvC,EAAG2C,EAAI1C,EAAG4C,GAAOG,EAAAA,IAAkB,EAAV9E,KAAKyE,GAAkB,EAAVzE,KAAK2E,GAAa,EAALF,EAAa,EAALE,MAC3D7C,EAAGqD,EAAIpD,EAAGqD,GAAON,EAAAA,IAAkB,EAAV9E,KAAKmF,GAAkB,EAAVnF,KAAKoF,GAAa,EAALD,EAAa,EAALC,MAC3DtD,EAAGuD,EAAItD,EAAGuD,GAAOR,EAAAA,IAAkB,EAAV9E,KAAKqF,GAAkB,EAAVrF,KAAKsF,GAAa,EAALD,EAAa,EAALC,MAC3DxD,EAAGyD,EAAIxD,EAAGyD,GAAOV,EAAAA,IAAkB,EAAV9E,KAAKuF,GAAkB,EAAVvF,KAAKwF,GAAa,EAALD,EAAa,EAALC,IAC9DxF,KAAKiB,IAAI2B,EAAIC,EAAIgB,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIQ,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACvE,CACUnE,aACR2D,EAAWzD,KAAK,GAChB0D,EAAW1D,KAAK,EAClB,CACAe,UACEtC,KAAK/M,OAAOsO,KAAK,GACjBvB,KAAKiB,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxD,EAGF,MAAM+F,UAAmB9B,EAmBvB7R,cACEuN,QAlBF,KAAAgC,IAAK,WACL,KAAAC,GAAK,UACL,KAAAgB,GAAK,WACL,KAAAC,IAAK,WACL,KAAAK,GAAK,UACL,KAAAH,GAAK,UACL,KAAAO,GAAK,WACL,KAAAF,GAAK,WACL,KAAAI,GAAK,UACL,KAAAE,GAAK,WACL,KAAAQ,GAAK,WACL,KAAAC,GAAK,SACL,KAAAC,GAAK,WACL,KAAAC,GAAK,WACL,KAAAC,GAAK,UACL,KAAAC,IAAK,WAIHxF,KAAK1B,UAAY,EACnB,EAGF,MAAM2I,UAAmB/B,EAmBvB7R,cACEuN,QAlBF,KAAAgC,GAAK,UACL,KAAAC,IAAK,SACL,KAAAgB,IAAK,WACL,KAAAC,IAAK,UACL,KAAAK,GAAK,UACL,KAAAH,GAAK,WACL,KAAAO,IAAK,WACL,KAAAF,GAAK,WACL,KAAAI,IAAK,WACL,KAAAE,IAAK,WACL,KAAAQ,IAAK,WACL,KAAAC,GAAK,WACL,KAAAC,GAAK,UACL,KAAAC,GAAK,UACL,KAAAC,GAAK,UACL,KAAAC,IAAK,WAIHxF,KAAK1B,UAAY,EACnB,EAGF,MAAM4I,UAAehC,EAmBnB7R,cACEuN,QAlBF,KAAAgC,IAAK,UACL,KAAAC,IAAK,WACL,KAAAgB,GAAK,WACL,KAAAC,GAAK,UACL,KAAAK,IAAK,WACL,KAAAH,GAAK,UACL,KAAAO,GAAK,UACL,KAAAF,IAAK,UACL,KAAAI,GAAK,WACL,KAAAE,IAAK,QACL,KAAAQ,IAAK,WACL,KAAAC,GAAK,WACL,KAAAC,IAAK,UACL,KAAAC,GAAK,WACL,KAAAC,GAAK,WACL,KAAAC,IAAK,WAIHxF,KAAK1B,UAAY,EACnB,EAGK,MAAM6I,EAASjH,GAAgB,IAAM,IAAIgF,IACtBhF,GAAgB,IAAM,IAAI8G,IAC1B9G,GAAgB,IAAM,IAAI+G,IAC9B/G,GAAgB,IAAM,IAAIgH,6BCpPhD,MAAME,EAAM1F,OAAO,GACb2F,EAAM3F,OAAO,GACb4F,EAAM5F,OAAO,GACb6F,EAAM7F,OAAO,GACb8F,EAAO9F,OAAO,gFACd+F,EAAQzT,OAAO0T,OAAO,CACxBC,EAAGjG,QAAQ,GACXkG,EAAGlG,OAAO,iFACVmG,EAAGnG,OAAO,iFACVK,EAAGyF,EACH5J,EAAG4J,EACH1F,EAAGJ,OAAO,GACVoG,GAAIpG,OAAO,iFACXqG,GAAIrG,OAAO,mFAGTsG,EAAYtG,OAAO,uEACnBuG,EAAUvG,OAAO,iFAEjBwG,GADSxG,OAAO,gFACIA,OAAO,kFAC3ByG,EAAoBzG,OAAO,iFAC3B0G,EAAiB1G,OAAO,gFACxB2G,EAAiB3G,OAAO,iFAC9B,MAAM4G,EACFjV,YAAYkV,EAAGC,EAAGC,EAAGC,GACjB1I,KAAKuI,EAAIA,EACTvI,KAAKwI,EAAIA,EACTxI,KAAKyI,EAAIA,EACTzI,KAAK0I,EAAIA,CACb,CACAC,kBAAkBC,GACd,KAAMA,aAAaC,GACf,MAAM,IAAIhW,UAAU,4CAExB,OAAI+V,EAAEE,OAAOD,EAAME,MACRT,EAAcS,KAClB,IAAIT,EAAcM,EAAEL,EAAGK,EAAEJ,EAAGnB,EAAK2B,GAAIJ,EAAEL,EAAIK,EAAEJ,GACxD,CACAG,qBAAqBM,GACjB,MAAMC,EA6ed,SAAqBC,GAAmB,IAAbP,EAAC9T,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG2S,EAAMI,EACjC,MAAMrH,EAAM,IAAIzH,MAAMoQ,EAAKhW,QAOrBiW,EAAWC,GANMF,EAAKzQ,QAAO,CAACO,EAAKqQ,EAAK/Q,IACtC+Q,IAAQlC,EACDnO,GACXuH,EAAIjI,GAAKU,EACF+P,GAAI/P,EAAMqQ,EAAKV,KACvBvB,GACqCuB,GAOxC,OANAO,EAAKI,aAAY,CAACtQ,EAAKqQ,EAAK/Q,IACpB+Q,IAAQlC,EACDnO,GACXuH,EAAIjI,GAAKyQ,GAAI/P,EAAMuH,EAAIjI,GAAIqQ,GACpBI,GAAI/P,EAAMqQ,EAAKV,KACvBQ,GACI5I,CACX,CA7fsBgJ,CAAYP,EAAOlE,KAAK6D,GAAMA,EAAEH,KAC9C,OAAOQ,EAAOlE,KAAI,CAAC6D,EAAGrQ,IAAMqQ,EAAEa,SAASP,EAAM3Q,KACjD,CACAoQ,kBAAkBM,GACd,OAAOjJ,KAAK0J,cAAcT,GAAQlE,IAAI/E,KAAK2J,WAC/C,CACAb,OAAOc,GACHC,EAAeD,GACf,MAAQrB,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAGuB,GAAOhK,MACxBuI,EAAG0B,EAAIzB,EAAG0B,EAAIzB,EAAG0B,GAAOP,EAC1BQ,EAAOpB,GAAIc,EAAKK,GAChBE,EAAOrB,GAAIiB,EAAKD,GAChBM,EAAOtB,GAAIe,EAAKI,GAChBI,EAAOvB,GAAIkB,EAAKF,GACtB,OAAOI,IAASC,GAAQC,IAASC,CACrC,CACAC,SACI,OAAO,IAAIlC,EAAcU,IAAKhJ,KAAKuI,GAAIvI,KAAKwI,EAAGxI,KAAKyI,EAAGO,IAAKhJ,KAAK0I,GACrE,CACA+B,SACI,MAAQlC,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAGuB,GAAOhK,MAC1B,EAAE2H,GAAMF,EACRiD,EAAI1B,GAAIc,EAAKA,GACba,EAAI3B,GAAIe,EAAKA,GACba,EAAI5B,GAAI1B,EAAM0B,GAAIgB,EAAKA,IACvBa,EAAI7B,GAAIrB,EAAI+C,GACZI,EAAOhB,EAAKC,EACZgB,EAAI/B,GAAIA,GAAI8B,EAAOA,GAAQJ,EAAIC,GAC/BK,EAAIH,EAAIF,EACRM,EAAID,EAAIJ,EACRM,EAAIL,EAAIF,EACRQ,EAAKnC,GAAI+B,EAAIE,GACbG,EAAKpC,GAAIgC,EAAIE,GACbG,EAAKrC,GAAI+B,EAAIG,GACbI,EAAKtC,GAAIiC,EAAID,GACnB,OAAO,IAAI1C,EAAc6C,EAAIC,EAAIE,EAAID,EACzC,CACAzH,IAAIgG,GACAC,EAAeD,GACf,MAAQrB,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAG6C,GAAOvL,MAC/BuI,EAAG0B,EAAIzB,EAAG0B,EAAIzB,EAAG0B,EAAIzB,EAAG8C,GAAO5B,EACjCc,EAAI1B,IAAKe,EAAKD,IAAOI,EAAKD,IAC1BU,EAAI3B,IAAKe,EAAKD,IAAOI,EAAKD,IAC1BgB,EAAIjC,GAAI2B,EAAID,GAClB,GAAIO,IAAM7D,EACN,OAAOpH,KAAKyK,SAChB,MAAMG,EAAI5B,GAAIgB,EAAK1C,EAAMkE,GACnBX,EAAI7B,GAAIuC,EAAKjE,EAAM6C,GACnBY,EAAIF,EAAID,EACRI,EAAIL,EAAID,EACRQ,EAAIL,EAAID,EACRO,EAAKnC,GAAI+B,EAAIE,GACbG,EAAKpC,GAAIgC,EAAIE,GACbG,EAAKrC,GAAI+B,EAAIG,GACbI,EAAKtC,GAAIiC,EAAID,GACnB,OAAO,IAAI1C,EAAc6C,EAAIC,EAAIE,EAAID,EACzC,CACAI,SAAS7B,GACL,OAAO5J,KAAK4D,IAAIgG,EAAMY,SAC1B,CACAkB,iBAAiBC,GACb,MAAMC,EAAU,EAAI,IAAMD,EACpB1C,EAAS,GACf,IAAIL,EAAI5I,KACJ6L,EAAOjD,EACX,IAAK,IAAIkD,EAAS,EAAGA,EAASF,EAASE,IAAU,CAC7CD,EAAOjD,EACPK,EAAOzQ,KAAKqT,GACZ,IAAK,IAAItT,EAAI,EAAGA,EAAI,IAAMoT,EAAI,GAAIpT,IAC9BsT,EAAOA,EAAKjI,IAAIgF,GAChBK,EAAOzQ,KAAKqT,GAEhBjD,EAAIiD,EAAKpB,QACb,CACA,OAAOxB,CACX,CACA8C,KAAKnO,EAAGoO,IACCA,GAAehM,KAAK8I,OAAOR,EAAc2D,QAC1CD,EAAcnD,EAAMoD,MACxB,MAAMN,EAAKK,GAAeA,EAAYE,cAAiB,EACvD,GAAI,IAAMP,EACN,MAAM,IAAIhX,MAAM,iEAEpB,IAAIwX,EAAcH,GAAeI,EAAiBhK,IAAI4J,GACjDG,IACDA,EAAcnM,KAAK0L,iBAAiBC,GAChCK,GAAqB,IAANL,IACfQ,EAAc7D,EAAc+D,WAAWF,GACvCC,EAAiBnL,IAAI+K,EAAaG,KAG1C,IAAIvD,EAAIN,EAAcS,KAClBuD,EAAIhE,EAAc2D,KACtB,MAAML,EAAU,EAAI,IAAMD,EACpBY,EAAa,IAAMZ,EAAI,GACvBa,EAAO9K,OAAO,GAAKiK,EAAI,GACvBc,EAAY,GAAKd,EACjBe,EAAUhL,OAAOiK,GACvB,IAAK,IAAIG,EAAS,EAAGA,EAASF,EAASE,IAAU,CAC7C,MAAMlY,EAASkY,EAASS,EACxB,IAAII,EAAQnZ,OAAOoK,EAAI4O,GACvB5O,IAAM8O,EACFC,EAAQJ,IACRI,GAASF,EACT7O,GAAKyJ,GAET,MAAMuF,EAAUhZ,EACViZ,EAAUjZ,EAASsB,KAAK4X,IAAIH,GAAS,EACrCI,EAAQjB,EAAS,IAAM,EACvBkB,EAAQL,EAAQ,EACR,IAAVA,EACAL,EAAIA,EAAE1I,IAAIqJ,EAAgBF,EAAOZ,EAAYS,KAG7ChE,EAAIA,EAAEhF,IAAIqJ,EAAgBD,EAAOb,EAAYU,IAErD,CACA,OAAOvE,EAAc+D,WAAW,CAACzD,EAAG0D,IAAI,EAC5C,CACAY,SAASC,EAAQnB,GACb,OAAOhM,KAAK+L,KAAKqB,GAAgBD,EAAQ1F,EAAM1F,GAAIiK,EACvD,CACAqB,eAAeF,GACX,IAAIvP,EAAIwP,GAAgBD,EAAQ1F,EAAM1F,GAAG,GACzC,MAAMiJ,EAAI1C,EAAc2D,KAClBqB,EAAKhF,EAAcS,KACzB,GAAInL,IAAMwJ,EACN,OAAOkG,EACX,GAAItN,KAAK8I,OAAOwE,IAAO1P,IAAMyJ,EACzB,OAAOrH,KACX,GAAIA,KAAK8I,OAAOkC,GACZ,OAAOhL,KAAK+L,KAAKnO,GACrB,IAAIgL,EAAI0E,EACJ1F,EAAI5H,KACR,KAAOpC,EAAIwJ,GACHxJ,EAAIyJ,IACJuB,EAAIA,EAAEhF,IAAIgE,IACdA,EAAIA,EAAE6C,SACN7M,IAAMyJ,EAEV,OAAOuB,CACX,CACA2E,eACI,OAAOvN,KAAKqN,eAAe5F,EAAM3F,GAAGgH,OAAOR,EAAcS,KAC7D,CACAyE,gBACI,IAAI5E,EAAI5I,KAAKqN,eAAe5F,EAAM1F,EAAIuF,GAAKmD,SAG3C,OAFIhD,EAAM1F,EAAIuF,IACVsB,EAAIA,EAAEhF,IAAI5D,OACP4I,EAAEE,OAAOR,EAAcS,KAClC,CACAU,SAASgE,GACL,MAAM,EAAElF,EAAC,EAAEC,EAAC,EAAEC,GAAMzI,KACd0N,EAAM1N,KAAK8I,OAAOR,EAAcS,MAC1B,MAAR0E,IACAA,EAAOC,EAAMnG,EAAM8B,GAAOZ,IAC9B,MAAMkF,EAAK3E,GAAIT,EAAIkF,GACbG,EAAK5E,GAAIR,EAAIiF,GACbI,EAAK7E,GAAIP,EAAIgF,GACnB,GAAIC,EACA,OAAO7E,EAAME,KACjB,GAAI8E,IAAOxG,EACP,MAAM,IAAI1S,MAAM,oBACpB,OAAO,IAAIkU,EAAM8E,EAAIC,EACzB,CACAE,qBACIC,GACJ,CACAC,mBACID,GACJ,CACAE,oBACIF,GACJ,EAIJ,SAASd,EAAgBiB,EAAWC,GAChC,MAAMC,EAAMD,EAAK3D,SACjB,OAAO0D,EAAYE,EAAMD,CAC7B,CACA,SAAStE,EAAeD,GACpB,KAAMA,aAAiBtB,GACnB,MAAM,IAAIzV,UAAU,yBAC5B,CACA,SAASwb,EAAezE,GACpB,KAAMA,aAAiB0E,GACnB,MAAM,IAAIzb,UAAU,0BAC5B,CACA,SAASkb,IACL,MAAM,IAAIpZ,MAAM,0CACpB,CAhBA2T,EAAc2D,KAAO,IAAI3D,EAAcb,EAAMK,GAAIL,EAAMM,GAAIV,EAAK2B,GAAIvB,EAAMK,GAAKL,EAAMM,KACrFO,EAAcS,KAAO,IAAIT,EAAclB,EAAKC,EAAKA,EAAKD,GAgBtD,MAAMkH,EACFjb,YAAYkb,GACRvO,KAAKuO,GAAKA,CACd,CACA5F,iCAAiC6F,GAC7B,MAAM,EAAE5G,GAAMH,EACRgH,EAAIzF,GAAIf,EAAUuG,EAAKA,GACvBE,EAAK1F,IAAKyF,EAAIpH,GAAOe,GAC3B,IAAIuG,EAAIjN,QAAQ,GAChB,MAAMmJ,EAAI7B,IAAK2F,EAAI/G,EAAI6G,GAAKzF,GAAIyF,EAAI7G,IACpC,IAAMgH,QAASC,EAAYjT,MAAOoH,GAAM8L,GAAQJ,EAAI7D,GAChDkE,EAAK/F,GAAIhG,EAAIwL,GACZQ,GAAaD,KACdA,EAAK/F,IAAK+F,IACTF,IACD7L,EAAI+L,GACHF,IACDF,EAAIF,GACR,MAAMQ,EAAKjG,GAAI2F,GAAKF,EAAIpH,GAAOgB,EAAiBwC,GAC1CqE,EAAKlM,EAAIA,EACTmM,EAAKnG,IAAKhG,EAAIA,GAAK6H,GACnBuE,EAAKpG,GAAIiG,EAAK/G,GACdmH,EAAKrG,GAAI3B,EAAM6H,GACfI,EAAKtG,GAAI3B,EAAM6H,GACrB,OAAO,IAAI5G,EAAcU,GAAImG,EAAKG,GAAKtG,GAAIqG,EAAKD,GAAKpG,GAAIoG,EAAKE,GAAKtG,GAAImG,EAAKE,GAChF,CACA1G,mBAAmB4G,GAEf,MAAMC,EAAKC,IADXF,EAAMG,GAAYH,EAAK,KACWxS,MAAM,EAAG,KACrC4S,EAAK3P,KAAK4P,0BAA0BJ,GACpCK,EAAKJ,GAAmBF,EAAIxS,MAAM,GAAI,KACtC+S,EAAK9P,KAAK4P,0BAA0BC,GAC1C,OAAO,IAAIvB,EAAeqB,EAAG/L,IAAIkM,GACrC,CACAnH,eAAe4G,GACXA,EAAMG,GAAYH,EAAK,IACvB,MAAM,EAAE5H,EAAC,EAAEC,GAAMH,EACXsI,EAAO,0EACP/M,EAAIyM,GAAmBF,GAC7B,IA8UR,SAAoBS,EAAIC,GACpB,GAAID,EAAG7c,SAAW8c,EAAG9c,OACjB,OAAO,EAEX,IAAK,IAAIoF,EAAI,EAAGA,EAAIyX,EAAG7c,OAAQoF,IAC3B,GAAIyX,EAAGzX,KAAO0X,EAAG1X,GACb,OAAO,EAGf,OAAO,CACX,CAxVa2X,CAAWC,GAAkBnN,GAAIuM,IAAQP,GAAahM,GACvD,MAAM,IAAIrO,MAAMob,GACpB,MAAMb,EAAKlG,GAAIhG,EAAIA,GACboN,EAAKpH,GAAI3B,EAAMM,EAAIuH,GACnBmB,EAAKrH,GAAI3B,EAAMM,EAAIuH,GACnBoB,EAAOtH,GAAIoH,EAAKA,GAChBG,EAAOvH,GAAIqH,EAAKA,GAChB1X,EAAIqQ,GAAIrB,EAAIC,EAAI0I,EAAOC,IACvB,QAAE3B,EAAShT,MAAO4U,GAAMC,GAAWzH,GAAIrQ,EAAI4X,IAC3CG,EAAK1H,GAAIwH,EAAIH,GACbM,EAAK3H,GAAIwH,EAAIE,EAAK/X,GACxB,IAAI4P,EAAIS,IAAKhG,EAAIA,GAAK0N,GAClB1B,GAAazG,KACbA,EAAIS,IAAKT,IACb,MAAMC,EAAIQ,GAAIoH,EAAKO,GACbjI,EAAIM,GAAIT,EAAIC,GAClB,IAAKoG,GAAWI,GAAatG,IAAMF,IAAMpB,EACrC,MAAM,IAAIzS,MAAMob,GACpB,OAAO,IAAIzB,EAAe,IAAIhG,EAAcC,EAAGC,EAAGnB,EAAKqB,GAC3D,CACAkI,aACI,IAAI,EAAErI,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,GAAM1I,KAAKuO,GAC1B,MAAM6B,EAAKpH,GAAIA,GAAIP,EAAID,GAAKQ,GAAIP,EAAID,IAC9B6H,EAAKrH,GAAIT,EAAIC,GACbqI,EAAO7H,GAAIqH,EAAKA,IACdzU,MAAOkV,GAAYL,GAAWzH,GAAIoH,EAAKS,IACzCE,EAAK/H,GAAI8H,EAAUV,GACnBY,EAAKhI,GAAI8H,EAAUT,GACnBY,EAAOjI,GAAI+H,EAAKC,EAAKtI,GAC3B,IAAImC,EACJ,GAAImE,GAAatG,EAAIuI,GAAO,CACxB,IAAIC,EAAKlI,GAAIR,EAAIP,GACbkJ,EAAKnI,GAAIT,EAAIN,GACjBM,EAAI2I,EACJ1I,EAAI2I,EACJtG,EAAI7B,GAAI+H,EAAK5I,EACjB,MAEI0C,EAAImG,EAEJhC,GAAazG,EAAI0I,KACjBzI,EAAIQ,IAAKR,IACb,IAAIxF,EAAIgG,IAAKP,EAAID,GAAKqC,GAGtB,OAFImE,GAAahM,KACbA,EAAIgG,IAAKhG,IACNmN,GAAkBnN,EAC7B,CACAoO,QACI,OAAOC,EAAWrR,KAAK4Q,aAC3B,CACA1T,WACI,OAAO8C,KAAKoR,OAChB,CACAtI,OAAOc,GACHyE,EAAezE,GACf,MAAMjC,EAAI3H,KAAKuO,GACT5b,EAAIiX,EAAM2E,GACV+C,EAAMtI,GAAIrB,EAAEY,EAAI5V,EAAE6V,KAAOQ,GAAIrB,EAAEa,EAAI7V,EAAE4V,GACrCgJ,EAAMvI,GAAIrB,EAAEa,EAAI7V,EAAE6V,KAAOQ,GAAIrB,EAAEY,EAAI5V,EAAE4V,GAC3C,OAAO+I,GAAOC,CAClB,CACA3N,IAAIgG,GAEA,OADAyE,EAAezE,GACR,IAAI0E,EAAetO,KAAKuO,GAAG3K,IAAIgG,EAAM2E,IAChD,CACA9C,SAAS7B,GAEL,OADAyE,EAAezE,GACR,IAAI0E,EAAetO,KAAKuO,GAAG9C,SAAS7B,EAAM2E,IACrD,CACArB,SAASC,GACL,OAAO,IAAImB,EAAetO,KAAKuO,GAAGrB,SAASC,GAC/C,CACAE,eAAeF,GACX,OAAO,IAAImB,EAAetO,KAAKuO,GAAGlB,eAAeF,GACrD,EAEJmB,EAAerC,KAAO,IAAIqC,EAAehG,EAAc2D,MACvDqC,EAAevF,KAAO,IAAIuF,EAAehG,EAAcS,MACvD,MAAMqD,EAAmB,IAAIoF,QAC7B,MAAM3I,EACFxV,YAAYkV,EAAGC,GACXxI,KAAKuI,EAAIA,EACTvI,KAAKwI,EAAIA,CACb,CACAiJ,eAAelF,GACXvM,KAAKkM,aAAeK,EACpBH,EAAiBsF,OAAO1R,KAC5B,CACA2I,eAAe4G,GAAoB,IAAfoC,IAAM7c,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,KAAAA,UAAA,GACtB,MAAM,EAAE8S,EAAC,EAAEC,GAAMJ,EAEXmK,GADNrC,EAAMG,GAAYH,EAAK,KACJxS,QACnB6U,EAAO,KAAgB,IAAVrC,EAAI,IACjB,MAAM/G,EAAIqJ,GAAgBD,GAC1B,GAAID,GAAUnJ,GAAKX,EACf,MAAM,IAAIlT,MAAM,wBACpB,IAAKgd,GAAUnJ,GAAKR,EAChB,MAAM,IAAIrT,MAAM,6BACpB,MAAMmd,EAAK9I,GAAIR,EAAIA,GACbuJ,EAAI/I,GAAI8I,EAAKzK,GACb1O,EAAIqQ,GAAIpB,EAAIkK,EAAKzK,GACvB,IAAI,QAAEuH,EAAShT,MAAO2M,GAAMuG,GAAQiD,EAAGpZ,GACvC,IAAKiW,EACD,MAAM,IAAIja,MAAM,uCACpB,MAAMqd,GAAUzJ,EAAIlB,KAASA,EAK7B,OAJ2C,KAAV,IAAVkI,EAAI,OACLyC,IAClBzJ,EAAIS,IAAKT,IAEN,IAAIM,EAAMN,EAAGC,EACxB,CACAG,4BAA4BsJ,GACxB,aAAcC,GAAqBD,IAAaE,KACpD,CACAvB,aACI,MAAM9S,EAAQqS,GAAkBnQ,KAAKwI,GAErC,OADA1K,EAAM,KAAOkC,KAAKuI,EAAIlB,EAAM,IAAO,EAC5BvJ,CACX,CACAsT,QACI,OAAOC,EAAWrR,KAAK4Q,aAC3B,CACAwB,WACI,MAAM,EAAE5J,GAAMxI,KAEd,OAAOmQ,GADGnH,IAAK3B,EAAMmB,GAAKa,GAAOhC,EAAMmB,IAE3C,CACAgF,gBACI,OAAOlF,EAAcqB,WAAW3J,MAAMwN,eAC1C,CACA1E,OAAOc,GACH,OAAO5J,KAAKuI,IAAMqB,EAAMrB,GAAKvI,KAAKwI,IAAMoB,EAAMpB,CAClD,CACAgC,SACI,OAAO,IAAI3B,EAAMG,IAAKhJ,KAAKuI,GAAIvI,KAAKwI,EACxC,CACA5E,IAAIgG,GACA,OAAOtB,EAAcqB,WAAW3J,MAAM4D,IAAI0E,EAAcqB,WAAWC,IAAQH,UAC/E,CACAgC,SAAS7B,GACL,OAAO5J,KAAK4D,IAAIgG,EAAMY,SAC1B,CACA0C,SAASC,GACL,OAAO7E,EAAcqB,WAAW3J,MAAMkN,SAASC,EAAQnN,MAAMyJ,UACjE,EAEJZ,EAAMoD,KAAO,IAAIpD,EAAMpB,EAAMK,GAAIL,EAAMM,IACvCc,EAAME,KAAO,IAAIF,EAAMzB,EAAKC,GAC5B,MAAMgL,EACFhf,YAAYob,EAAGzL,GACXhD,KAAKyO,EAAIA,EACTzO,KAAKgD,EAAIA,EACThD,KAAKsS,gBACT,CACA3J,eAAe4G,GACX,MAAMzR,EAAQ4R,GAAYH,EAAK,IACzBd,EAAI5F,EAAM0J,QAAQzU,EAAMf,MAAM,EAAG,KAAK,GACtCiG,EAAI6O,GAAgB/T,EAAMf,MAAM,GAAI,KAC1C,OAAO,IAAIsV,EAAU5D,EAAGzL,EAC5B,CACAsP,iBACI,MAAM,EAAE7D,EAAC,EAAEzL,GAAMhD,KACjB,KAAMyO,aAAa5F,GACf,MAAM,IAAIlU,MAAM,2BAEpB,OADAyY,GAAgBpK,EAAGyE,EAAM1F,GAAG,GACrB/B,IACX,CACA4Q,aACI,MAAM4B,EAAK,IAAI5f,WAAW,IAG1B,OAFA4f,EAAGvR,IAAIjB,KAAKyO,EAAEmC,cACd4B,EAAGvR,IAAIkP,GAAkBnQ,KAAKgD,GAAI,IAC3BwP,CACX,CACApB,QACI,OAAOC,EAAWrR,KAAK4Q,aAC3B,EAGJ,SAAS6B,IAAuB,QAAA1U,EAAAjJ,UAAA3B,OAARuf,EAAM,IAAA3Z,MAAAgF,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAANyU,EAAMzU,GAAAnJ,UAAAmJ,GAC1B,IAAKyU,EAAOC,OAAOhL,GAAMA,aAAa/U,aAClC,MAAM,IAAI+B,MAAM,4BACpB,GAAsB,IAAlB+d,EAAOvf,OACP,OAAOuf,EAAO,GAClB,MAAMvf,EAASuf,EAAOha,QAAO,CAACiP,EAAGxI,IAAQwI,EAAIxI,EAAIhM,QAAQ,GACnDyf,EAAS,IAAIhgB,WAAWO,GAC9B,IAAK,IAAIoF,EAAI,EAAGsa,EAAM,EAAGta,EAAIma,EAAOvf,OAAQoF,IAAK,CAC7C,MAAM4G,EAAMuT,EAAOna,GACnBqa,EAAO3R,IAAI9B,EAAK0T,GAChBA,GAAO1T,EAAIhM,MACf,CACA,OAAOyf,CACX,CACA,MAAME,EAAQ/Z,MAAM/F,KAAK,CAAEG,OAAQ,MAAO,CAACwF,EAAGJ,IAAMA,EAAE2E,SAAS,IAAIsC,SAAS,EAAG,OAC/E,SAAS6R,EAAW0B,GAChB,KAAMA,aAAkBngB,YACpB,MAAM,IAAI+B,MAAM,uBACpB,IAAI4a,EAAM,GACV,IAAK,IAAIhX,EAAI,EAAGA,EAAIwa,EAAO5f,OAAQoF,IAC/BgX,GAAOuD,EAAMC,EAAOxa,IAExB,OAAOgX,CACX,CACA,SAASyD,EAAWzD,GAChB,GAAmB,kBAARA,EACP,MAAM,IAAI1c,UAAU,2CAA6C0c,GAErE,GAAIA,EAAIpc,OAAS,EACb,MAAM,IAAIwB,MAAM,6CACpB,MAAMse,EAAQ,IAAIrgB,WAAW2c,EAAIpc,OAAS,GAC1C,IAAK,IAAIoF,EAAI,EAAGA,EAAI0a,EAAM9f,OAAQoF,IAAK,CACnC,MAAM2a,EAAQ,EAAJ3a,EACJ4a,EAAU5D,EAAIxS,MAAMmW,EAAGA,EAAI,GAC3BE,EAAO5f,OAAO6f,SAASF,EAAS,IACtC,GAAI3f,OAAO8f,MAAMF,IAASA,EAAO,EAC7B,MAAM,IAAIze,MAAM,yBACpBse,EAAM1a,GAAK6a,CACf,CACA,OAAOH,CACX,CACA,SAASM,GAAkBjK,GAGvB,OAAO0J,EADK1J,EAAIpM,SAAS,IAAIsC,SAASrM,GAAY,KAEtD,CACA,SAASgd,GAAkB7G,GACvB,OAAOiK,GAAkBjK,GAAKkK,SAClC,CACA,SAASxE,GAAa1F,GAClB,OAAQN,GAAIM,GAAOjC,KAASA,CAChC,CACA,SAASwK,GAAgBkB,GACrB,KAAMA,aAAkBngB,YACpB,MAAM,IAAI+B,MAAM,uBACpB,OAAO+M,OAAO,KAAO2P,EAAWze,WAAWI,KAAK+f,GAAQS,WAC5D,CACA,MAAMC,GAAW/R,OAAO,sEACxB,SAAS+N,GAAmB3R,GACxB,OAAOkL,GAAI6I,GAAgB/T,GAAS2V,GACxC,CACA,SAASzK,GAAIrB,GAAgB,IAAbhV,EAACmC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG2S,EAAMI,EACtB,MAAMxF,EAAMsF,EAAIhV,EAChB,OAAO0P,GAAO+E,EAAM/E,EAAM1P,EAAI0P,CAClC,CACA,SAASgH,GAAO1L,GAA0B,IAAlB+V,EAAM5e,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG2S,EAAMI,EACnC,GAAIlK,IAAWyJ,GAAOsM,GAAUtM,EAC5B,MAAM,IAAIzS,MAAO,6CAA4CgJ,SAAc+V,KAE/E,IAAI/L,EAAIqB,GAAIrL,EAAQ+V,GAChB/gB,EAAI+gB,EACJnL,EAAInB,EAAKoB,EAAInB,EAAK0K,EAAI1K,EAAK1O,EAAIyO,EACnC,KAAOO,IAAMP,GAAK,CACd,MAAMuM,EAAIhhB,EAAIgV,EACR8G,EAAI9b,EAAIgV,EACRiM,EAAIrL,EAAIwJ,EAAI4B,EACZ/V,EAAI4K,EAAI7P,EAAIgb,EAClBhhB,EAAIgV,EAAGA,EAAI8G,EAAGlG,EAAIwJ,EAAGvJ,EAAI7P,EAAGoZ,EAAI6B,EAAGjb,EAAIiF,CAC3C,CAEA,GADYjL,IACA0U,EACR,MAAM,IAAI1S,MAAM,0BACpB,OAAOqU,GAAIT,EAAGmL,EAClB,CAkBA,SAASG,GAAKtL,EAAGuL,GACb,MAAM,EAAEjM,GAAMJ,EACd,IAAIpF,EAAMkG,EACV,KAAOuL,KAAU1M,GACb/E,GAAOA,EACPA,GAAOwF,EAEX,OAAOxF,CACX,CACA,SAAS0R,GAAYxL,GACjB,MAAM,EAAEV,GAAMJ,EACRuM,EAAMtS,OAAO,GACbuS,EAAOvS,OAAO,IACdwS,EAAOxS,OAAO,IACdyS,EAAOzS,OAAO,IACd0S,EAAO1S,OAAO,IAEduO,EADM1H,EAAIA,EAAKV,EACJU,EAAKV,EAChBwM,EAAMR,GAAK5D,EAAI3I,GAAO2I,EAAMpI,EAC5ByM,EAAMT,GAAKQ,EAAIhN,GAAOkB,EAAKV,EAC3B0M,EAAOV,GAAKS,EAAIN,GAAOM,EAAMzM,EAC7B2M,EAAOX,GAAKU,EAAKN,GAAQM,EAAO1M,EAChC4M,EAAOZ,GAAKW,EAAKN,GAAQM,EAAO3M,EAChC6M,EAAOb,GAAKY,EAAKN,GAAQM,EAAO5M,EAChC8M,EAAQd,GAAKa,EAAKN,GAAQM,EAAO7M,EACjC+M,EAAQf,GAAKc,EAAMP,GAAQM,EAAO7M,EAClCgN,EAAQhB,GAAKe,EAAMX,GAAQM,EAAO1M,EAExC,MAAO,CAAEiN,UADUjB,GAAKgB,EAAMvN,GAAOiB,EAAKV,EACtBoI,KACxB,CACA,SAASnB,GAAQiD,EAAGpZ,GAChB,MAAMoc,EAAK/L,GAAIrQ,EAAIA,EAAIA,GACjBqc,EAAKhM,GAAI+L,EAAKA,EAAKpc,GAEzB,IAAI4P,EAAIS,GAAI+I,EAAIgD,EADJhB,GAAYhC,EAAIiD,GAAIF,WAEhC,MAAMG,EAAMjM,GAAIrQ,EAAI4P,EAAIA,GAClB2M,EAAQ3M,EACR4M,EAAQnM,GAAIT,EAAIN,GAChBmN,EAAWH,IAAQlD,EACnBsD,EAAWJ,IAAQjM,IAAK+I,GACxBuD,EAASL,IAAQjM,IAAK+I,EAAI9J,GAOhC,OANImN,IACA7M,EAAI2M,IACJG,GAAYC,KACZ/M,EAAI4M,GACJnG,GAAazG,KACbA,EAAIS,IAAKT,IACN,CAAEqG,QAASwG,GAAYC,EAAUzZ,MAAO2M,EACnD,CACA,SAASkI,GAAW9S,GAChB,OAAOmR,GAAQzH,EAAK1J,EACxB,CACA,SAAS4X,GAAOlX,GACZ,OAAO2K,GAAI6I,GAAgBxT,GAAOoJ,EAAM1F,EAC5C,CAYA,SAAS2N,GAAYH,EAAKiG,GACtB,MAAM1X,EAAQyR,aAAe3c,WAAaA,WAAWI,KAAKuc,GAAOyD,EAAWzD,GAC5E,GAA8B,kBAAnBiG,GAA+B1X,EAAM3K,SAAWqiB,EACvD,MAAM,IAAI7gB,MAAO,YAAW6gB,WAChC,OAAO1X,CACX,CACA,SAASsP,GAAgB9D,EAAKmM,GAAoB,IAAf9D,IAAM7c,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,KAAAA,UAAA,GACrC,IAAK2gB,EACD,MAAM,IAAI5iB,UAAU,qBAGxB,GAFmB,kBAARyW,GAAoB9V,OAAOqK,cAAcyL,KAChDA,EAAM5H,OAAO4H,IACE,kBAARA,GAAoBA,EAAMmM,EACjC,GAAI9D,GACA,GAAIvK,EAAMkC,EACN,OAAOA,OAGX,GAAIlC,GAAOkC,EACP,OAAOA,EAGnB,MAAM,IAAIzW,UAAU,0CACxB,CACA,SAAS6iB,GAAiB5X,GAItB,OAHAA,EAAM,IAAM,IACZA,EAAM,KAAO,IACbA,EAAM,KAAO,GACNA,CACX,CAIA,SAAS6X,GAAgBC,GAKrB,GAAmB,MAJnBA,EACmB,kBAARA,GAAmC,kBAARA,EAC5BrC,GAAkBnG,GAAgBwI,EAAK5N,IACvC0H,GAAYkG,IACdziB,OACJ,MAAM,IAAIwB,MAAO,qBACrB,OAAOihB,CACX,CACA,SAASC,GAAeC,GACpB,MAAMC,EAAOL,GAAiBI,EAAO/Y,MAAM,EAAG,KACxCiZ,EAASF,EAAO/Y,MAAM,GAAI,IAC1BoQ,EAASoI,GAAOQ,GAChB5D,EAAQtJ,EAAMoD,KAAKiB,SAASC,GAC5B8I,EAAa9D,EAAMvB,aACzB,MAAO,CAAEmF,OAAMC,SAAQ7I,SAAQgF,QAAO8D,aAC1C,CACA,IAAIC,GACJ,SAASC,KACL,GAA2B,oBAAhBD,GACP,MAAM,IAAIvhB,MAAM,oDACpB,OAAOuhB,MAAYphB,UACvB,CACAshB,eAAelE,GAAqB0D,GAChC,OAAOC,SAAqBQ,GAAMlP,OAAOwO,GAAgBC,IAC7D,CACA,SAASU,GAAyBV,GAC9B,OAAOC,GAAeM,GAAQR,GAAgBC,IAClD,CAyBA,SAASW,GAAoBC,EAAKnW,EAASoW,GACvCpW,EAAUqP,GAAYrP,GAChBoW,aAAqB5N,IACvB4N,EAAY5N,EAAM0J,QAAQkE,GAAW,IACzC,MAAM,EAAEhI,EAAC,EAAEzL,GAAMwT,aAAenE,EAAYmE,EAAIlE,iBAAmBD,EAAUE,QAAQiE,GAErF,MAAO,CAAE/H,IAAGzL,IAAG0T,GADJpO,EAAc2D,KAAKoB,eAAerK,GAC1B2T,IAAKF,EAAWG,IAAKvW,EAC5C,CACA,SAASwW,GAAmBJ,EAAWhI,EAAGiI,EAAIZ,GAC1C,MAAMgB,EAAIvB,GAAOO,GACXiB,EAAKzO,EAAcqB,WAAW8M,GAAWpJ,eAAeyJ,GAE9D,OADYxO,EAAcqB,WAAW8E,GAAG7K,IAAImT,GACjCtL,SAASiL,GAAIrJ,eAAe5F,EAAM3F,GAAGgH,OAAOR,EAAcS,KACzE,CAWO,MAAMiO,GAAO,CAChB9E,qBAAsBoE,GACtBW,aA/CJ,SAA0BhF,GACtB,OAAOqE,GAAyBrE,GAAYgE,UAChD,EA8CIiB,KApCJ,SAAkB7W,EAAS4R,GACvB5R,EAAUqP,GAAYrP,GACtB,MAAM,OAAE2V,EAAM,OAAE7I,EAAM,WAAE8I,GAAeK,GAAyBrE,GAC1DxD,EAAI8G,GAAOY,GAAQH,EAAQ3V,IAC3B8W,EAAItO,EAAMoD,KAAKiB,SAASuB,GAExBzL,EAAIgG,GAAIyF,EADJ8G,GAAOY,GAAQgB,EAAEvG,aAAcqF,EAAY5V,IAC/B8M,EAAQ1F,EAAM1F,GACpC,OAAO,IAAIsQ,EAAU8E,EAAGnU,GAAG4N,YAC/B,EA6BIwG,OATJ,SAAoBZ,EAAKnW,EAASoW,GAC9B,MAAM,EAAEhI,EAAC,GAAEiI,EAAE,IAAEE,EAAG,IAAED,GAAQJ,GAAoBC,EAAKnW,EAASoW,GACxDX,EAASK,GAAQ1H,EAAEmC,aAAc+F,EAAI/F,aAAcgG,GACzD,OAAOC,GAAmBF,EAAKlI,EAAGiI,EAAIZ,EAC1C,GAYAjN,EAAMoD,KAAKwF,eAAe,GA+DnB,MAcDvS,GAAS,CACXmY,KAAMC,EACNC,IAAqB,kBAATtY,MAAqB,WAAYA,KAAOA,KAAKC,YAASnK,GAEzDshB,GAAQ,CACjBhF,WAAU,EACV2B,WAAU,EACVP,YAAW,EACXP,wBACAlJ,OACAK,UACAmO,iBAAkB,CACd,mEACA,mEACA,mEACA,mEACA,mEACA,mEACA,mEACA,oEAEJC,oBAAsBpZ,IAElB,IADAA,EAAOqR,GAAYrR,IACVlL,OAAS,IAAMkL,EAAKlL,OAAS,KAClC,MAAM,IAAIwB,MAAM,yDACpB,OAAOqU,GAAI6I,GAAgBxT,GAAOoJ,EAAM1F,EAAIsF,GAAOA,CAAG,EAE1DqQ,YAAa,WAAsB,IAArBC,EAAW7iB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACxB,GAAIoK,GAAOqY,IACP,OAAOrY,GAAOqY,IAAIK,gBAAgB,IAAIhlB,WAAW+kB,IAEhD,GAAIzY,GAAOmY,KAAM,CAClB,MAAM,YAAEK,GAAgBxY,GAAOmY,KAC/B,OAAO,IAAIzkB,WAAW8kB,EAAYC,GAAa1kB,OACnD,CAEI,MAAM,IAAI0B,MAAM,oDAExB,EACAkjB,iBAAkBA,IACPxB,GAAMqB,YAAY,IAE7BvQ,OAAQiP,iBACJ,MAAM/V,EAAUoS,KAAY3d,WAC5B,GAAIoK,GAAOqY,IAAK,CACZ,MAAMtkB,QAAeiM,GAAOqY,IAAIO,OAAOvX,OAAO,UAAWF,EAAQpN,QACjE,OAAO,IAAIL,WAAWK,EAC1B,CACK,GAAIiM,GAAOmY,KACZ,OAAOzkB,WAAWI,KAAKkM,GAAOmY,KAAKU,WAAW,UAAUzX,OAAOD,GAASE,UAGxE,MAAM,IAAI5L,MAAM,+CAExB,EACAqjB,aAA+C,IAApCzL,EAAUzX,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGqd,EAAKrd,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG+T,EAAMoD,KACrC,MAAMgM,EAAS9F,EAAMrJ,OAAOD,EAAMoD,MAAQkG,EAAQ,IAAItJ,EAAMsJ,EAAM5J,EAAG4J,EAAM3J,GAG3E,OAFAyP,EAAOxG,eAAelF,GACtB0L,EAAO/K,SAAS5F,GACT2Q,CACX,EACAC,gBAAYnjB,GAEhBf,OAAOmkB,iBAAiB9B,GAAO,CAC3B6B,WAAY,CACRE,cAAc,EACdhW,IAAGA,IACQ8T,GAEXjV,IAAIoX,GACKnC,KACDA,GAAcmC,EACtB,uDCl3BR,MAEMC,GAAMA,CAAC3Q,EAAWhV,EAAWgc,IAAehH,EAAIhV,EAAMgV,EAAIgH,EAAMhc,EAAIgc,EAKpE4J,GAAW,IAAIhZ,YAAY,CAC/B,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UACpF,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UACpF,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,aAKhFiZ,GAAK,IAAIjZ,YAAY,CACzB,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,aAKhFkZ,GAAW,IAAIlZ,YAAY,IACjC,MAAMmZ,WAAejY,EAYnBpN,cACEuN,MAAM,GAAI,GAAI,GAAG,GAVnB,KAAA8J,EAAY,EAAR8N,GAAG,GACP,KAAA7N,EAAY,EAAR6N,GAAG,GACP,KAAA5N,EAAY,EAAR4N,GAAG,GACP,KAAA3N,EAAY,EAAR2N,GAAG,GACP,KAAAzN,EAAY,EAARyN,GAAG,GACP,KAAAvN,EAAY,EAARuN,GAAG,GACP,KAAAxN,EAAY,EAARwN,GAAG,GACP,KAAAtN,EAAY,EAARsN,GAAG,EAIP,CACUpW,MACR,MAAM,EAAEsI,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEE,EAAC,EAAEE,EAAC,EAAED,EAAC,EAAEE,GAAMlL,KACnC,MAAO,CAAC0K,EAAGC,EAAGC,EAAGC,EAAGE,EAAGE,EAAGD,EAAGE,EAC/B,CAEUjK,IACRyJ,EAAWC,EAAWC,EAAWC,EAAWE,EAAWE,EAAWD,EAAWE,GAE7ElL,KAAK0K,EAAQ,EAAJA,EACT1K,KAAK2K,EAAQ,EAAJA,EACT3K,KAAK4K,EAAQ,EAAJA,EACT5K,KAAK6K,EAAQ,EAAJA,EACT7K,KAAK+K,EAAQ,EAAJA,EACT/K,KAAKiL,EAAQ,EAAJA,EACTjL,KAAKgL,EAAQ,EAAJA,EACThL,KAAKkL,EAAQ,EAAJA,CACX,CACU/J,QAAQL,EAAgBlN,GAEhC,IAAK,IAAI2E,EAAI,EAAGA,EAAI,GAAIA,IAAK3E,GAAU,EAAG6kB,GAASlgB,GAAKuI,EAAK2E,UAAU7R,GAAQ,GAC/E,IAAK,IAAI2E,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC5B,MAAMogB,EAAMF,GAASlgB,EAAI,IACnB8W,EAAKoJ,GAASlgB,EAAI,GAClBqgB,EAAKtZ,EAAKqZ,EAAK,GAAKrZ,EAAKqZ,EAAK,IAAOA,IAAQ,EAC7CE,EAAKvZ,EAAK+P,EAAI,IAAM/P,EAAK+P,EAAI,IAAOA,IAAO,GACjDoJ,GAASlgB,GAAMsgB,EAAKJ,GAASlgB,EAAI,GAAKqgB,EAAKH,GAASlgB,EAAI,IAAO,EAGjE,IAAI,EAAEmS,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEE,EAAC,EAAEE,EAAC,EAAED,EAAC,EAAEE,GAAMlL,KACjC,IAAK,IAAIzH,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MACMgT,EAAML,GADG5L,EAAKyL,EAAG,GAAKzL,EAAKyL,EAAG,IAAMzL,EAAKyL,EAAG,OAxE3CpD,EAyEsBoD,GAAGE,GAzEuBtD,EAyEpBqD,GAAKuN,GAAShgB,GAAKkgB,GAASlgB,GAAM,EAE/DiT,GADSlM,EAAKoL,EAAG,GAAKpL,EAAKoL,EAAG,IAAMpL,EAAKoL,EAAG,KAC7B4N,GAAI5N,EAAGC,EAAGC,GAAM,EACrCM,EAAIF,EACJA,EAAIC,EACJA,EAAIF,EACJA,EAAKF,EAAIU,EAAM,EACfV,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAKa,EAAKC,EAAM,EAnFVsN,IAACnR,EAsFT+C,EAAKA,EAAI1K,KAAK0K,EAAK,EACnBC,EAAKA,EAAI3K,KAAK2K,EAAK,EACnBC,EAAKA,EAAI5K,KAAK4K,EAAK,EACnBC,EAAKA,EAAI7K,KAAK6K,EAAK,EACnBE,EAAKA,EAAI/K,KAAK+K,EAAK,EACnBE,EAAKA,EAAIjL,KAAKiL,EAAK,EACnBD,EAAKA,EAAIhL,KAAKgL,EAAK,EACnBE,EAAKA,EAAIlL,KAAKkL,EAAK,EACnBlL,KAAKiB,IAAIyJ,EAAGC,EAAGC,EAAGC,EAAGE,EAAGE,EAAGD,EAAGE,EAChC,CACU7J,aACRoX,GAASlX,KAAK,EAChB,CACAe,UACEtC,KAAKiB,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BjB,KAAK/M,OAAOsO,KAAK,EACnB,EAGF,MAAMwX,WAAeL,GASnBrlB,cACEuN,QATF,KAAA8J,GAAI,WACJ,KAAAC,EAAI,UACJ,KAAAC,EAAI,UACJ,KAAAC,GAAI,UACJ,KAAAE,GAAI,QACJ,KAAAE,EAAI,WACJ,KAAAD,EAAI,WACJ,KAAAE,GAAI,WAGFlL,KAAK1B,UAAY,EACnB,EAOK,MAAM0a,GAAS9Y,GAAgB,IAAM,IAAIwY,KAC1BxY,GAAgB,IAAM,IAAI6Y,mDC1GnCE,WAAoBpmB,UAU/BQ,YAAY6lB,EAAkBC,GAC5B,IAAIlB,EACJ,MAAM,QAAE5X,KAAY+Y,GAASF,GACvB,KAAEG,GAASH,EAGjBtY,MADkB,IAAhByY,EAAKlmB,OAAekN,EAApB,YAA0CgZ,EAAKC,KAAK,KAApD,OAA+DjZ,GAEjErM,OAAOG,OAAO6L,KAAMoZ,GACpBpZ,KAAKzL,KAAOyL,KAAK3M,YAAYkB,KAC7ByL,KAAKmZ,SAAW,WACd,cAAAI,EAAQtB,GAARsB,EAAQtB,EAAW,CAACiB,KAAYC,IAAhC,CAEH,WC9BaK,GAASjR,GACvB,MAAoB,kBAANA,GAAuB,MAALA,CACjC,UAmBekR,GAAM7d,GACpB,MAAwB,kBAAVA,EAAqB8d,KAAKC,UAAU/d,GAA3C,GAAuDA,CAC/D,UAgBege,GACdhH,EACAiH,EACAC,EACAle,GAEA,IAAe,IAAXgX,EACF,QACoB,IAAXA,EACTA,EAAS,CAAC,EACiB,kBAAXA,IAChBA,EAAS,CAAEvS,QAASuS,IAGtB,MAAM,KAAEyG,EAAF,OAAQU,GAAWF,GACnB,KAAEG,GAASF,GACX,WACJG,EADI,QAEJ5Z,EAAU,6BAA8B2Z,EAAjC,KACLC,EAAa,qBAAsBA,EAAzB,IAA0C,IAD/C,oBAEcR,GAAM7d,GAFpB,KAGLgX,EAEJ,MAAO,CACLhX,QACAoe,OACAC,aACArE,IAAKyD,EAAKA,EAAKlmB,OAAS,GACxBkmB,OACAU,YACGnH,EACHvS,UAEH,UAMgB6Z,GACftH,EACAiH,EACAC,EACAle,GA1FF,IAAuB2M,EACdiR,GADcjR,EA4FLqK,IA3FoC,oBAAvBrK,EAAE4R,OAAOC,YA4FpCxH,EAAS,CAACA,IAGZ,IAAK,MAAMnE,KAAKmE,EAAQ,CACtB,MAAMsG,EAAUU,GAAUnL,EAAGoL,EAASC,EAAQle,GAE1Csd,UACIA,EAET,CACF,UAOgBmB,GACfze,EACAke,GAAA,IACAQ,EAAAxlB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAKI,CAAC,EAAD,mBAEJ,MAAM,KAAEukB,EAAO,GAAT,OAAaU,EAAS,CAACne,GAAvB,OAA+B2e,GAAS,EAAxC,KAA+C/N,GAAO,GAAU8N,EAChEE,EAAe,CAAEnB,OAAMU,UAE7B,GAAIQ,IACF3e,EAAQke,EAAOW,QAAQ7e,EAAO4e,GAG5BhO,GACgB,SAAhBsN,EAAOE,MACPR,GAASM,EAAOY,SAChBlB,GAAS5d,KACR7C,MAAMC,QAAQ4C,IAEf,IAAK,MAAMga,KAAOha,OACW7G,IAAvB+kB,EAAOY,OAAO9E,WACTha,EAAMga,GAMrB,IAAI+E,GAAQ,EAEZ,IAAK,MAAMzB,KAAWY,EAAOc,UAAUhf,EAAO4e,GAC5CG,GAAQ,OACF,CAACzB,OAASnkB,GAGlB,IAAK,IAAK+hB,EAAGne,EAAGqK,KAAM8W,EAAOe,QAAQjf,EAAO4e,GAAM,CAChD,MAAMM,EAAKT,GAAI1hB,EAAGqK,EAAa,CAC7BqW,UAAYtkB,IAAN+hB,EAAkBuC,EAAO,IAAIA,EAAMvC,GACzCiD,YAAchlB,IAAN+hB,EAAkBiD,EAAS,IAAIA,EAAQphB,GAC/C4hB,SACA/N,SAGF,IAAK,MAAM9D,KAAKoS,EACVpS,EAAE,IACJiS,GAAQ,OACF,CAACjS,EAAE,QAAI3T,IACJwlB,IACT5hB,EAAI+P,EAAE,QAEI3T,IAAN+hB,EACFlb,EAAQjD,EACCiD,aAAiBmf,IAC1Bnf,EAAMqF,IAAI6V,EAAGne,GACJiD,aAAiBof,IAC1Bpf,EAAMgI,IAAIjL,GACD6gB,GAAS5d,KAClBA,EAAMkb,GAAKne,GAIlB,CAED,GAAIgiB,EACF,IAAK,MAAMzB,KAAWY,EAAOmB,QAAQrf,EAAY4e,GAC/CG,GAAQ,OACF,CAACzB,OAASnkB,GAIhB4lB,SACI,MAAC5lB,EAAW6G,GAErB,CApEK,EAoEL,OCxLYsf,GAYX7nB,YAAY8nB,GAQV,MAAM,KACJnB,EADI,OAEJU,EAFI,UAGJE,EAHI,QAIJK,EAJI,QAKJR,EAAW7e,IAAmBA,GAL1B,QAMJif,EAAU,eACRM,EAEJnb,KAAKga,KAAOA,EACZha,KAAK0a,OAASA,EACd1a,KAAK6a,QAAUA,EACf7a,KAAKya,QAAUA,EAGbza,KAAK4a,UADHA,EACe,CAAChf,EAAOie,IAEhBK,GADQU,EAAUhf,EAAOie,GACNA,EAAS7Z,KAAMpE,GAG1B,IAAM,GAIvBoE,KAAKib,QADHA,EACa,CAACrf,EAAOie,IAEdK,GADQe,EAAQrf,EAAOie,GACJA,EAAS7Z,KAAMpE,GAG5B,IAAM,EAExB,CAMDuC,OAAOvC,GACL,gBAoDFA,EACAke,GAEA,MAAMlH,EAASwI,GAASxf,EAAOke,GAE/B,GAAIlH,EAAO,GACT,MAAMA,EAAO,EAEhB,CA5DUzU,CAAOvC,EAAOoE,KACtB,CAMD/L,OAAO2H,GACL,OAAO3H,GAAO2H,EAAOoE,KACtB,CAMDqb,GAAGzf,GACD,OAAOyf,GAAGzf,EAAOoE,KAClB,CAODwM,KAAK5Q,GACH,gBAuDuBA,EAAgBke,GACzC,MAAMlH,EAASwI,GAASxf,EAAOke,EAAQ,CAAES,QAAQ,EAAM/N,MAAM,IAE7D,GAAIoG,EAAO,GACT,MAAMA,EAAO,GAEb,OAAOA,EAAO,EAEjB,CA/DUpG,CAAK5Q,EAAOoE,KACpB,CAWDob,SACExf,GAKA,OAAOwf,GAASxf,EAAOoE,KAJvBlL,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAEI,CAAC,EAGN,WAsBab,GAAa2H,EAAgBke,GAC3C,MAAMlH,EAASwI,GAASxf,EAAOke,EAAQ,CAAES,QAAQ,IAEjD,GAAI3H,EAAO,GACT,MAAMA,EAAO,GAEb,OAAOA,EAAO,EAEjB,UAoBeyI,GAASzf,EAAgBke,GAEvC,OADesB,GAASxf,EAAOke,GAChB,EAChB,UAOesB,GACdxf,EACAke,GAMA,MAAMwB,EAASjB,GAAIze,EAAOke,EAL1BhlB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAGI,CAAC,GAGCymB,WDvIyBC,GAC/B,MAAM,KAAEC,EAAF,MAAQ7f,GAAU4f,EAAME,OAC9B,OAAOD,OAAO1mB,EAAY6G,CAC3B,CCoIe+f,CAAcL,GAE5B,GAAIC,EAAM,GAAI,CASZ,MAAO,CARO,IAAItC,GAAYsC,EAAM,IAAI,YACtC,IAAK,MAAM7S,KAAK4S,EACV5S,EAAE,WACEA,EAAE,GAGb,SAEc3T,EAChB,CAEC,MAAO,MAACA,EADEwmB,EAAM,GAGnB,UCpIeK,GAAUrnB,EAAcqmB,GACtC,OAAO,IAAIM,GAAO,CAAElB,KAAMzlB,EAAMmmB,OAAQ,KAAME,aAC/C,UCrCe3H,GAA6B4I,GAC3C,OAAO,IAAIX,GAAO,CAChBlB,KAAM,QACNU,OAAQmB,EACR,SAASjgB,GACP,GAAIigB,GAAW9iB,MAAMC,QAAQ4C,GAC3B,IAAK,MAAOrD,EAAGI,KAAMiD,EAAMif,eACnB,CAACtiB,EAAGI,EAAGkjB,EAGlB,EACDpB,QAAQ7e,GACC7C,MAAMC,QAAQ4C,GAASA,EAAMmB,QAAUnB,EAEhDgf,UAAUhf,GAEN7C,MAAMC,QAAQ4C,IAAd,0CAC0C6d,GAAM7d,IAIvD,UAMekgB,KACd,OAAOF,GAAO,WAAYhgB,GACA,mBAAVA,GAEjB,UAoEe6C,GACdsd,GAEA,OAAOH,GAAO,YAAahgB,GAEvBA,aAAiBmgB,GAAjB,eACgBA,EAAMxnB,KADtB,6BACwDklB,GAAM7d,IAGnE,UAqGeogB,GAAWC,GACzB,MAAMC,EAAczC,GAAMwC,GACpBvT,SAAWuT,EACjB,OAAO,IAAIf,GAAO,CAChBlB,KAAM,UACNU,OACQ,WAANhS,GAAwB,WAANA,GAAwB,YAANA,EAAkBuT,EAAW,KACnErB,UAAUhf,GAENA,IAAUqgB,GAAV,yBAC0BC,EAD1B,oBAC0DzC,GAAM7d,IAIvE,UAwCeugB,KACd,OAAOP,GAAO,SAAS,KAAM,GAC9B,UAMeQ,GAAetC,GAC7B,OAAO,IAAIoB,GAAO,IACbpB,EACHc,UAAWA,CAAChf,EAAO4e,IAAkB,OAAV5e,GAAkBke,EAAOc,UAAUhf,EAAO4e,GACrES,QAASA,CAACrf,EAAO4e,IAAkB,OAAV5e,GAAkBke,EAAOmB,QAAQrf,EAAO4e,IAEpE,UAMe7c,KACd,OAAOie,GAAO,UAAWhgB,GAEH,kBAAVA,IAAuB0X,MAAM1X,IAArC,oCACoC6d,GAAM7d,IAG/C,UAgDeygB,GAAevC,GAC7B,OAAO,IAAIoB,GAAO,IACbpB,EACHc,UAAWA,CAAChf,EAAO4e,SACPzlB,IAAV6G,GAAuBke,EAAOc,UAAUhf,EAAO4e,GACjDS,QAASA,CAACrf,EAAO4e,SAAkBzlB,IAAV6G,GAAuBke,EAAOmB,QAAQrf,EAAO4e,IAEzE,UASe8B,GACdC,EACAC,GAEA,OAAO,IAAItB,GAAO,CAChBlB,KAAM,SACNU,OAAQ,KACR,SAAS9e,GACP,GAAI4d,GAAS5d,GACX,IAAK,MAAMkb,KAAKlb,EAAO,CACrB,MAAMjD,EAAIiD,EAAMkb,QACV,CAACA,EAAGA,EAAGyF,QACP,CAACzF,EAAGne,EAAG6jB,EACd,CAEJ,EACD5B,UAAUhf,GAEN4d,GAAS5d,IAAT,qCAAwD6d,GAAM7d,IAIrE,UAiDe6gB,KACd,OAAOb,GAAO,UAAWhgB,GAEJ,kBAAVA,GAAP,oCACoC6d,GAAM7d,IAG/C,UAsDe2f,GAAMmB,GACpB,MAAMC,EAAQR,KAEd,OAAO,IAAIjB,GAAO,CAChBlB,KAAM,QACNU,OAAQ,KACR,SAAS9e,GACP,GAAI7C,MAAMC,QAAQ4C,GAAQ,CACxB,MAAMzI,EAAS+B,KAAKugB,IAAIiH,EAASvpB,OAAQyI,EAAMzI,QAE/C,IAAK,IAAIoF,EAAI,EAAGA,EAAIpF,EAAQoF,SACpB,CAACA,EAAGqD,EAAMrD,GAAImkB,EAASnkB,IAAMokB,EAEtC,CACF,EACD/B,UAAUhf,GAEN7C,MAAMC,QAAQ4C,IAAd,oCACoC6d,GAAM7d,IAIjD,UASeoe,GACdU,GAEA,MAAMkC,EAAO5oB,OAAO4oB,KAAKlC,GACzB,OAAO,IAAIQ,GAAO,CAChBlB,KAAM,OACNU,SACA,SAAS9e,GACP,GAAI4d,GAAS5d,GACX,IAAK,MAAMkb,KAAK8F,OACR,CAAC9F,EAAGlb,EAAMkb,GAAI4D,EAAO5D,GAGhC,EACD8D,UAAUhf,GAEN4d,GAAS5d,IAAT,qCAAwD6d,GAAM7d,IAIrE,UAwDeL,GAAMshB,GACpB,MAAMX,EAAcW,EAAQ9X,KAAK/B,GAAMA,EAAEgX,OAAMV,KAAK,OACpD,OAAO,IAAI4B,GAAO,CAChBlB,KAAM,QACNU,OAAQ,KACRE,UAAUhf,EAAO4e,GACf,MAAMrB,EAAW,GAEjB,IAAK,MAAM2D,KAAKD,EAAS,CACvB,SAAUvB,GAAUjB,GAAIze,EAAOkhB,EAAGtC,IAC3BuC,GAASzB,EAEhB,IAAKyB,EAAM,GACT,MAAO,GAEP,IAAK,MAAO7D,KAAYoC,EAClBpC,GACFC,EAAS3gB,KAAK0gB,EAIrB,CAED,MAAO,CAAC,6CACwCgD,EADzC,oBACyEzC,GAC5E7d,MAECud,EAEN,GAEJ,UAMe6D,KACd,OAAOpB,GAAO,WAAW,KAAM,GAChC,UCtoBerB,GACdT,EACA5L,EACAuM,GAEA,OAAO,IAAIS,GAAO,IACbpB,EACHW,QAASA,CAAC7e,EAAO4e,IACRa,GAAGzf,EAAOsS,GACb4L,EAAOW,QAAQA,EAAQ7e,EAAO4e,GAAMA,GACpCV,EAAOW,QAAQ7e,EAAO4e,IAG/B,oDCfD,MAAOyC,GAASC,GAAWC,IAA8C,CAAC,GAAI,GAAI,IAC5E/V,GAAM1F,OAAO,GACb2F,GAAM3F,OAAO,GACb4F,GAAM5F,OAAO,GACb0b,GAAM1b,OAAO,GACb2b,GAAQ3b,OAAO,KACf4b,GAAS5b,OAAO,KACtB,IAAK,IAAI6b,GAAQ,EAAGpG,GAAI9P,GAAKkB,GAAI,EAAGC,GAAI,EAAG+U,GAAQ,GAAIA,KAAS,EAE7DhV,GAAGC,IAAK,CAACA,IAAI,EAAID,GAAI,EAAIC,IAAK,GAC/ByU,GAAQzkB,KAAK,GAAK,EAAIgQ,GAAID,KAE1B2U,GAAU1kB,MAAQ+kB,GAAQ,IAAMA,GAAQ,GAAM,EAAK,IAEnD,IAAI7U,EAAItB,GACR,IAAK,IAAI8L,EAAI,EAAGA,EAAI,EAAGA,IACrBiE,IAAMA,IAAK9P,IAAS8P,IAAKiG,IAAOE,IAAWD,GACvClG,GAAI7P,KAAKoB,GAAKrB,KAASA,IAAO3F,OAAOwR,IAAM7L,IAEjD8V,GAAW3kB,KAAKkQ,GAElB,MAAO8U,GAAaC,IAAe3Y,EAAAA,MAAUqY,IAAY,GAGnDO,GAAQA,CAAC5b,EAAWC,EAAWiB,IACnCA,EAAI,GAAK8B,EAAAA,OAAWhD,EAAGC,EAAGiB,GAAK8B,EAAAA,OAAWhD,EAAGC,EAAGiB,GAC5C2a,GAAQA,CAAC7b,EAAWC,EAAWiB,IACnCA,EAAI,GAAK8B,EAAAA,OAAWhD,EAAGC,EAAGiB,GAAK8B,EAAAA,OAAWhD,EAAGC,EAAGiB,GA8C5C,MAAO4a,WAAe9d,EAQ1BzM,YACSkL,EACAsf,EACAvf,GAEsB,IADnBwf,EAAAhpB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACAipB,EAAAjpB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAiB,GAM3B,GAJA8L,QANO,KAAArC,SAAAA,EACA,KAAAsf,OAAAA,EACA,KAAAvf,UAAAA,EACG,KAAAwf,UAAAA,EACA,KAAAC,OAAAA,EAXF,KAAAld,IAAM,EACN,KAAAmd,OAAS,EACT,KAAApf,UAAW,EAEX,KAAAD,WAAY,EAWpBR,EAAAA,OAAcG,GAEV,GAAK0B,KAAKzB,UAAYyB,KAAKzB,UAAY,IACzC,MAAM,IAAI5J,MAAM,4Cb9FFwK,Ma+FhBa,KAAKmC,MAAQ,IAAIvP,WAAW,KAC5BoN,KAAKie,SbhGW9e,EagGGa,KAAKmC,Mb/F1B,IAAI5C,YAAYJ,EAAIlM,OAAQkM,EAAIjM,WAAYgC,KAAKC,MAAMgK,EAAIE,WAAa,IagGxE,CACU6e,UAnEN,SAAkBlb,GAAmC,IAAnB+a,EAAAjpB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAiB,GACvD,MAAM6V,EAAI,IAAIpL,YAAY,IAE1B,IAAK,IAAIge,EAAQ,GAAKQ,EAAQR,EAAQ,GAAIA,IAAS,CAEjD,IAAK,IAAIhV,EAAI,EAAGA,EAAI,GAAIA,IAAKoC,EAAEpC,GAAKvF,EAAEuF,GAAKvF,EAAEuF,EAAI,IAAMvF,EAAEuF,EAAI,IAAMvF,EAAEuF,EAAI,IAAMvF,EAAEuF,EAAI,IACrF,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,MAAM4V,GAAQ5V,EAAI,GAAK,GACjB6V,GAAQ7V,EAAI,GAAK,GACjB8V,EAAK1T,EAAEyT,GACPE,EAAK3T,EAAEyT,EAAO,GACdG,EAAKb,GAAMW,EAAIC,EAAI,GAAK3T,EAAEwT,GAC1BK,EAAKb,GAAMU,EAAIC,EAAI,GAAK3T,EAAEwT,EAAO,GACvC,IAAK,IAAI3V,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAC3BxF,EAAEuF,EAAIC,IAAM+V,EACZvb,EAAEuF,EAAIC,EAAI,IAAMgW,EAIpB,IAAIC,EAAOzb,EAAE,GACT0b,EAAO1b,EAAE,GACb,IAAK,IAAI0F,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMhP,EAAQwjB,GAAUxU,GAClB6V,EAAKb,GAAMe,EAAMC,EAAMhlB,GACvB8kB,EAAKb,GAAMc,EAAMC,EAAMhlB,GACvBilB,EAAK1B,GAAQvU,GACnB+V,EAAOzb,EAAE2b,GACTD,EAAO1b,EAAE2b,EAAK,GACd3b,EAAE2b,GAAMJ,EACRvb,EAAE2b,EAAK,GAAKH,EAGd,IAAK,IAAIhW,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAAI,CAC/B,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IAAKoC,EAAEpC,GAAKvF,EAAEwF,EAAID,GAC1C,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAAKvF,EAAEwF,EAAID,KAAOoC,GAAGpC,EAAI,GAAK,IAAMoC,GAAGpC,EAAI,GAAK,IAG1EvF,EAAE,IAAMwa,GAAYD,GACpBva,EAAE,IAAMya,GAAYF,GAEtB5S,EAAEpJ,KAAK,EACT,CA2BIqd,CAAQ5e,KAAKie,QAASje,KAAK+d,QAC3B/d,KAAKge,OAAS,EACdhe,KAAKa,IAAM,CACb,CACAP,OAAOZ,GACLvB,EAAAA,OAAc6B,MACd,MAAM,SAAEzB,EAAQ,MAAE4D,GAAUnC,KAEtBe,GADNrB,EAAOD,EAAQC,IACEvM,OACjB,IAAK,IAAI0N,EAAM,EAAGA,EAAME,GAAO,CAC7B,MAAMC,EAAO9L,KAAK6J,IAAIR,EAAWyB,KAAKa,IAAKE,EAAMF,GACjD,IAAK,IAAItI,EAAI,EAAGA,EAAIyI,EAAMzI,IAAK4J,EAAMnC,KAAKa,QAAUnB,EAAKmB,KACrDb,KAAKa,MAAQtC,GAAUyB,KAAKke,SAElC,OAAOle,IACT,CACU6e,SACR,GAAI7e,KAAKpB,SAAU,OACnBoB,KAAKpB,UAAW,EAChB,MAAM,MAAEuD,EAAK,OAAE0b,EAAM,IAAEhd,EAAG,SAAEtC,GAAayB,KAEzCmC,EAAMtB,IAAQgd,EACU,KAAV,IAATA,IAAwBhd,IAAQtC,EAAW,GAAGyB,KAAKke,SACxD/b,EAAM5D,EAAW,IAAM,IACvByB,KAAKke,QACP,CACUY,UAAUhgB,GAClBX,EAAAA,OAAc6B,MAAM,GACpB7B,EAAAA,MAAaW,GACbkB,KAAK6e,SACL,MAAME,EAAY/e,KAAKmC,OACjB,SAAE5D,GAAayB,KACrB,IAAK,IAAIa,EAAM,EAAGE,EAAMjC,EAAI3L,OAAQ0N,EAAME,GAAO,CAC3Cf,KAAKge,QAAUzf,GAAUyB,KAAKke,SAClC,MAAMld,EAAO9L,KAAK6J,IAAIR,EAAWyB,KAAKge,OAAQjd,EAAMF,GACpD/B,EAAImC,IAAI8d,EAAU7d,SAASlB,KAAKge,OAAQhe,KAAKge,OAAShd,GAAOH,GAC7Db,KAAKge,QAAUhd,EACfH,GAAOG,EAET,OAAOlC,CACT,CACAkgB,QAAQlgB,GAEN,IAAKkB,KAAK8d,UAAW,MAAM,IAAInpB,MAAM,yCACrC,OAAOqL,KAAK8e,UAAUhgB,EACxB,CACAmgB,IAAInhB,GAEF,OADAK,EAAAA,OAAcL,GACPkC,KAAKgf,QAAQ,IAAIpsB,WAAWkL,GACrC,CACAwD,WAAWxC,GAET,GADAX,EAAAA,OAAcW,EAAKkB,MACfA,KAAKpB,SAAU,MAAM,IAAIjK,MAAM,+BAGnC,OAFAqL,KAAK8e,UAAUhgB,GACfkB,KAAKsC,UACExD,CACT,CACAyB,SACE,OAAOP,KAAKsB,WAAW,IAAI1O,WAAWoN,KAAK1B,WAC7C,CACAgE,UACEtC,KAAKrB,WAAY,EACjBqB,KAAKmC,MAAMZ,KAAK,EAClB,CACAtB,WAAWsC,GACT,MAAM,SAAEhE,EAAQ,OAAEsf,EAAM,UAAEvf,EAAS,OAAEyf,EAAM,UAAED,GAAc9d,KAY3D,OAXAuC,IAAAA,EAAO,IAAIqb,GAAOrf,EAAUsf,EAAQvf,EAAWwf,EAAWC,IAC1Dxb,EAAG0b,QAAQhd,IAAIjB,KAAKie,SACpB1b,EAAG1B,IAAMb,KAAKa,IACd0B,EAAGyb,OAAShe,KAAKge,OACjBzb,EAAG3D,SAAWoB,KAAKpB,SACnB2D,EAAGwb,OAASA,EAEZxb,EAAGsb,OAASA,EACZtb,EAAGjE,UAAYA,EACfiE,EAAGub,UAAYA,EACfvb,EAAG5D,UAAYqB,KAAKrB,UACb4D,CACT,EAGF,MAAM2c,GAAMA,CAACrB,EAAgBtf,EAAkBD,IAC7C4B,GAAgB,IAAM,IAAI0d,GAAOrf,EAAUsf,EAAQvf,KAexC6gB,IAbWD,GAAI,EAAM,IAAK,IAKfA,GAAI,EAAM,IAAK,IACfA,GAAI,EAAM,IAAK,IACfA,GAAI,EAAM,GAAI,IACZA,GAAI,EAAM,IAAK,IAKfA,GAAI,EAAM,IAAK,KAMnCE,IALoBF,GAAI,EAAM,IAAK,IACfA,GAAI,EAAM,GAAI,IAIvBE,CAACvB,EAAgBtf,EAAkBD,IbzC9C,SACJ+gB,GAEA,MAAMjf,EAAQA,CAACwW,EAAY0I,IAAyBD,EAASC,GAAMhf,OAAOb,EAAQmX,IAAMrW,SAClFC,EAAM6e,EAAS,CAAC,GAItB,OAHAjf,EAAM9B,UAAYkC,EAAIlC,UACtB8B,EAAM7B,SAAWiC,EAAIjC,SACrB6B,EAAMnM,OAAUqrB,GAAYD,EAASC,GAC9Blf,CACT,CaiCEmf,EACE,eAACD,EAAAxqB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAkB,CAAC,EAAC,OACnB,IAAI8oB,GAAOrf,EAAUsf,OAAuB9oB,IAAfuqB,EAAKE,MAAsBlhB,EAAYghB,EAAKE,OAAO,EAAK,KAGnEJ,GAAS,GAAM,IAAK,IACpBA,GAAS,GAAM,IAAK,IC1N5C,MAAMK,WAAgC3f,EAQpCzM,YAAYgL,EAAaJ,GACvB2C,QAJM,KAAAhC,UAAW,EACX,KAAAD,WAAY,EAIlBR,EAAAA,KAAYE,GACZ,MAAMuX,EAAMnW,EAAQxB,GAEpB,GADA+B,KAAK0f,MAAQrhB,EAAKpK,SACe,oBAAtB+L,KAAK0f,MAAMpf,OACpB,MAAM,IAAIzN,UAAU,uDACtBmN,KAAKzB,SAAWyB,KAAK0f,MAAMnhB,SAC3ByB,KAAK1B,UAAY0B,KAAK0f,MAAMphB,UAC5B,MAAMC,EAAWyB,KAAKzB,SAChBsU,EAAM,IAAIjgB,WAAW2L,GAE3BsU,EAAI5R,IAAI2U,EAAIziB,OAASoL,EAAWF,EAAKpK,SAASqM,OAAOsV,GAAKrV,SAAWqV,GACrE,IAAK,IAAIrd,EAAI,EAAGA,EAAIsa,EAAI1f,OAAQoF,IAAKsa,EAAIta,IAAM,GAC/CyH,KAAK0f,MAAMpf,OAAOuS,GAElB7S,KAAK2f,MAAQthB,EAAKpK,SAElB,IAAK,IAAIsE,EAAI,EAAGA,EAAIsa,EAAI1f,OAAQoF,IAAKsa,EAAIta,IAAM,IAC/CyH,KAAK2f,MAAMrf,OAAOuS,GAClBA,EAAItR,KAAK,EACX,CACAjB,OAAOsf,GAGL,OAFAzhB,EAAAA,OAAc6B,MACdA,KAAK0f,MAAMpf,OAAOsf,GACX5f,IACT,CACAsB,WAAWxC,GACTX,EAAAA,OAAc6B,MACd7B,EAAAA,MAAaW,EAAKkB,KAAK1B,WACvB0B,KAAKpB,UAAW,EAChBoB,KAAK0f,MAAMpe,WAAWxC,GACtBkB,KAAK2f,MAAMrf,OAAOxB,GAClBkB,KAAK2f,MAAMre,WAAWxC,GACtBkB,KAAKsC,SACP,CACA/B,SACE,MAAMzB,EAAM,IAAIlM,WAAWoN,KAAK2f,MAAMrhB,WAEtC,OADA0B,KAAKsB,WAAWxC,GACTA,CACT,CACAmB,WAAWsC,GAETA,IAAAA,EAAOvO,OAAOC,OAAOD,OAAO6rB,eAAe7f,MAAO,CAAC,IACnD,MAAM,MAAE2f,EAAK,MAAED,EAAK,SAAE9gB,EAAQ,UAAED,EAAS,SAAEJ,EAAQ,UAAED,GAAc0B,KAQnE,OANAuC,EAAG3D,SAAWA,EACd2D,EAAG5D,UAAYA,EACf4D,EAAGhE,SAAWA,EACdgE,EAAGjE,UAAYA,EACfiE,EAAGod,MAAQA,EAAM1f,WAAWsC,EAAGod,OAC/Bpd,EAAGmd,MAAQA,EAAMzf,WAAWsC,EAAGmd,OACxBnd,CACT,CACAD,UACEtC,KAAKrB,WAAY,EACjBqB,KAAK2f,MAAMrd,UACXtC,KAAK0f,MAAMpd,SACb,EASK,MAAMwd,GAAOA,CAACzhB,EAAauX,EAAYvV,IAC5C,IAAIof,GAAUphB,EAAMuX,GAAKtV,OAAOD,GAASE,SAC3Cuf,GAAK7rB,OAAS,CAACoK,EAAauX,IAAe,IAAI6J,GAAUphB,EAAMuX,gCC9E/D,MAAMxO,GAAM1F,OAAO,GACb2F,GAAM3F,OAAO,GACb4F,GAAM5F,OAAO,GACbqe,GAAMre,OAAO,GACb6F,GAAM7F,OAAO,GACb+F,GAAQzT,OAAO0T,OAAO,CACxBC,EAAGP,GACHzU,EAAG+O,OAAO,GACVmG,EAAGnG,OAAO,sEACV9D,EAAG8D,OAAO,sEACVI,EAAGuF,GACHS,GAAIpG,OAAO,iFACXqG,GAAIrG,OAAO,iFACXse,KAAMte,OAAO,wEAEXue,GAAaA,CAACtY,EAAGhV,KAAOgV,EAAIhV,EAAI2U,IAAO3U,EACvCutB,GAAO,CACTF,KAAMte,OAAO,sEACbye,YAAYrJ,GACR,MAAM,EAAElZ,GAAM6J,GACR2Y,EAAK1e,OAAO,sCACZsO,GAAM3I,GAAM3F,OAAO,sCACnB2e,EAAK3e,OAAO,uCACZuO,EAAKmQ,EACLE,EAAY5e,OAAO,uCACnB6e,EAAKN,GAAWhQ,EAAK6G,EAAGlZ,GACxB4iB,EAAKP,IAAYjQ,EAAK8G,EAAGlZ,GAC/B,IAAI6iB,EAAKzX,GAAI8N,EAAIyJ,EAAKH,EAAKI,EAAKH,EAAIziB,GAChC8iB,EAAK1X,IAAKuX,EAAKvQ,EAAKwQ,EAAKvQ,EAAIrS,GACjC,MAAM+iB,EAAQF,EAAKH,EACbM,EAAQF,EAAKJ,EAKnB,GAJIK,IACAF,EAAK7iB,EAAI6iB,GACTG,IACAF,EAAK9iB,EAAI8iB,GACTD,EAAKH,GAAaI,EAAKJ,EACvB,MAAM,IAAI3rB,MAAM,2CAA6CmiB,GAEjE,MAAO,CAAE6J,QAAOF,KAAIG,QAAOF,KAC/B,GAEEG,GAAW,GACXC,GAAW,GACXC,GAAU,GACVC,GAAgBH,GAAW,EAC3BI,GAAkB,EAAIJ,GAAW,EAEvC,SAASK,GAAY3Y,GACjB,MAAM,EAAEZ,EAAC,EAAEhV,GAAM8U,GACX0Z,EAAKnY,GAAIT,EAAIA,GACb6Y,EAAKpY,GAAImY,EAAK5Y,GACpB,OAAOS,GAAIoY,EAAKzZ,EAAIY,EAAI5V,EAC5B,CACA,MAAM0uB,GAAmB5Z,GAAME,IAAMP,GACrC,MAAMka,WAAiB3sB,MACnBtB,YAAYgN,GACRO,MAAMP,EACV,EAEJ,SAASkhB,GAAe3X,GACpB,KAAMA,aAAiB4X,IACnB,MAAM,IAAI3uB,UAAU,yBAC5B,CACA,MAAM2uB,GACFnuB,YAAYkV,EAAGC,EAAGC,GACdzI,KAAKuI,EAAIA,EACTvI,KAAKwI,EAAIA,EACTxI,KAAKyI,EAAIA,CACb,CACAE,kBAAkBC,GACd,KAAMA,aAAaC,IACf,MAAM,IAAIhW,UAAU,4CAExB,OAAI+V,EAAEE,OAAOD,GAAME,MACRyY,GAAczY,KAClB,IAAIyY,GAAc5Y,EAAEL,EAAGK,EAAEJ,EAAGnB,GACvC,CACAsB,qBAAqBM,GACjB,MAAMC,EAkkBd,SAAqBC,GAAmB,IAAbP,EAAC9T,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG2S,GAAMI,EACjC,MAAM4Z,EAAU,IAAI1oB,MAAMoQ,EAAKhW,QAOzBiW,EAAWC,GANMF,EAAKzQ,QAAO,CAACO,EAAKqQ,EAAK/Q,IACtC+Q,IAAQlC,GACDnO,GACXwoB,EAAQlpB,GAAKU,EACN+P,GAAI/P,EAAMqQ,EAAKV,KACvBvB,IACqCuB,GAOxC,OANAO,EAAKI,aAAY,CAACtQ,EAAKqQ,EAAK/Q,IACpB+Q,IAAQlC,GACDnO,GACXwoB,EAAQlpB,GAAKyQ,GAAI/P,EAAMwoB,EAAQlpB,GAAIqQ,GAC5BI,GAAI/P,EAAMqQ,EAAKV,KACvBQ,GACIqY,CACX,CAllBsBjY,CAAYP,EAAOlE,KAAK6D,GAAMA,EAAEH,KAC9C,OAAOQ,EAAOlE,KAAI,CAAC6D,EAAGrQ,IAAMqQ,EAAEa,SAASP,EAAM3Q,KACjD,CACAoQ,kBAAkBM,GACd,OAAOuY,GAAc9X,cAAcT,GAAQlE,IAAIyc,GAAc7X,WACjE,CACAb,OAAOc,GACH2X,GAAe3X,GACf,MAAQrB,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAGuB,GAAOhK,MACxBuI,EAAG0B,EAAIzB,EAAG0B,EAAIzB,EAAG0B,GAAOP,EAC1B8X,EAAO1Y,GAAIgB,EAAKA,GAChB2X,EAAO3Y,GAAImB,EAAKA,GAChByX,EAAK5Y,GAAIc,EAAK6X,GACdE,EAAK7Y,GAAIiB,EAAKyX,GACdI,EAAK9Y,GAAIA,GAAIe,EAAKI,GAAMwX,GACxBI,EAAK/Y,GAAIA,GAAIkB,EAAKF,GAAM0X,GAC9B,OAAOE,IAAOC,GAAMC,IAAOC,CAC/B,CACAvX,SACI,OAAO,IAAIgX,GAAcxhB,KAAKuI,EAAGS,IAAKhJ,KAAKwI,GAAIxI,KAAKyI,EACxD,CACAgC,SACI,MAAQlC,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAGuB,GAAOhK,KAC1B0K,EAAI1B,GAAIc,EAAKA,GACba,EAAI3B,GAAIe,EAAKA,GACba,EAAI5B,GAAI2B,EAAIA,GACZqX,EAAMlY,EAAKa,EACXE,EAAI7B,GAAI1B,IAAO0B,GAAIgZ,EAAMA,GAAOtX,EAAIE,IACpCG,EAAI/B,GAAI+W,GAAMrV,GACdO,EAAIjC,GAAI+B,EAAIA,GACZI,EAAKnC,GAAIiC,EAAI3D,GAAMuD,GACnBO,EAAKpC,GAAI+B,GAAKF,EAAIM,GAAM5D,GAAMqD,GAC9BU,EAAKtC,GAAI1B,GAAMyC,EAAKC,GAC1B,OAAO,IAAIwX,GAAcrW,EAAIC,EAAIE,EACrC,CACA1H,IAAIgG,GACA2X,GAAe3X,GACf,MAAQrB,EAAGuB,EAAItB,EAAGuB,EAAItB,EAAGuB,GAAOhK,MACxBuI,EAAG0B,EAAIzB,EAAG0B,EAAIzB,EAAG0B,GAAOP,EAChC,GAAIK,IAAO7C,IAAO8C,IAAO9C,GACrB,OAAOpH,KACX,GAAI8J,IAAO1C,IAAO2C,IAAO3C,GACrB,OAAOwC,EACX,MAAM8X,EAAO1Y,GAAIgB,EAAKA,GAChB2X,EAAO3Y,GAAImB,EAAKA,GAChByX,EAAK5Y,GAAIc,EAAK6X,GACdE,EAAK7Y,GAAIiB,EAAKyX,GACdI,EAAK9Y,GAAIA,GAAIe,EAAKI,GAAMwX,GACxBI,EAAK/Y,GAAIA,GAAIkB,EAAKF,GAAM0X,GACxBxW,EAAIlC,GAAI6Y,EAAKD,GACbnT,EAAIzF,GAAI+Y,EAAKD,GACnB,GAAI5W,IAAM9D,GACN,OAAIqH,IAAMrH,GACCpH,KAAKyK,SAGL+W,GAAczY,KAG7B,MAAMkZ,EAAKjZ,GAAIkC,EAAIA,GACbgX,EAAMlZ,GAAIkC,EAAI+W,GACdE,EAAInZ,GAAI4Y,EAAKK,GACb9W,EAAKnC,GAAIyF,EAAIA,EAAIyT,EAAM5a,GAAM6a,GAC7B/W,EAAKpC,GAAIyF,GAAK0T,EAAIhX,GAAM2W,EAAKI,GAC7B5W,EAAKtC,GAAIgB,EAAKG,EAAKe,GACzB,OAAO,IAAIsW,GAAcrW,EAAIC,EAAIE,EACrC,CACAG,SAAS7B,GACL,OAAO5J,KAAK4D,IAAIgG,EAAMY,SAC1B,CACA6C,eAAeF,GACX,MAAMG,EAAKkU,GAAczY,KACzB,GAAsB,kBAAXoE,GAAuBA,IAAW/F,GACzC,OAAOkG,EACX,IAAI1P,EAAIwP,GAAgBD,GACxB,GAAIvP,IAAMyJ,GACN,OAAOrH,KACX,IAAKqhB,GAAkB,CACnB,IAAIzY,EAAI0E,EACJ1F,EAAI5H,KACR,KAAOpC,EAAIwJ,IACHxJ,EAAIyJ,KACJuB,EAAIA,EAAEhF,IAAIgE,IACdA,EAAIA,EAAE6C,SACN7M,IAAMyJ,GAEV,OAAOuB,CACX,CACA,IAAI,MAAE+X,EAAK,GAAEF,EAAE,MAAEG,EAAK,GAAEF,GAAOR,GAAKC,YAAYviB,GAC5CwkB,EAAM9U,EACN+U,EAAM/U,EACN1F,EAAI5H,KACR,KAAOygB,EAAKrZ,IAAOsZ,EAAKtZ,IAChBqZ,EAAKpZ,KACL+a,EAAMA,EAAIxe,IAAIgE,IACd8Y,EAAKrZ,KACLgb,EAAMA,EAAIze,IAAIgE,IAClBA,EAAIA,EAAE6C,SACNgW,IAAOpZ,GACPqZ,IAAOrZ,GAOX,OALIsZ,IACAyB,EAAMA,EAAI5X,UACVoW,IACAyB,EAAMA,EAAI7X,UACd6X,EAAM,IAAIb,GAAcxY,GAAIqZ,EAAI9Z,EAAI2X,GAAKF,MAAOqC,EAAI7Z,EAAG6Z,EAAI5Z,GACpD2Z,EAAIxe,IAAIye,EACnB,CACA3W,iBAAiBC,GACb,MAAMC,EAAUyV,GAAmB,IAAM1V,EAAI,EAAI,IAAMA,EAAI,EACrD1C,EAAS,GACf,IAAIL,EAAI5I,KACJ6L,EAAOjD,EACX,IAAK,IAAIkD,EAAS,EAAGA,EAASF,EAASE,IAAU,CAC7CD,EAAOjD,EACPK,EAAOzQ,KAAKqT,GACZ,IAAK,IAAItT,EAAI,EAAGA,EAAI,IAAMoT,EAAI,GAAIpT,IAC9BsT,EAAOA,EAAKjI,IAAIgF,GAChBK,EAAOzQ,KAAKqT,GAEhBjD,EAAIiD,EAAKpB,QACb,CACA,OAAOxB,CACX,CACA8C,KAAKnO,EAAGoO,IACCA,GAAehM,KAAK8I,OAAO0Y,GAAcvV,QAC1CD,EAAcnD,GAAMoD,MACxB,MAAMN,EAAKK,GAAeA,EAAYE,cAAiB,EACvD,GAAI,IAAMP,EACN,MAAM,IAAIhX,MAAM,iEAEpB,IAAIwX,EAAcH,GAAeI,GAAiBhK,IAAI4J,GACjDG,IACDA,EAAcnM,KAAK0L,iBAAiBC,GAChCK,GAAqB,IAANL,IACfQ,EAAcqV,GAAcnV,WAAWF,GACvCC,GAAiBnL,IAAI+K,EAAaG,KAG1C,IAAIvD,EAAI4Y,GAAczY,KAClBuD,EAAIkV,GAAcvV,KACtB,MAAML,EAAU,GAAKyV,GAAmB,IAAM1V,EAAI,IAAMA,GAClDY,EAAa,IAAMZ,EAAI,GACvBa,EAAO9K,OAAO,GAAKiK,EAAI,GACvBc,EAAY,GAAKd,EACjBe,EAAUhL,OAAOiK,GACvB,IAAK,IAAIG,EAAS,EAAGA,EAASF,EAASE,IAAU,CAC7C,MAAMlY,EAASkY,EAASS,EACxB,IAAII,EAAQnZ,OAAOoK,EAAI4O,GACvB5O,IAAM8O,EACFC,EAAQJ,IACRI,GAASF,EACT7O,GAAKyJ,IAET,MAAMuF,EAAUhZ,EACViZ,EAAUjZ,EAASsB,KAAK4X,IAAIH,GAAS,EACrCI,EAAQjB,EAAS,IAAM,EACvBkB,EAAQL,EAAQ,EACR,IAAVA,EACAL,EAAIA,EAAE1I,IAAIqJ,GAAgBF,EAAOZ,EAAYS,KAG7ChE,EAAIA,EAAEhF,IAAIqJ,GAAgBD,EAAOb,EAAYU,IAErD,CACA,MAAO,CAAEjE,IAAG0D,IAChB,CACAY,SAASC,EAAQnB,GACb,IACImG,EACAmQ,EAFA1kB,EAAIwP,GAAgBD,GAGxB,GAAIkU,GAAkB,CAClB,MAAM,MAAEV,EAAK,GAAEF,EAAE,MAAEG,EAAK,GAAEF,GAAOR,GAAKC,YAAYviB,GAClD,IAAMgL,EAAGwZ,EAAK9V,EAAGiW,GAAQviB,KAAK+L,KAAK0U,EAAIzU,IACjCpD,EAAGyZ,EAAK/V,EAAGkW,GAAQxiB,KAAK+L,KAAK2U,EAAI1U,GACvCoW,EAAMnV,GAAgB0T,EAAOyB,GAC7BC,EAAMpV,GAAgB2T,EAAOyB,GAC7BA,EAAM,IAAIb,GAAcxY,GAAIqZ,EAAI9Z,EAAI2X,GAAKF,MAAOqC,EAAI7Z,EAAG6Z,EAAI5Z,GAC3D0J,EAAQiQ,EAAIxe,IAAIye,GAChBC,EAAOC,EAAI3e,IAAI4e,EACnB,KACK,CACD,MAAM,EAAE5Z,EAAC,EAAE0D,GAAMtM,KAAK+L,KAAKnO,EAAGoO,GAC9BmG,EAAQvJ,EACR0Z,EAAOhW,CACX,CACA,OAAOkV,GAAcnV,WAAW,CAAC8F,EAAOmQ,IAAO,EACnD,CACA7Y,SAASgE,GACL,MAAM,EAAElF,EAAC,EAAEC,EAAC,EAAEC,GAAMzI,KACd0N,EAAM1N,KAAK8I,OAAO0Y,GAAczY,MAC1B,MAAR0E,IACAA,EAAOC,EAAMnG,GAAM8B,GAAOZ,IAC9B,MAAMga,EAAMhV,EACNiV,EAAM1Z,GAAIyZ,EAAMA,GAChBE,EAAM3Z,GAAI0Z,EAAMD,GAChB9U,EAAK3E,GAAIT,EAAIma,GACb9U,EAAK5E,GAAIR,EAAIma,GACb9U,EAAK7E,GAAIP,EAAIga,GACnB,GAAI/U,EACA,OAAO7E,GAAME,KACjB,GAAI8E,IAAOxG,GACP,MAAM,IAAI1S,MAAM,oBACpB,OAAO,IAAIkU,GAAM8E,EAAIC,EACzB,EAIJ,SAASX,GAAgBiB,EAAWC,GAChC,MAAMC,EAAMD,EAAK3D,SACjB,OAAO0D,EAAYE,EAAMD,CAC7B,CALAqT,GAAcvV,KAAO,IAAIuV,GAAc/Z,GAAMK,GAAIL,GAAMM,GAAIV,IAC3Dma,GAAczY,KAAO,IAAIyY,GAAcpa,GAAKC,GAAKD,IAKjD,MAAMgF,GAAmB,IAAIoF,QACtB,MAAM3I,GACTxV,YAAYkV,EAAGC,GACXxI,KAAKuI,EAAIA,EACTvI,KAAKwI,EAAIA,CACb,CACAiJ,eAAelF,GACXvM,KAAKkM,aAAeK,EACpBH,GAAiBsF,OAAO1R,KAC5B,CACA4iB,WACI,OAAO5iB,KAAKwI,EAAIlB,KAAQF,EAC5B,CACAuB,yBAAyB7K,GACrB,MAAM+kB,EAA2B,KAAjB/kB,EAAM3K,OAChBoV,EAAIua,GAAcD,EAAU/kB,EAAQA,EAAMoD,SAAS,IACzD,IAAK6hB,GAAoBxa,GACrB,MAAM,IAAI5T,MAAM,yBAEpB,IAAI6T,EA6SZ,SAAiBD,GACb,MAAM,EAAEV,GAAMJ,GACRub,EAAMthB,OAAO,GACbuhB,EAAOvhB,OAAO,IACdwhB,EAAOxhB,OAAO,IACdyhB,EAAOzhB,OAAO,IACd0hB,EAAO1hB,OAAO,IACd2hB,EAAO3hB,OAAO,IACduO,EAAM1H,EAAIA,EAAIA,EAAKV,EACnByb,EAAMrT,EAAKA,EAAK1H,EAAKV,EACrB0b,EAAM1P,GAAKyP,EAAIvD,IAAOuD,EAAMzb,EAC5B2b,EAAM3P,GAAK0P,EAAIxD,IAAOuD,EAAMzb,EAC5B4b,EAAO5P,GAAK2P,EAAIlc,IAAO2I,EAAMpI,EAC7B6b,EAAO7P,GAAK4P,EAAKR,GAAQQ,EAAO5b,EAChC8b,EAAO9P,GAAK6P,EAAKR,GAAQQ,EAAO7b,EAChC+b,EAAO/P,GAAK8P,EAAKP,GAAQO,EAAO9b,EAChCgc,EAAQhQ,GAAK+P,EAAKP,GAAQO,EAAO/b,EACjCic,EAAQjQ,GAAKgQ,EAAMT,GAAQO,EAAO9b,EAClCkc,EAAQlQ,GAAKiQ,EAAM/D,IAAOuD,EAAMzb,EAChCmc,EAAMnQ,GAAKkQ,EAAMZ,GAAQO,EAAO7b,EAChCoc,EAAMpQ,GAAKmQ,EAAIhB,GAAO/S,EAAMpI,EAC5Bqc,EAAKrQ,GAAKoQ,EAAI3c,IAEpB,GADY4c,EAAKA,EAAMrc,IACZU,EACP,MAAM,IAAI5T,MAAM,2BACpB,OAAOuvB,CACX,CAvUgBC,CADGjD,GAAY3Y,IAEvB,MAAM6b,GAAU5b,EAAInB,MAASA,GAC7B,GAAIwb,EACIuB,IACA5b,EAAIQ,IAAKR,QAEZ,CACyC,KAAP,EAAX1K,EAAM,MACPsmB,IACnB5b,EAAIQ,IAAKR,GACjB,CACA,MAAM2J,EAAQ,IAAItJ,GAAMN,EAAGC,GAE3B,OADA2J,EAAMG,iBACCH,CACX,CACAxJ,2BAA2B7K,GACvB,MAAMyK,EAAIua,GAAchlB,EAAMoD,SAAS,EAAG2f,GAAW,IAC/CrY,EAAIsa,GAAchlB,EAAMoD,SAAS2f,GAAW,EAAc,EAAXA,GAAe,IAC9D1O,EAAQ,IAAItJ,GAAMN,EAAGC,GAE3B,OADA2J,EAAMG,iBACCH,CACX,CACAxJ,eAAe4G,GACX,MAAMzR,EAAQ4R,GAAYH,GACpBxO,EAAMjD,EAAM3K,OACZkxB,EAASvmB,EAAM,GACrB,GAAIiD,IAAQ8f,GACR,OAAO7gB,KAAKskB,kBAAkBxmB,GAClC,GAAIiD,IAAQigB,KAA6B,IAAXqD,GAA8B,IAAXA,GAC7C,OAAOrkB,KAAKskB,kBAAkBxmB,GAElC,GAAIiD,IAAQkgB,IAA8B,IAAXoD,EAC3B,OAAOrkB,KAAKukB,oBAAoBzmB,GACpC,MAAM,IAAInJ,MAAO,sDAAqDqsB,0BAAqCC,8BAA2ClgB,IAC1J,CACA4H,sBAAsBsJ,GAClB,OAAOpJ,GAAMoD,KAAKiB,SAASsX,GAAoBvS,GACnD,CACAtJ,qBAAqB8b,EAASC,EAAWC,GACrC,MAAM,EAAElW,EAAC,EAAEzL,GAAM4hB,GAAmBF,GACpC,IAAK,CAAC,EAAG,EAAG,EAAG,GAAGxmB,SAASymB,GACvB,MAAM,IAAIhwB,MAAM,wCACpB,MAAMmN,EAAI+iB,GAAanV,GAAY+U,KAC7B,EAAE7mB,GAAM6J,GACRqd,EAAoB,IAAbH,GAA+B,IAAbA,EAAiBlW,EAAI7Q,EAAI6Q,EAClDsW,EAAO1b,GAAOyb,EAAMlnB,GACpBwS,EAAKpH,IAAKlH,EAAIijB,EAAMnnB,GACpByS,EAAKrH,GAAIhG,EAAI+hB,EAAMnnB,GACnBoY,EAAoB,EAAX2O,EAAe,KAAO,KAC/BxN,EAAItO,GAAM0J,QAAQyD,EAASgP,GAAYF,IACvCG,EAAIpc,GAAMoD,KAAKiZ,qBAAqB/N,EAAG/G,EAAIC,GACjD,IAAK4U,EACD,MAAM,IAAItwB,MAAM,+CAEpB,OADAswB,EAAE3S,iBACK2S,CACX,CACArU,aAAiC,IAAtBuU,EAAYrwB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACnB,OAAOke,GAAWhT,KAAKoR,MAAM+T,GACjC,CACA/T,QAA4B,IAAtB+T,EAAYrwB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACd,MAAMyT,EAAIyc,GAAYhlB,KAAKuI,GAC3B,GAAI4c,EAAc,CAEd,MAAQ,GADOnlB,KAAK4iB,WAAa,KAAO,OACrBra,GACvB,CAEI,MAAQ,KAAIA,IAAIyc,GAAYhlB,KAAKwI,IAEzC,CACA4c,SACI,OAAOplB,KAAKoR,OAAM,GAAMrU,MAAM,EAClC,CACAsoB,SACI,OAAOrlB,KAAK4Q,YAAW,GAAM7T,MAAM,EACvC,CACAuV,iBACI,MAAMsE,EAAM,kCACN,EAAErO,EAAC,EAAEC,GAAMxI,KACjB,IAAK+iB,GAAoBxa,KAAOwa,GAAoBva,GAChD,MAAM,IAAI7T,MAAMiiB,GACpB,MAAM0O,EAAOtc,GAAIR,EAAIA,GAErB,GAAIQ,GAAIsc,EADMpE,GAAY3Y,MACAnB,GACtB,MAAM,IAAIzS,MAAMiiB,EACxB,CACA9N,OAAOc,GACH,OAAO5J,KAAKuI,IAAMqB,EAAMrB,GAAKvI,KAAKwI,IAAMoB,EAAMpB,CAClD,CACAgC,SACI,OAAO,IAAI3B,GAAM7I,KAAKuI,EAAGS,IAAKhJ,KAAKwI,GACvC,CACAiC,SACI,OAAO+W,GAAc7X,WAAW3J,MAAMyK,SAAShB,UACnD,CACA7F,IAAIgG,GACA,OAAO4X,GAAc7X,WAAW3J,MAAM4D,IAAI4d,GAAc7X,WAAWC,IAAQH,UAC/E,CACAgC,SAAS7B,GACL,OAAO5J,KAAK4D,IAAIgG,EAAMY,SAC1B,CACA0C,SAASC,GACL,OAAOqU,GAAc7X,WAAW3J,MAAMkN,SAASC,EAAQnN,MAAMyJ,UACjE,CACAyb,qBAAqBD,EAAGtd,EAAGhV,GACvB,MAAMkV,EAAI2Z,GAAc7X,WAAW3J,MAC7BulB,EAAK5d,IAAMP,IAAOO,IAAMN,IAAOrH,OAAS6I,GAAMoD,KAAOpE,EAAEwF,eAAe1F,GAAKE,EAAEqF,SAASvF,GACtF6d,EAAKhE,GAAc7X,WAAWsb,GAAG5X,eAAe1a,GAChD8J,EAAM8oB,EAAG3hB,IAAI4hB,GACnB,OAAO/oB,EAAIqM,OAAO0Y,GAAczY,WAAQhU,EAAY0H,EAAIgN,UAC5D,EAIJ,SAASgc,GAASziB,GACd,OAAOxP,OAAO6f,SAASrQ,EAAE,GAAI,KAAO,EAAI,KAAOA,EAAIA,CACvD,CACA,SAAS0iB,GAAYhmB,GACjB,GAAIA,EAAKvM,OAAS,GAAiB,IAAZuM,EAAK,GACxB,MAAM,IAAI/K,MAAO,kCAAiC0c,GAAW3R,MAEjE,MAAMqB,EAAMrB,EAAK,GACX2C,EAAM3C,EAAKwB,SAAS,EAAGH,EAAM,GACnC,IAAKA,GAAOsB,EAAIlP,SAAW4N,EACvB,MAAM,IAAIpM,MAAO,2CAErB,GAAe,IAAX0N,EAAI,IAAeA,EAAI,IAAM,IAC7B,MAAM,IAAI1N,MAAM,8CAEpB,MAAO,CAAE+K,KAAMojB,GAAczgB,GAAMijB,KAAM5lB,EAAKwB,SAASH,EAAM,GACjE,CAlBA8H,GAAMoD,KAAO,IAAIpD,GAAMpB,GAAMK,GAAIL,GAAMM,IACvCc,GAAME,KAAO,IAAIF,GAAMzB,GAAKA,IAgCrB,MAAMiL,GACThf,YAAYob,EAAGzL,GACXhD,KAAKyO,EAAIA,EACTzO,KAAKgD,EAAIA,EACThD,KAAKsS,gBACT,CACA3J,mBAAmB4G,GACf,MAAMpQ,EAAMoQ,aAAe3c,WACrB2B,EAAO,wBACb,GAAmB,kBAARgb,IAAqBpQ,EAC5B,MAAM,IAAItM,UAAW,GAAE0B,oCAC3B,MAAMoL,EAAMR,EAAMkS,GAAW9B,GAAOA,EACpC,GAAmB,MAAf5P,EAAIxM,OACJ,MAAM,IAAIwB,MAAO,GAAEJ,2BACvB,OAAO,IAAI8d,GAAUsT,GAAYhmB,EAAI5C,MAAM,EAAG,KAAM4oB,GAAYhmB,EAAI5C,MAAM,GAAI,MAClF,CACA4L,eAAe4G,GACX,MAAMpQ,EAAMoQ,aAAe3c,WAC3B,GAAmB,kBAAR2c,IAAqBpQ,EAC5B,MAAM,IAAItM,UAAW,oDACzB,MAAM,EAAE4b,EAAC,EAAEzL,GAlCnB,SAA2BtD,GACvB,GAAIA,EAAKvM,OAAS,GAAgB,IAAXuM,EAAK,GACxB,MAAM,IAAI/K,MAAO,0BAAyB0c,GAAW3R,MAEzD,GAAIA,EAAK,KAAOA,EAAKvM,OAAS,EAC1B,MAAM,IAAIwB,MAAM,uCAEpB,MAAQ+K,KAAM+O,EAAG6W,KAAMM,GAAWF,GAAYhmB,EAAKwB,SAAS,KACpDxB,KAAMsD,EAAGsiB,KAAMO,GAAeH,GAAYE,GAClD,GAAIC,EAAW1yB,OACX,MAAM,IAAIwB,MAAO,gDAA+C0c,GAAWwU,MAE/E,MAAO,CAAEpX,IAAGzL,IAChB,CAqByB8iB,CAAkB3mB,EAAMoQ,EAAMyD,GAAWzD,IAC1D,OAAO,IAAI8C,GAAU5D,EAAGzL,EAC5B,CACA2F,eAAe4G,GACX,OAAOvP,KAAK+lB,QAAQxW,EACxB,CACA+C,iBACI,MAAM,EAAE7D,EAAC,EAAEzL,GAAMhD,KACjB,IAAKgmB,GAAmBvX,GACpB,MAAM,IAAI9Z,MAAM,0CACpB,IAAKqxB,GAAmBhjB,GACpB,MAAM,IAAIrO,MAAM,yCACxB,CACAsxB,WACI,MAAMC,EAAOze,GAAM7J,GAAKyJ,GACxB,OAAOrH,KAAKgD,EAAIkjB,CACpB,CACAC,aACI,OAAOnmB,KAAKimB,WAAa,IAAI5T,GAAUrS,KAAKyO,EAAGzF,IAAKhJ,KAAKgD,EAAGyE,GAAM7J,IAAMoC,IAC5E,CACAomB,gBACI,OAAOpT,GAAWhT,KAAKqmB,WAC3B,CACAA,WACI,MAAMC,EAAOb,GAASc,GAAoBvmB,KAAKgD,IACzCwjB,EAAOf,GAASc,GAAoBvmB,KAAKyO,IACzCgY,EAAQH,EAAKnzB,OAAS,EACtBuzB,EAAQF,EAAKrzB,OAAS,EACtBwzB,EAAOJ,GAAoBE,GAC3BG,EAAOL,GAAoBG,GAEjC,MAAQ,KADOH,GAAoBG,EAAQD,EAAQ,OAC5BG,IAAOJ,MAASG,IAAOL,GAClD,CACA1V,aACI,OAAO5Q,KAAKomB,eAChB,CACAhV,QACI,OAAOpR,KAAKqmB,UAChB,CACAQ,oBACI,OAAO7T,GAAWhT,KAAK8mB,eAC3B,CACAA,eACI,OAAO9B,GAAYhlB,KAAKyO,GAAKuW,GAAYhlB,KAAKgD,EAClD,EAEJ,SAASyP,KAAuB,QAAA1U,EAAAjJ,UAAA3B,OAARuf,EAAM,IAAA3Z,MAAAgF,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAANyU,EAAMzU,GAAAnJ,UAAAmJ,GAC1B,IAAKyU,EAAOC,OAAOhgB,GAAMA,aAAaC,aAClC,MAAM,IAAI+B,MAAM,4BACpB,GAAsB,IAAlB+d,EAAOvf,OACP,OAAOuf,EAAO,GAClB,MAAMvf,EAASuf,EAAOha,QAAO,CAACiP,EAAGxI,IAAQwI,EAAIxI,EAAIhM,QAAQ,GACnDyf,EAAS,IAAIhgB,WAAWO,GAC9B,IAAK,IAAIoF,EAAI,EAAGsa,EAAM,EAAGta,EAAIma,EAAOvf,OAAQoF,IAAK,CAC7C,MAAM4G,EAAMuT,EAAOna,GACnBqa,EAAO3R,IAAI9B,EAAK0T,GAChBA,GAAO1T,EAAIhM,MACf,CACA,OAAOyf,CACX,CACA,MAAME,GAAQ/Z,MAAM/F,KAAK,CAAEG,OAAQ,MAAO,CAACwF,EAAGJ,IAAMA,EAAE2E,SAAS,IAAIsC,SAAS,EAAG,OAC/E,SAAS6R,GAAW0B,GAChB,KAAMA,aAAkBngB,YACpB,MAAM,IAAI+B,MAAM,uBACpB,IAAI4a,EAAM,GACV,IAAK,IAAIhX,EAAI,EAAGA,EAAIwa,EAAO5f,OAAQoF,IAC/BgX,GAAOuD,GAAMC,EAAOxa,IAExB,OAAOgX,CACX,CACA,MAAMvH,GAAYtG,OAAO,uEACzB,SAASsjB,GAAY1b,GACjB,GAAmB,kBAARA,EACP,MAAM,IAAI3U,MAAM,mBACpB,KAAMyS,IAAOkC,GAAOA,EAAMtB,IACtB,MAAM,IAAIrT,MAAM,kCACpB,OAAO2U,EAAIpM,SAAS,IAAIsC,SAAS,GAAI,IACzC,CACA,SAASunB,GAASzd,GACd,MAAM3W,EAAIqgB,GAAWgS,GAAY1b,IACjC,GAAiB,KAAb3W,EAAEQ,OACF,MAAM,IAAIwB,MAAM,4BACpB,OAAOhC,CACX,CACA,SAAS4zB,GAAoBjd,GACzB,MAAMiG,EAAMjG,EAAIpM,SAAS,IACzB,OAAoB,EAAbqS,EAAIpc,OAAc,IAAGoc,IAAQA,CACxC,CACA,SAASoW,GAAYpW,GACjB,GAAmB,kBAARA,EACP,MAAM,IAAI1c,UAAU,4CAA8C0c,GAEtE,OAAO7N,OAAQ,KAAI6N,IACvB,CACA,SAASyD,GAAWzD,GAChB,GAAmB,kBAARA,EACP,MAAM,IAAI1c,UAAU,2CAA6C0c,GAErE,GAAIA,EAAIpc,OAAS,EACb,MAAM,IAAIwB,MAAM,4CAA8C4a,EAAIpc,QACtE,MAAM8f,EAAQ,IAAIrgB,WAAW2c,EAAIpc,OAAS,GAC1C,IAAK,IAAIoF,EAAI,EAAGA,EAAI0a,EAAM9f,OAAQoF,IAAK,CACnC,MAAM2a,EAAQ,EAAJ3a,EACJ4a,EAAU5D,EAAIxS,MAAMmW,EAAGA,EAAI,GAC3BE,EAAO5f,OAAO6f,SAASF,EAAS,IACtC,GAAI3f,OAAO8f,MAAMF,IAASA,EAAO,EAC7B,MAAM,IAAIze,MAAM,yBACpBse,EAAM1a,GAAK6a,CACf,CACA,OAAOH,CACX,CACA,SAAS6P,GAAchlB,GACnB,OAAO6nB,GAAYtU,GAAWvT,GAClC,CACA,SAAS4R,GAAYH,GACjB,OAAOA,aAAe3c,WAAaA,WAAWI,KAAKuc,GAAOyD,GAAWzD,EACzE,CACA,SAASnC,GAAgB9D,GACrB,GAAmB,kBAARA,GAAoB9V,OAAOqK,cAAcyL,IAAQA,EAAM,EAC9D,OAAO5H,OAAO4H,GAClB,GAAmB,kBAARA,GAAoB0c,GAAmB1c,GAC9C,OAAOA,EACX,MAAM,IAAIzW,UAAU,sDACxB,CACA,SAASmW,GAAIrB,GAAgB,IAAbhV,EAACmC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG2S,GAAMI,EACtB,MAAM+K,EAASjL,EAAIhV,EACnB,OAAOigB,GAAUxL,GAAMwL,EAASjgB,EAAIigB,CACxC,CACA,SAASiB,GAAKtL,EAAGuL,GACb,MAAM,EAAEjM,GAAMJ,GACd,IAAIpF,EAAMkG,EACV,KAAOuL,KAAU1M,IACb/E,GAAOA,EACPA,GAAOwF,EAEX,OAAOxF,CACX,CA4BA,SAASgH,GAAO1L,GAA0B,IAAlB+V,EAAM5e,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG2S,GAAMI,EACnC,GAAIlK,IAAWyJ,IAAOsM,GAAUtM,GAC5B,MAAM,IAAIzS,MAAO,6CAA4CgJ,SAAc+V,KAE/E,IAAI/L,EAAIqB,GAAIrL,EAAQ+V,GAChB/gB,EAAI+gB,EACJnL,EAAInB,GAAKoB,EAAInB,GAAK0K,EAAI1K,GAAK1O,EAAIyO,GACnC,KAAOO,IAAMP,IAAK,CACd,MAAMuM,EAAIhhB,EAAIgV,EACR8G,EAAI9b,EAAIgV,EACRiM,EAAIrL,EAAIwJ,EAAI4B,EACZ/V,EAAI4K,EAAI7P,EAAIgb,EAClBhhB,EAAIgV,EAAGA,EAAI8G,EAAGlG,EAAIwJ,EAAGvJ,EAAI7P,EAAGoZ,EAAI6B,EAAGjb,EAAIiF,CAC3C,CAEA,GADYjL,IACA0U,GACR,MAAM,IAAI1S,MAAM,0BACpB,OAAOqU,GAAIT,EAAGmL,EAClB,CAuBA,SAASmR,GAAaxmB,GAA4B,IAAtB2oB,EAAYlyB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACpC,MAAMgN,EANV,SAAoBhE,GAChB,MAAMmpB,EAAuB,EAAfnpB,EAAM3K,OAAwB,EAAX2tB,GAC3BxX,EAAMwZ,GAAchlB,GAC1B,OAAOmpB,EAAQ,EAAI3d,GAAO5H,OAAOulB,GAAS3d,CAC9C,CAEc4d,CAAW7oB,GACrB,GAAI2oB,EACA,OAAOllB,EACX,MAAM,EAAElE,GAAM6J,GACd,OAAO3F,GAAKlE,EAAIkE,EAAIlE,EAAIkE,CAC5B,CACA,IAAIqlB,GACAC,GACJ,MAAMC,GACFh0B,YAAY0tB,EAASuG,GAGjB,GAFAtnB,KAAK+gB,QAAUA,EACf/gB,KAAKsnB,SAAWA,EACO,kBAAZvG,GAAwBA,EAAU,EACzC,MAAM,IAAIpsB,MAAM,4BACpB,GAAwB,kBAAb2yB,GAAyBA,EAAW,EAC3C,MAAM,IAAI3yB,MAAM,6BACpBqL,KAAKrH,EAAI,IAAI/F,WAAWmuB,GAASxf,KAAK,GACtCvB,KAAK8W,EAAI,IAAIlkB,WAAWmuB,GAASxf,KAAK,GACtCvB,KAAKunB,QAAU,CACnB,CACAzH,OAAgB,QAAA0H,EAAA1yB,UAAA3B,OAARkB,EAAM,IAAA0E,MAAAyuB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANpzB,EAAMozB,GAAA3yB,UAAA2yB,GACV,OAAOpR,GAAMqR,WAAW1nB,KAAK8W,KAAMziB,EACvC,CACAszB,WAAoB,QAAAC,EAAA9yB,UAAA3B,OAARkB,EAAM,IAAA0E,MAAA6uB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANxzB,EAAMwzB,GAAA/yB,UAAA+yB,GACd,OAAOT,GAAgBpnB,KAAK8W,KAAMziB,EACtC,CACAyzB,YACI,GAA+B,oBAApBV,GACP,MAAM,IAAI9F,GAAS,iCAC3B,CACAyG,OACI,GAAI/nB,KAAKunB,SAAW,IAChB,MAAM,IAAI5yB,MAAM,qDACpBqL,KAAKunB,SAAW,CACpB,CACAnR,eAAsC,IAAzB4R,EAAIlzB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAAIlC,WACpBoN,KAAK8W,QAAU9W,KAAK8f,KAAK9f,KAAKrH,EAAG/F,WAAWI,KAAK,CAAC,IAAQg1B,GAC1DhoB,KAAKrH,QAAUqH,KAAK8f,KAAK9f,KAAKrH,GACV,IAAhBqvB,EAAK70B,SAET6M,KAAK8W,QAAU9W,KAAK8f,KAAK9f,KAAKrH,EAAG/F,WAAWI,KAAK,CAAC,IAAQg1B,GAC1DhoB,KAAKrH,QAAUqH,KAAK8f,KAAK9f,KAAKrH,GAClC,CACAsvB,aAAoC,IAAzBD,EAAIlzB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAAIlC,WAClBoN,KAAK8nB,YACL9nB,KAAK8W,EAAI9W,KAAK2nB,SAAS3nB,KAAKrH,EAAG/F,WAAWI,KAAK,CAAC,IAAQg1B,GACxDhoB,KAAKrH,EAAIqH,KAAK2nB,SAAS3nB,KAAKrH,GACR,IAAhBqvB,EAAK70B,SAET6M,KAAK8W,EAAI9W,KAAK2nB,SAAS3nB,KAAKrH,EAAG/F,WAAWI,KAAK,CAAC,IAAQg1B,GACxDhoB,KAAKrH,EAAIqH,KAAK2nB,SAAS3nB,KAAKrH,GAChC,CACAyd,iBACIpW,KAAK+nB,OACL,IAAIhnB,EAAM,EACV,MAAMjC,EAAM,GACZ,KAAOiC,EAAMf,KAAKsnB,UAAU,CACxBtnB,KAAKrH,QAAUqH,KAAK8f,KAAK9f,KAAKrH,GAC9B,MAAMuvB,EAAKloB,KAAKrH,EAAEoE,QAClB+B,EAAItG,KAAK0vB,GACTnnB,GAAOf,KAAKrH,EAAExF,MAClB,CACA,OAAOsf,MAAe3T,EAC1B,CACAqpB,eACInoB,KAAK8nB,YACL9nB,KAAK+nB,OACL,IAAIhnB,EAAM,EACV,MAAMjC,EAAM,GACZ,KAAOiC,EAAMf,KAAKsnB,UAAU,CACxBtnB,KAAKrH,EAAIqH,KAAK2nB,SAAS3nB,KAAKrH,GAC5B,MAAMuvB,EAAKloB,KAAKrH,EAAEoE,QAClB+B,EAAItG,KAAK0vB,GACTnnB,GAAOf,KAAKrH,EAAExF,MAClB,CACA,OAAOsf,MAAe3T,EAC1B,EAEJ,SAASknB,GAAmB1c,GACxB,OAAOlC,GAAMkC,GAAOA,EAAM7B,GAAM7J,CACpC,CACA,SAASmlB,GAAoBzZ,GACzB,OAAOlC,GAAMkC,GAAOA,EAAM7B,GAAMI,CACpC,CACA,SAASugB,GAASC,EAAQzU,EAAGhM,GAAgB,IAAb0gB,IAAIxzB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,KAAAA,UAAA,GAChC,MAAM,EAAE8I,GAAM6J,GACRqP,EAAI+N,GAAawD,GAAQ,GAC/B,IAAKrC,GAAmBlP,GACpB,OACJ,MAAMyR,EAAOlf,GAAOyN,EAAGlZ,GACjB+V,EAAI9K,GAAMoD,KAAKiB,SAAS4J,GACxBrI,EAAIzF,GAAI2K,EAAEpL,EAAG3K,GACnB,GAAI6Q,IAAMrH,GACN,OACJ,MAAMpE,EAAIgG,GAAIuf,EAAOvf,GAAI4K,EAAIhM,EAAI6G,EAAG7Q,GAAIA,GACxC,GAAIoF,IAAMoE,GACN,OACJ,IAAIoP,EAAM,IAAInE,GAAU5D,EAAGzL,GACvB2hB,GAAYhR,EAAEpL,IAAMiO,EAAI/H,EAAI,EAAI,GAAKjb,OAAOmgB,EAAEnL,EAAInB,IAKtD,OAJIihB,GAAQ9R,EAAIyP,aACZzP,EAAMA,EAAI2P,aACVxB,GAAY,GAET,CAAEnO,MAAKmO,WAClB,CACA,SAASH,GAAoB5O,GACzB,IAAItM,EACJ,GAAmB,kBAARsM,EACPtM,EAAMsM,OAEL,GAAmB,kBAARA,GAAoBpiB,OAAOqK,cAAc+X,IAAQA,EAAM,EACnEtM,EAAM5H,OAAOkU,QAEZ,GAAmB,kBAARA,EAAkB,CAC9B,GAAIA,EAAIziB,SAAW,EAAI2tB,GACnB,MAAM,IAAInsB,MAAM,oCACpB2U,EAAMqc,GAAY/P,EACtB,KACK,MAAIA,aAAehjB,YAMpB,MAAM,IAAIC,UAAU,8BALpB,GAAI+iB,EAAIziB,SAAW2tB,GACf,MAAM,IAAInsB,MAAM,oCACpB2U,EAAMwZ,GAAclN,EAIxB,CACA,IAAKoQ,GAAmB1c,GACpB,MAAM,IAAI3U,MAAM,qCACpB,OAAO2U,CACX,CAUA,SAASsb,GAAmBF,GACxB,GAAIA,aAAqBrS,GAErB,OADAqS,EAAUpS,iBACHoS,EAEX,IACI,OAAOrS,GAAU0T,QAAQrB,EAC7B,CACA,MAAO8D,GACH,OAAOnW,GAAUoW,YAAY/D,EACjC,CACJ,CA4BA,SAASgE,GAAS5qB,GAEd,OAAOglB,GADOhlB,EAAM3K,OAAS0tB,GAAW/iB,EAAMf,MAAM,EAAG8jB,IAAY/iB,EAEvE,CACA,SAAS6qB,GAAY7qB,GACjB,MAAM8qB,EAAKF,GAAS5qB,GACd+qB,EAAK7f,GAAI4f,EAAInhB,GAAM7J,GACzB,OAAOkrB,GAAWD,EAAKzhB,GAAMwhB,EAAKC,EACtC,CACA,SAASC,GAAWxf,GAChB,OAAOyd,GAASzd,EACpB,CACA,SAASyf,GAAYtE,EAASxS,EAAY+W,GACtC,GAAe,MAAXvE,EACA,MAAM,IAAI9vB,MAAO,2CAA0C8vB,MAC/D,MAAMwE,EAAKvZ,GAAY+U,GACjB7c,EAAI4c,GAAoBvS,GACxBiX,EAAW,CAACJ,GAAWlhB,GAAI+gB,GAAYM,IAC7C,GAAoB,MAAhBD,EAAsB,EACD,IAAjBA,IACAA,EAAe3S,GAAMqB,YAAYmJ,KACrC,MAAM1nB,EAAIuW,GAAYsZ,GACtB,GAAI7vB,EAAEhG,SAAW0tB,GACb,MAAM,IAAIlsB,MAAO,kBAAiBksB,0BACtCqI,EAAS1wB,KAAKW,EAClB,CAGA,MAAO,CAAE6uB,KAFIvV,MAAeyW,GAEbtV,EADL8U,GAASO,GACDrhB,IACtB,CACA,SAASuhB,GAAYC,EAAQ9J,GACzB,MAAM,IAAE9I,EAAG,SAAEmO,GAAayE,GACpB,IAAEC,EAAG,UAAEC,GAAct1B,OAAOG,OAAO,CAAEo1B,WAAW,EAAMF,KAAK,GAAQ/J,GACnExJ,EAASuT,EAAM7S,EAAI4P,gBAAkB5P,EAAIqQ,oBAC/C,OAAOyC,EAAY,CAACxT,EAAQ6O,GAAY7O,CAC5C,CAgMAjN,GAAMoD,KAAKwF,eAAe,GAC1B,MAAMvS,GAAS,CACXmY,KAAMC,GACNC,IAAqB,kBAATtY,MAAqB,WAAYA,KAAOA,KAAKC,YAASnK,GAOhEy0B,GAAuB,CAAC,EACjBnT,GAAQ,CACjBhF,WAAU,GACV2B,WAAU,GACVP,YAAW,GACXzJ,IAAG,GACHK,OAAM,GACNogB,kBAAkBxX,GACd,IAEI,OADAuS,GAAoBvS,IACb,CACX,CACA,MAAOuW,GACH,OAAO,CACX,CACJ,EACAkB,iBAAkB3C,GAClB4C,qBAAsBnF,GACtBoF,iBAAmBvrB,IACfA,EAAOqR,GAAYrR,GACnB,MAAMwrB,EAAS/I,GAAW,EAC1B,GAAIziB,EAAKlL,OAAS02B,GAAUxrB,EAAKlL,OAAS,KACtC,MAAM,IAAIwB,MAAO,uDAGrB,OAAOoyB,GADK/d,GAAI8Z,GAAczkB,GAAOoJ,GAAM7J,EAAIyJ,IAAOA,GAClC,EAExBqQ,YAAa,WAAsB,IAArBC,EAAW7iB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACxB,GAAIoK,GAAOqY,IACP,OAAOrY,GAAOqY,IAAIK,gBAAgB,IAAIhlB,WAAW+kB,IAEhD,GAAIzY,GAAOmY,KAAM,CAClB,MAAM,YAAEK,GAAgBxY,GAAOmY,KAC/B,OAAOzkB,WAAWI,KAAK0kB,EAAYC,GACvC,CAEI,MAAM,IAAIhjB,MAAM,oDAExB,EACAkjB,iBAAkBA,IAAMxB,GAAMuT,iBAAiBvT,GAAMqB,YAAYoJ,GAAW,IAC5E9I,aAA+C,IAApCzL,EAAUzX,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGqd,EAAKrd,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG+T,GAAMoD,KACrC,MAAMgM,EAAS9F,IAAUtJ,GAAMoD,KAAOkG,EAAQ,IAAItJ,GAAMsJ,EAAM5J,EAAG4J,EAAM3J,GAGvE,OAFAyP,EAAOxG,eAAelF,GACtB0L,EAAO/K,SAAS6S,IACT9H,CACX,EACAe,OAAQ5C,iBAAuB,QAAA0T,EAAAh1B,UAAA3B,OAAb42B,EAAQ,IAAAhxB,MAAA+wB,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAARD,EAAQC,GAAAl1B,UAAAk1B,GACtB,GAAI9qB,GAAOqY,IAAK,CACZ,MAAMtkB,QAAeiM,GAAOqY,IAAIO,OAAOvX,OAAO,UAAWkS,MAAesX,IACxE,OAAO,IAAIn3B,WAAWK,EAC1B,CACK,GAAIiM,GAAOmY,KAAM,CAClB,MAAM,WAAEU,GAAe7Y,GAAOmY,KACxBhZ,EAAO0Z,EAAW,UAExB,OADAgS,EAASE,SAASrW,GAAMvV,EAAKiC,OAAOsT,KAC7BhhB,WAAWI,KAAKqL,EAAKkC,SAChC,CAEI,MAAM,IAAI5L,MAAM,+CAExB,EACA+yB,WAAYtR,eAAOR,GAAqB,QAAAsU,EAAAp1B,UAAA3B,OAAb42B,EAAQ,IAAAhxB,MAAAmxB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARJ,EAAQI,EAAA,GAAAr1B,UAAAq1B,GAC/B,GAAIjrB,GAAOqY,IAAK,CACZ,MAAM6S,QAAalrB,GAAOqY,IAAIO,OAAOuS,UAAU,MAAOzU,EAAK,CAAErhB,KAAM,OAAQ8J,KAAM,CAAE9J,KAAM,aAAe,EAAO,CAAC,SAC1G8L,EAAUoS,MAAesX,GACzB92B,QAAeiM,GAAOqY,IAAIO,OAAOZ,KAAK,OAAQkT,EAAM/pB,GAC1D,OAAO,IAAIzN,WAAWK,EAC1B,CACK,GAAIiM,GAAOmY,KAAM,CAClB,MAAM,WAAEiT,GAAeprB,GAAOmY,KACxBhZ,EAAOisB,EAAW,SAAU1U,GAElC,OADAmU,EAASE,SAASrW,GAAMvV,EAAKiC,OAAOsT,KAC7BhhB,WAAWI,KAAKqL,EAAKkC,SAChC,CAEI,MAAM,IAAI5L,MAAM,oDAExB,EACA41B,gBAAYx1B,EACZy1B,oBAAgBz1B,EAChB01B,WAAYrU,eAAOrb,GACf,IAAI2vB,EAAOlB,GAAqBzuB,GAChC,QAAahG,IAAT21B,EAAoB,CACpB,MAAMC,QAAatU,GAAM2C,OAAOpmB,WAAWI,KAAK+H,GAAM4T,GAAMA,EAAEic,WAAW,MACzEF,EAAOjY,GAAYkY,EAAMA,GACzBnB,GAAqBzuB,GAAO2vB,CAChC,CAAC,QAAAG,EAAA/1B,UAAA3B,OANsB42B,EAAQ,IAAAhxB,MAAA8xB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARf,EAAQe,EAAA,GAAAh2B,UAAAg2B,GAO/B,OAAOzU,GAAM2C,OAAO0R,KAASX,EACjC,EACAgB,eAAgB,SAAChwB,GACb,GAA2B,oBAAhBosB,GACP,MAAM,IAAI7F,GAAS,+CACvB,IAAIoJ,EAAOlB,GAAqBzuB,GAChC,QAAahG,IAAT21B,EAAoB,CACpB,MAAMC,EAAOxD,GAAYv0B,WAAWI,KAAK+H,GAAM4T,GAAMA,EAAEic,WAAW,MAClEF,EAAOjY,GAAYkY,EAAMA,GACzBnB,GAAqBzuB,GAAO2vB,CAChC,CAAC,QAAAM,EAAAl2B,UAAA3B,OARoB42B,EAAQ,IAAAhxB,MAAAiyB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARlB,EAAQkB,EAAA,GAAAn2B,UAAAm2B,GAS7B,OAAO9D,GAAYuD,KAASX,EAChC,EACAmB,eAAgB1J,IAEpBxtB,OAAOmkB,iBAAiB9B,GAAO,CAC3BkU,WAAY,CACRnS,cAAc,EACdhW,IAAGA,IACQ+kB,GAEXlmB,IAAIoX,GACK8O,KACDA,GAAc9O,EACtB,GAEJmS,eAAgB,CACZpS,cAAc,EACdhW,IAAGA,IACQglB,GAEXnmB,IAAIoX,GACK+O,KACDA,GAAkB/O,EAC1B,KC/qCR8S,GAAAA,WAA2B,kBAAUhkB,EAAOgkB,GAAAA,eAA0Br2B,WAAM,EAE1Cq2B,GAAAA,iBAA3B,MACMC,GAAkBA,KAC7B,MAAMC,EAAgBF,GAAAA,mBAChB1U,EAAYQ,GAAaoU,GACzBC,EAAY,IAAI14B,WAAW,IAGjC,OAFA04B,EAAUrqB,IAAIoqB,GACdC,EAAUrqB,IAAIwV,EAAW,IAClB,CACLA,YACA6U,YACD,EAEUrU,GAAekU,GAAAA,aACrB,SAASI,GAAU9U,GACxB,IAEE,OADA0U,EAAAA,QAAsB1U,GAAW,IAC1B,CACT,CAAE,MACA,OAAO,CACT,CACF,CACO,MAAMS,GAAOA,CAClB7W,EACAirB,IACGH,GAAAA,KAAkB9qB,EAASirB,EAAUvuB,MAAM,EAAG,KACtCqa,GAAS+T,GAAAA,OC3CTK,GAAYrsB,GACnBpM,EAAAA,GAAAA,SAAgBoM,GACXA,EACEA,aAAevM,WACjBG,EAAAA,GAAAA,KAAYoM,EAAIlM,OAAQkM,EAAIjM,WAAYiM,EAAIE,YAE5CtM,EAAAA,GAAAA,KAAYoM,GCJhB,MAAM+b,GACX7nB,YAAYo4B,GACVz3B,OAAOG,OAAO6L,KAAMyrB,EACtB,CAEAr2B,SACE,OAAOrC,EAAAA,GAAAA,MAAY24B,EAAAA,GAAAA,WAAUC,GAAe3rB,MAC9C,CAEA2I,cAAcjJ,GACZ,OAAOksB,EAAAA,GAAAA,aAAYD,GAAe3rB,KAAMN,EAC1C,CAEAiJ,uBAAuBjJ,GACrB,OAAOmsB,EAAAA,GAAAA,sBAAqBF,GAAe3rB,KAAMN,EACnD,EAkBW,MAAAisB,GAAoC,IAAI5Q,WCzB9C,MAKM+Q,GAAoB,GAyBjC,IAAIC,GAAyB,EAE7BC,GAwFO7R,OAAO8R,YArFP,MAAMC,WAAkBhR,GAQ7B7nB,YAAYuI,GAEV,GADAgF,MAAM,CAAC,GAAG,KAPZurB,SAAG,EAZL,SAAyBvwB,GACvB,YAAwC7G,IAAhC6G,EAAwBuwB,GAClC,CAkBQC,CAAgBxwB,GAClBoE,KAAKmsB,IAAMvwB,EAAMuwB,QACZ,CACL,GAAqB,kBAAVvwB,EAAoB,CAE7B,MAAMywB,EAAUC,KAAAA,OAAY1wB,GAC5B,GAAIywB,EAAQl5B,QAAU24B,GACpB,MAAM,IAAIn3B,MAAO,4BAEnBqL,KAAKmsB,IAAM,IAAII,KAAJ,CAAOF,EACpB,MACErsB,KAAKmsB,IAAM,IAAII,KAAJ,CAAO3wB,GAGpB,GAAIoE,KAAKmsB,IAAI9sB,aAAeysB,GAC1B,MAAM,IAAIn3B,MAAO,2BAErB,CACF,CAKAgU,gBACE,MAAMiN,EAAM,IAAIsW,GAAUH,IAE1B,OADAA,IAA0B,EACnB,IAAIG,GAAUtW,EAAI4V,WAC3B,CAWA1iB,OAAO2N,GACL,OAAOzW,KAAKmsB,IAAIK,GAAG/V,EAAU0V,IAC/B,CAKAM,WACE,OAAOH,KAAAA,OAAYtsB,KAAKP,UAC1B,CAEAitB,SACE,OAAO1sB,KAAKysB,UACd,CAKAhtB,UACE,MAAMmgB,EAAM5f,KAAKwrB,WACjB,OAAO,IAAI54B,WAAWgtB,EAAI3sB,OAAQ2sB,EAAI1sB,WAAY0sB,EAAIvgB,WACxD,CAKAmsB,WACE,MAAM74B,EAAIqN,KAAKmsB,IAAIQ,YAAY55B,EAAAA,IAC/B,GAAIJ,EAAEQ,SAAW24B,GACf,OAAOn5B,EAGT,MAAMi6B,EAAU75B,EAAAA,GAAAA,MAAa,IAE7B,OADAJ,EAAE2K,KAAKsvB,EAAS,GAAKj6B,EAAEQ,QAChBy5B,CACT,CAEmCZ,UACjC,MAAoB,aAAAhsB,KAAK9C,aAC3B,CAKAA,WACE,OAAO8C,KAAKysB,UACd,CAQA9jB,4BACEkkB,EACA7E,EACA8E,GAEA,MAAM75B,EAASF,EAAAA,GAAAA,OAAc,CAC3B85B,EAAcrB,WACdz4B,EAAAA,GAAAA,KAAYi1B,GACZ8E,EAAUtB,aAENuB,EAAiB/T,GAAO/lB,GAC9B,OAAO,IAAIi5B,GAAUa,EACvB,CAMApkB,gCACEqkB,EACAF,GAEA,IAAI75B,EAASF,EAAAA,GAAAA,MAAa,GAC1Bi6B,EAAM/C,SAAQ,SAAUjC,GACtB,GAAIA,EAAK70B,OAjKgB,GAkKvB,MAAM,IAAIN,UAAW,4BAEvBI,EAASF,EAAAA,GAAAA,OAAc,CAACE,EAAQu4B,GAASxD,IAC3C,IACA/0B,EAASF,EAAAA,GAAAA,OAAc,CACrBE,EACA65B,EAAUtB,WACVz4B,EAAAA,GAAAA,KAAY,2BAEd,MAAMg6B,EAAiB/T,GAAO/lB,GAC9B,GAAIs4B,GAAUwB,GACZ,MAAM,IAAIp4B,MAAO,kDAEnB,OAAO,IAAIu3B,GAAUa,EACvB,CASApkB,kCACEqkB,EACAF,GAEA,OAAO9sB,KAAKitB,yBAAyBD,EAAOF,EAC9C,CASAnkB,8BACEqkB,EACAF,GAEA,IACII,EADAC,EAAQ,IAEZ,KAAgB,GAATA,GAAY,CACjB,IACE,MAAMC,EAAiBJ,EAAMK,OAAOt6B,EAAAA,GAAAA,KAAY,CAACo6B,KACjDD,EAAUltB,KAAKitB,yBAAyBG,EAAgBN,GACxD,MAAOQ,GACP,GAAIA,aAAez6B,UACjB,MAAMy6B,EAERH,IACA,QACF,CACA,MAAO,CAACD,EAASC,EACnB,CACA,MAAM,IAAIx4B,MAAO,gDACnB,CAQAgU,gCACEqkB,EACAF,GAEA,OAAO9sB,KAAKutB,uBAAuBP,EAAOF,EAC5C,CAKAnkB,iBAAiB6kB,GAEf,OAAOjC,GADQ,IAAIW,GAAUsB,GACL/tB,UAC1B,EA7MWysB,GA2CJuB,QAAqB,IAAIvB,GAAU,oCAqK5CP,GAAc1qB,IAAIirB,GAAW,CAC3BwB,KAAM,SACN70B,OAAQ,CAAC,CAAC,MAAO,WC/P6B,IAAIqzB,GAClD,qDCIWyB,GAAmB,KCPzB,MAAMC,WAAmDj5B,MAG9DtB,YAAYqxB,GACV9jB,MAAO,aAAY8jB,yCAAiD,KAHtEA,eAAS,EAIP1kB,KAAK0kB,UAAYA,CACnB,EAGF1wB,OAAO65B,eACLD,GAA2C15B,UAC3C,OACA,CACE0H,MAAO,+CAIJ,MAAMkyB,WAAuCn5B,MAGlDtB,YAAYqxB,EAAmBqJ,GAC7BntB,MACG,oCAAmCmtB,EAAeC,QACjD,wEAGGtJ,6CACL,KATJA,eAAS,EAUP1kB,KAAK0kB,UAAYA,CACnB,EAGF1wB,OAAO65B,eAAeC,GAA+B55B,UAAW,OAAQ,CACtE0H,MAAO,mCAGF,MAAMqyB,WAA4Ct5B,MAGvDtB,YAAYqxB,GACV9jB,MAAO,aAAY8jB,gDAAwD,KAH7EA,eAAS,EAIP1kB,KAAK0kB,UAAYA,CACnB,EAGF1wB,OAAO65B,eAAeI,GAAoC/5B,UAAW,OAAQ,CAC3E0H,MAAO,wCCvCF,MAAMsyB,GAIX76B,YACE86B,EACAC,GACA,KANFD,uBAAiB,OACjBC,4BAAsB,EAMpBpuB,KAAKmuB,kBAAoBA,EACzBnuB,KAAKouB,uBAAyBA,CAChC,CAEAC,cACE,MAAMA,EAAc,CAACruB,KAAKmuB,mBAK1B,OAJInuB,KAAKouB,yBACPC,EAAY71B,KAAKwH,KAAKouB,uBAAuBE,UAC7CD,EAAY71B,KAAKwH,KAAKouB,uBAAuBG,WAExCF,CACT,CAEAjsB,IAAIosB,GACF,IAAK,MAAMC,KAAczuB,KAAKquB,cAAe,CAC3C,GAAIG,EAAQC,EAAWt7B,OACrB,OAAOs7B,EAAWD,GAElBA,GAASC,EAAWt7B,MAExB,CAEF,CAEIA,aACF,OAAO6M,KAAKquB,cAAcK,OAAOv7B,MACnC,CAEAw7B,oBACEC,GAIA,GAAI5uB,KAAK7M,OAAS07B,IAChB,MAAM,IAAIl6B,MAAM,yDAGlB,MAAMm6B,EAAc,IAAI/T,IACxB/a,KAAKquB,cACFK,OACAzE,SAAQ,CAACrU,EAAK4Y,KACbM,EAAY7tB,IAAI2U,EAAI6W,WAAY+B,EAAM,IAG1C,MAAMO,EAAgBnZ,IACpB,MAAMoZ,EAAWF,EAAY1sB,IAAIwT,EAAI6W,YACrC,QAAiB13B,IAAbi6B,EACF,MAAM,IAAIr6B,MACR,qEAEJ,OAAOq6B,CAAQ,EAGjB,OAAOJ,EAAa7pB,KAAKkqB,IAChB,CACLC,eAAgBH,EAAaE,EAAYnC,WACzCqC,kBAAmBF,EAAYrS,KAAK7X,KAAIqqB,GACtCL,EAAaK,EAAKC,UAEpB3vB,KAAMuvB,EAAYvvB,QAGxB,ECrEK,MAAM+W,GAAY,WAAoC,IAAnCljB,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,YAC3C,OAAOw6B,GAAAA,GAAkB,GAAI/7B,EAC/B,EAKamxB,GAAY,WAAoC,IAAnCnxB,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,YAC3C,OAAOw6B,GAAAA,GAAkB,GAAI/7B,EAC/B,EA6Bag8B,GAAa,WAEQ,IADhCh8B,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,SAEnB,MAAM06B,EAAMF,GAAAA,GAOV,CACEA,GAAAA,GAAiB,UACjBA,GAAAA,GAAiB,iBACjBA,GAAAA,GAAkBA,GAAAA,GAAoBA,GAAAA,MAAqB,GAAI,UAEjE/7B,GAEIk8B,EAAUD,EAAIx6B,OAAOuF,KAAKi1B,GAC1BE,EAAUF,EAAIp6B,OAAOmF,KAAKi1B,GAE1BG,EAAUH,EAsBhB,OApBAG,EAAQ36B,OAAS,CAACrC,EAAeiB,IAClB67B,EAAQ98B,EAAGiB,GACL,MAAEsJ,WAGvByyB,EAAQv6B,OAAS,CAACuK,EAAahN,EAAeiB,KAC5C,MAAM8L,EAAO,CACXkwB,MAAO78B,EAAAA,GAAAA,KAAY4M,EAAK,SAE1B,OAAO+vB,EAAQhwB,EAAM/M,EAAGiB,EAAO,EAGjC+7B,EAAQE,MAASlwB,GAEb2vB,GAAAA,KAAmBh8B,KACnBg8B,GAAAA,KAAmBh8B,KACnBP,EAAAA,GAAAA,KAAY4M,EAAK,QAAQxM,OAItBw8B,CACT,EAyEO,SAASG,GAAS9V,EAAWnhB,GAClC,MAAMk3B,EAAgB5hB,IACpB,GAAIA,EAAK7a,MAAQ,EACf,OAAO6a,EAAK7a,KACP,GAA0B,oBAAf6a,EAAK0hB,MACrB,OAAO1hB,EAAK0hB,MAAMh3B,EAAOsV,EAAK5a,WACzB,GAAI,UAAW4a,GAAQ,kBAAmBA,EAAM,CACrD,MAAM6hB,EAAQn3B,EAAOsV,EAAK5a,UAC1B,GAAIwF,MAAMC,QAAQg3B,GAChB,OAAOA,EAAM78B,OAAS48B,EAAa5hB,EAAK/V,cAE5C,MAAO,GAAI,WAAY+V,EAErB,OAAO2hB,GAAS,CAACv6B,OAAQ4Y,GAAOtV,EAAOsV,EAAK5a,WAG9C,OAAO,CAAC,EAGV,IAAIs8B,EAAQ,EAKZ,OAJA7V,EAAKzkB,OAAOsD,OAAOoxB,SAAS9b,IAC1B0hB,GAASE,EAAa5hB,EAAK,IAGtB0hB,CACT,CC3LO,SAASI,GAAanyB,GAC3B,IAAIiD,EAAM,EACNmvB,EAAO,EACX,OAAS,CACP,IAAIC,EAAOryB,EAAMpE,QAGjB,GAFAqH,IAAe,IAAPovB,IAAwB,EAAPD,EACzBA,GAAQ,EACc,KAAV,IAAPC,GACH,KAEJ,CACA,OAAOpvB,CACT,CAEO,SAASqvB,GAAatyB,EAAsBiD,GACjD,IAAIsvB,EAAUtvB,EACd,OAAS,CACP,IAAIovB,EAAiB,IAAVE,EAEX,GADAA,IAAY,EACG,GAAXA,EAAc,CAChBvyB,EAAMtF,KAAK23B,GACX,KACF,CACEA,GAAQ,IACRryB,EAAMtF,KAAK23B,EAEf,CACF,CC3Be,SAAAhyB,GACb+P,EACA7N,GAEA,IAAK6N,EACH,MAAM,IAAIvZ,MAAM0L,GAAW,mBAE/B,CCQO,MAAMiwB,GAIXj9B,YAAYk9B,EAAkBC,GAAwB,KAHtDD,WAAK,OACLC,gBAAU,EAGRxwB,KAAKuwB,MAAQA,EACbvwB,KAAKwwB,WAAaA,CACpB,CAEA7nB,eACEimB,EACA2B,GAEA,MAAMC,EAAyB,IAAIzV,IAC7B0V,EAAsBpB,IAC1B,MAAMnC,EAAUmC,EAAO5C,WACvB,IAAIiE,EAAUF,EAAWpuB,IAAI8qB,GAS7B,YARgBn4B,IAAZ27B,IACFA,EAAU,CACRC,UAAU,EACVC,YAAY,EACZC,WAAW,GAEbL,EAAWvvB,IAAIisB,EAASwD,IAEnBA,CAAO,EAGVI,EAAeL,EAAmBF,GACxCO,EAAaH,UAAW,EACxBG,EAAaF,YAAa,EAE1B,IAAK,MAAMG,KAAMnC,EAAc,CAC7B6B,EAAmBM,EAAGjE,WAAW+D,WAAY,EAC7C,IAAK,MAAMG,KAAeD,EAAGnU,KAAM,CACjC,MAAM8T,EAAUD,EAAmBO,EAAY3B,QAC/CqB,EAAQC,WAARD,EAAQC,SAAaK,EAAYL,UACjCD,EAAQE,aAARF,EAAQE,WAAeI,EAAYJ,WACrC,CACF,CAEA,OAAO,IAAIN,GAAaC,EAAOC,EACjC,CAEAS,uBACE,MAAMC,EAAa,IAAIlxB,KAAKwwB,WAAW3V,WACvC1c,GAAO+yB,EAAW/9B,QAAU,IAAK,2CAEjC,MAAMg+B,EAAkBD,EAAWE,QACjCC,IAAA,IAAE,CAAEjC,GAAKiC,EAAA,OAAKjC,EAAKuB,UAAYvB,EAAKwB,UAAU,IAE1CU,EAAkBJ,EAAWE,QACjCG,IAAA,IAAE,CAAEnC,GAAKmC,EAAA,OAAKnC,EAAKuB,WAAavB,EAAKwB,UAAU,IAE3CY,EAAqBN,EAAWE,QACpCK,IAAA,IAAE,CAAErC,GAAKqC,EAAA,OAAMrC,EAAKuB,UAAYvB,EAAKwB,UAAU,IAE3Cc,EAAqBR,EAAWE,QACpCO,IAAA,IAAE,CAAEvC,GAAKuC,EAAA,OAAMvC,EAAKuB,WAAavB,EAAKwB,UAAU,IAG5CvM,EAAwB,CAC5BuN,sBAAuBT,EAAgBh+B,OAASm+B,EAAgBn+B,OAChE0+B,0BAA2BP,EAAgBn+B,OAC3C2+B,4BAA6BJ,EAAmBv+B,QAIlD,CACEgL,GACEgzB,EAAgBh+B,OAAS,EACzB,6CAEF,MAAO4+B,GAAgBZ,EAAgB,GACvChzB,GACE4zB,IAAiB/xB,KAAKuwB,MAAM9D,WAC5B,yDAEJ,CASA,MAAO,CAACpI,EAPkB,IACrB8M,EAAgBpsB,KAAIitB,IAAA,IAAE9E,GAAQ8E,EAAA,OAAK,IAAI9F,GAAUgB,EAAQ,OACzDoE,EAAgBvsB,KAAIktB,IAAA,IAAE/E,GAAQ+E,EAAA,OAAK,IAAI/F,GAAUgB,EAAQ,OACzDsE,EAAmBzsB,KAAImtB,IAAA,IAAEhF,GAAQgF,EAAA,OAAK,IAAIhG,GAAUgB,EAAQ,OAC5DwE,EAAmB3sB,KAAIotB,IAAA,IAAEjF,GAAQiF,EAAA,OAAK,IAAIjG,GAAUgB,EAAQ,KAInE,CAEAkF,mBACEC,GAEA,MAAOC,EAAiBC,GACtBvyB,KAAKwyB,4BACHH,EAAYlwB,MAAMswB,WAClB/B,IACGA,EAAQC,WAAaD,EAAQG,WAAaH,EAAQE,cAElD8B,EAAiBC,GACtB3yB,KAAKwyB,4BACHH,EAAYlwB,MAAMswB,WAClB/B,IACGA,EAAQC,WAAaD,EAAQG,YAAcH,EAAQE,aAI1D,GAA+B,IAA3B0B,EAAgBn/B,QAA2C,IAA3Bu/B,EAAgBv/B,OAIpD,MAAO,CACL,CACEy/B,WAAYP,EAAYzc,IACxB0c,kBACAI,mBAEF,CACEpE,SAAUiE,EACVhE,SAAUoE,GAGhB,CAGQH,4BACNK,EACAC,GAEA,MAAMC,EAAqB,IAAIh6B,MACzBi6B,EAAc,IAAIj6B,MAExB,IAAK,MAAOm0B,EAASwD,KAAY1wB,KAAKwwB,WAAW3V,UAC/C,GAAIiY,EAAcpC,GAAU,CAC1B,MAAM9a,EAAM,IAAIsW,GAAUgB,GACpB+F,EAAmBJ,EAAmBK,WAAUC,GACpDA,EAAMrqB,OAAO8M,KAEXqd,GAAoB,IACtB90B,GAAO80B,EAAmB,IAAK,mCAC/BF,EAAmBv6B,KAAKy6B,GACxBD,EAAYx6B,KAAKod,GACjB5V,KAAKwwB,WAAW9e,OAAOwb,GAE3B,CAGF,MAAO,CAAC6F,EAAoBC,EAC9B,ECzGK,MAAMI,GAWX//B,YAAYggC,GAAmB,KAV/BhP,YAAM,OACNiP,iBAAW,OACXC,qBAAe,OACf3E,kBAAY,OAEJ4E,kBAA4C,IAAIzY,IAMtD/a,KAAKqkB,OAASgP,EAAKhP,OACnBrkB,KAAKszB,YAAcD,EAAKC,YAAYvuB,KAAI0uB,GAAW,IAAIvH,GAAUuH,KACjEzzB,KAAKuzB,gBAAkBF,EAAKE,gBAC5BvzB,KAAK4uB,aAAeyE,EAAKzE,aACzB5uB,KAAK4uB,aAAa3E,SAAQ8G,GACxB/wB,KAAKwzB,kBAAkBvyB,IACrB8vB,EAAG7B,eACHlvB,KAAKszB,YAAYvC,EAAG7B,kBAG1B,CAEIwE,cACF,MAAO,QACT,CAEIvF,wBACF,OAAOnuB,KAAKszB,WACd,CAEIK,2BACF,OAAO3zB,KAAK4uB,aAAa7pB,KACtBgsB,IAAE,CACD7B,eAAgB6B,EAAG7B,eACnBC,kBAAmB4B,EAAG6C,SACtBl0B,KAAM4sB,KAAAA,OAAYyE,EAAGrxB,SAG3B,CAEIm0B,0BACF,MAAO,EACT,CAEAC,iBACE,OAAO,IAAI5F,GAAmBluB,KAAKmuB,kBACrC,CAEAxlB,eAAe0qB,GACb,MAAMU,EAAezD,GAAa0D,QAAQX,EAAKzE,aAAcyE,EAAKY,WAC3D5P,EAAQ8J,GAAqB4F,EAAa9C,uBAE3CrC,EADc,IAAIV,GAAmBC,GACVQ,oBAAoB0E,EAAKzE,cAAc7pB,KACrEgsB,IAA8B,CAC7B7B,eAAgB6B,EAAG7B,eACnB0E,SAAU7C,EAAG5B,kBACbzvB,KAAM4sB,KAAAA,OAAYyE,EAAGrxB,UAGzB,OAAO,IAAI0zB,GAAQ,CACjB/O,SACAiP,YAAanF,EACboF,gBAAiBF,EAAKE,gBACtB3E,gBAEJ,CAEAsF,gBAAgB1F,GACd,OAAOA,EAAQxuB,KAAKqkB,OAAOuN,qBAC7B,CAEAuC,kBAAkB3F,GAChB,MAAM4F,EAAoBp0B,KAAKqkB,OAAOuN,sBACtC,GAAIpD,GAASxuB,KAAKqkB,OAAOuN,sBAAuB,CAK9C,OAJ6BpD,EAAQ4F,EACTp0B,KAAKszB,YAAYngC,OAASihC,EAE9Bp0B,KAAKqkB,OAAOyN,2BAEtC,CAGE,OAAOtD,EADL4F,EAAoBp0B,KAAKqkB,OAAOwN,yBAGtC,CAEAwC,YAAY7F,GACV,OAAOxuB,KAAKwzB,kBAAkBc,IAAI9F,EACpC,CAEA+F,aACE,MAAO,IAAIv0B,KAAKwzB,kBAAkBn/B,SACpC,CAEAmgC,gBACE,OAAOx0B,KAAKszB,YAAYlC,QAAO,CAACqD,EAAGjG,KAAWxuB,KAAKq0B,YAAY7F,IACjE,CAEA9C,YACE,MAAMgJ,EAAU10B,KAAKszB,YAAYngC,OAEjC,IAAIwhC,EAAqB,GACzBvE,GAAsBuE,EAAUD,GAEhC,MAAM9F,EAAe5uB,KAAK4uB,aAAa7pB,KAAIkqB,IACzC,MAAM,SAAC2E,EAAQ,eAAE1E,GAAkBD,EAC7BvvB,EAAO3G,MAAM/F,KAAKs5B,KAAAA,OAAY2C,EAAYvvB,OAEhD,IAAIk1B,EAA4B,GAChCxE,GAAsBwE,EAAiBhB,EAASzgC,QAEhD,IAAI0hC,EAAsB,GAG1B,OAFAzE,GAAsByE,EAAWn1B,EAAKvM,QAE/B,CACL+7B,iBACA0F,gBAAiB7hC,EAAAA,GAAAA,KAAY6hC,GAC7BE,WAAYlB,EACZmB,WAAYhiC,EAAAA,GAAAA,KAAY8hC,GACxBn1B,OACD,IAGH,IAAIs1B,EAA6B,GACjC5E,GAAsB4E,EAAkBpG,EAAaz7B,QACrD,IAAI8hC,EAAoBliC,EAAAA,GAAAA,MAAa46B,IACrC56B,EAAAA,GAAAA,KAAYiiC,GAAkB13B,KAAK23B,GACnC,IAAIC,EAA0BF,EAAiB7hC,OAE/Cy7B,EAAa3E,SAAQgF,IACnB,MA2BM97B,EA3BoBm8B,GAAAA,GAQxB,CACAA,GAAAA,GAAgB,kBAEhBA,GAAAA,GACEL,EAAY2F,gBAAgBzhC,OAC5B,mBAEFm8B,GAAAA,GACEA,GAAAA,GAAgB,YAChBL,EAAY6F,WAAW3hC,OACvB,cAEFm8B,GAAAA,GAAkBL,EAAY8F,WAAW5hC,OAAQ,cACjDm8B,GAAAA,GACEA,GAAAA,GAAgB,aAChBL,EAAYvvB,KAAKvM,OACjB,UAG6BiC,OAC/B65B,EACAgG,EACAC,GAEFA,GAA2B/hC,CAAM,IAEnC8hC,EAAoBA,EAAkBl4B,MAAM,EAAGm4B,GAE/C,MAAMC,EAAiB7F,GAAAA,GASrB,CACAA,GAAAA,GAAkB,EAAG,yBACrBA,GAAAA,GAAkB,EAAG,6BACrBA,GAAAA,GAAkB,EAAG,+BACrBA,GAAAA,GAAkBqF,EAASxhC,OAAQ,YACnCm8B,GAAAA,GAAiB7Y,GAAiB,OAAQie,EAAS,QACnDje,GAAiB,qBAGb2e,EAAc,CAClBxD,sBAAuB7+B,EAAAA,GAAAA,KAAY,CAACiN,KAAKqkB,OAAOuN,wBAChDC,0BAA2B9+B,EAAAA,GAAAA,KAAY,CACrCiN,KAAKqkB,OAAOwN,4BAEdC,4BAA6B/+B,EAAAA,GAAAA,KAAY,CACvCiN,KAAKqkB,OAAOyN,8BAEd6C,SAAU5hC,EAAAA,GAAAA,KAAY4hC,GACtB/X,KAAM5c,KAAKszB,YAAYvuB,KAAI6Q,GAAO4V,GAAS5V,EAAInW,aAC/C8zB,gBAAiBjH,KAAAA,OAAYtsB,KAAKuzB,kBAGpC,IAAI8B,EAAWtiC,EAAAA,GAAAA,MAAa,MAC5B,MAAMI,EAASgiC,EAAe//B,OAAOggC,EAAaC,GAElD,OADAJ,EAAkB33B,KAAK+3B,EAAUliC,GAC1BkiC,EAASt4B,MAAM,EAAG5J,EAAS8hC,EAAkB9hC,OACtD,CAKAwV,YAAY1V,GAEV,IAAIqiC,EAAY,IAAIriC,GAEpB,MAAM2+B,EAAwB0D,EAAU57B,QACxC,GACEk4B,KPvQ6B,IOwQ5BA,GAED,MAAM,IAAIj9B,MACR,+EAIJ,MAAMk9B,EAA4ByD,EAAU57B,QACtCo4B,EAA8BwD,EAAU57B,QAExC67B,EAAetF,GAAsBqF,GAC3C,IAAIhC,EAAc,GAClB,IAAK,IAAI/6B,EAAI,EAAGA,EAAIg9B,EAAch9B,IAAK,CACrC,MAAMk7B,EAAU6B,EAAUv4B,MAAM,EAAG+uB,IACnCwJ,EAAYA,EAAUv4B,MAAM+uB,IAC5BwH,EAAY96B,KAAK,IAAI0zB,GAAUn5B,EAAAA,GAAAA,KAAY0gC,IAC7C,CAEA,MAAMF,EAAkB+B,EAAUv4B,MAAM,EAAG+uB,IAC3CwJ,EAAYA,EAAUv4B,MAAM+uB,IAE5B,MAAMkJ,EAAmB/E,GAAsBqF,GAC/C,IAAI1G,EAAsC,GAC1C,IAAK,IAAIr2B,EAAI,EAAGA,EAAIy8B,EAAkBz8B,IAAK,CACzC,MAAM22B,EAAiBoG,EAAU57B,QAC3B67B,EAAetF,GAAsBqF,GACrC1B,EAAW0B,EAAUv4B,MAAM,EAAGw4B,GACpCD,EAAYA,EAAUv4B,MAAMw4B,GAC5B,MAAMR,EAAa9E,GAAsBqF,GACnCE,EAAYF,EAAUv4B,MAAM,EAAGg4B,GAC/Br1B,EAAO4sB,KAAAA,OAAYv5B,EAAAA,GAAAA,KAAYyiC,IACrCF,EAAYA,EAAUv4B,MAAMg4B,GAC5BnG,EAAap2B,KAAK,CAChB02B,iBACA0E,WACAl0B,QAEJ,CAEA,MAAM+1B,EAAc,CAClBpR,OAAQ,CACNuN,wBACAC,4BACAC,+BAEFyB,gBAAiBjH,KAAAA,OAAYv5B,EAAAA,GAAAA,KAAYwgC,IACzCD,cACA1E,gBAGF,OAAO,IAAIwE,GAAQqC,EACrB,EClRK,MAAMC,GAOXriC,YAAYggC,GAAqB,KANjChP,YAAM,OACN8J,uBAAiB,OACjBoF,qBAAe,OACfI,0BAAoB,OACpBE,yBAAmB,EAGjB7zB,KAAKqkB,OAASgP,EAAKhP,OACnBrkB,KAAKmuB,kBAAoBkF,EAAKlF,kBAC9BnuB,KAAKuzB,gBAAkBF,EAAKE,gBAC5BvzB,KAAK2zB,qBAAuBN,EAAKM,qBACjC3zB,KAAK6zB,oBAAsBR,EAAKQ,mBAClC,CAEIH,cACF,OAAO,CACT,CAEIiC,gCACF,IAAIt9B,EAAQ,EACZ,IAAK,MAAMu9B,KAAU51B,KAAK6zB,oBACxBx7B,GAASu9B,EAAOlD,gBAAgBv/B,OAASyiC,EAAOtD,gBAAgBn/B,OAElE,OAAOkF,CACT,CAEAy7B,eAAeT,GACb,IAAIjF,EACJ,GACEiF,GACA,2BAA4BA,GAC5BA,EAAKjF,uBACL,CACA,GACEpuB,KAAK21B,2BACLtC,EAAKjF,uBAAuBE,SAASn7B,OACnCkgC,EAAKjF,uBAAuBG,SAASp7B,OAEvC,MAAM,IAAIwB,MACR,+FAGJy5B,EAAyBiF,EAAKjF,4BACzB,GACLiF,GACA,+BAAgCA,GAChCA,EAAKwC,2BAELzH,EAAyBpuB,KAAK81B,2BAC5BzC,EAAKwC,iCAEF,GAAI71B,KAAK6zB,oBAAoB1gC,OAAS,EAC3C,MAAM,IAAIwB,MACR,8EAGJ,OAAO,IAAIu5B,GACTluB,KAAKmuB,kBACLC,EAEJ,CAEA8F,gBAAgB1F,GACd,OAAOA,EAAQxuB,KAAKqkB,OAAOuN,qBAC7B,CAEAuC,kBAAkB3F,GAChB,MAAM4F,EAAoBp0B,KAAKqkB,OAAOuN,sBAChCmE,EAAuB/1B,KAAKmuB,kBAAkBh7B,OACpD,GAAIq7B,GAASuH,EAAsB,CAMjC,OAL+BvH,EAAQuH,EACF/1B,KAAK6zB,oBAAoBn7B,QAC5D,CAACL,EAAOu9B,IAAWv9B,EAAQu9B,EAAOtD,gBAAgBn/B,QAClD,GAGG,GAAIq7B,GAASxuB,KAAKqkB,OAAOuN,sBAAuB,CAKrD,OAJ6BpD,EAAQ4F,EACT2B,EAAuB3B,EAE3Bp0B,KAAKqkB,OAAOyN,2BAEtC,CAGE,OAAOtD,EADL4F,EAAoBp0B,KAAKqkB,OAAOwN,yBAGtC,CAEAiE,2BACED,GAEA,MAAMzH,EAAiD,CACrDE,SAAU,GACVC,SAAU,IAGZ,IAAK,MAAMyH,KAAeh2B,KAAK6zB,oBAAqB,CAClD,MAAMoC,EAAeJ,EAA2BK,MAAKzC,GACnDA,EAAQ7d,IAAI9M,OAAOktB,EAAYpD,cAEjC,IAAKqD,EACH,MAAM,IAAIthC,MACqD,6DAAAqhC,EAAYpD,WAAWnG,cAIxF,IAAK,MAAM+B,KAASwH,EAAY1D,gBAAiB,CAC/C,KAAI9D,EAAQyH,EAAa9zB,MAAMswB,UAAUt/B,QAKvC,MAAM,IAAIwB,MACP,oCAAmC65B,6BAAiCwH,EAAYpD,WAAWnG,cAL9F2B,EAAuBE,SAAS91B,KAC9By9B,EAAa9zB,MAAMswB,UAAUjE,GAOnC,CAEA,IAAK,MAAMA,KAASwH,EAAYtD,gBAAiB,CAC/C,KAAIlE,EAAQyH,EAAa9zB,MAAMswB,UAAUt/B,QAKvC,MAAM,IAAIwB,MACP,oCAAmC65B,6BAAiCwH,EAAYpD,WAAWnG,cAL9F2B,EAAuBG,SAAS/1B,KAC9By9B,EAAa9zB,MAAMswB,UAAUjE,GAOnC,CACF,CAEA,OAAOJ,CACT,CAEAzlB,eAAe0qB,GACb,MAAMU,EAAezD,GAAa0D,QAAQX,EAAKzE,aAAcyE,EAAKY,UAE5DJ,EAAsB,IAAI96B,MAC1Bq1B,EAAiD,CACrDE,SAAU,IAAIv1B,MACdw1B,SAAU,IAAIx1B,OAEVo9B,EAAsB9C,EAAKwC,4BAA8B,GAC/D,IAAK,MAAMxD,KAAe8D,EAAqB,CAC7C,MAAMC,EAAgBrC,EAAa3B,mBAAmBC,GACtD,QAAsBt9B,IAAlBqhC,EAA6B,CAC/B,MAAOC,GAAoB,SAAC/H,EAAQ,SAAEC,IAAa6H,EACnDvC,EAAoBr7B,KAAK69B,GACzBjI,EAAuBE,SAAS91B,QAAQ81B,GACxCF,EAAuBG,SAAS/1B,QAAQ+1B,EAC1C,CACF,CAEA,MAAOlK,EAAQ8J,GAAqB4F,EAAa9C,uBAK3C0C,EAJc,IAAIzF,GACtBC,EACAC,GAEuCO,oBACvC0E,EAAKzE,cAEP,OAAO,IAAI8G,GAAU,CACnBrR,SACA8J,oBACAoF,gBAAiBF,EAAKE,gBACtBI,uBACAE,uBAEJ,CAEAnI,YACE,MAAM4K,EAAiCv9B,QACvCq3B,GACEkG,EACAt2B,KAAKmuB,kBAAkBh7B,QAGzB,MAAMojC,EAAyBv2B,KAAKw2B,wBAC9BC,EAA4B19B,QAClCq3B,GACEqG,EACAz2B,KAAK2zB,qBAAqBxgC,QAG5B,MAAMujC,EAAgC12B,KAAK22B,+BACrCC,EAAmC79B,QACzCq3B,GACEwG,EACA52B,KAAK6zB,oBAAoB1gC,QAG3B,MAAM0jC,EAAgBvH,GAAAA,GAUnB,CACDA,GAAAA,GAAgB,UAChBA,GAAAA,GACE,CACEA,GAAAA,GAAgB,yBAChBA,GAAAA,GAAgB,6BAChBA,GAAAA,GAAgB,gCAElB,UAEFA,GAAAA,GACEgH,EAA+BnjC,OAC/B,2BAEFm8B,GAAAA,GACE7Y,KACAzW,KAAKmuB,kBAAkBh7B,OACvB,qBAEFsjB,GAAiB,mBACjB6Y,GAAAA,GAAkBmH,EAA0BtjC,OAAQ,sBACpDm8B,GAAAA,GACEiH,EAAuBpjC,OACvB,0BAEFm8B,GAAAA,GACEsH,EAAiCzjC,OACjC,6BAEFm8B,GAAAA,GACEoH,EAA8BvjC,OAC9B,mCAIE2jC,EAAoB,IAAIlkC,WAAW+6B,IAEnCoJ,EAA0BF,EAAczhC,OAC5C,CACE4gB,OAH6B,IAI7BqO,OAAQrkB,KAAKqkB,OACb2S,wBAAyB,IAAIpkC,WAAW0jC,GACxCnI,kBAAmBnuB,KAAKmuB,kBAAkBppB,KAAI6Q,GAAOA,EAAInW,YACzD8zB,gBAAiBjH,KAAAA,OAAYtsB,KAAKuzB,iBAClC0D,mBAAoB,IAAIrkC,WAAW6jC,GACnCF,yBACAW,0BAA2B,IAAItkC,WAC7BgkC,GAEFF,iCAEFI,GAEF,OAAOA,EAAkB/5B,MAAM,EAAGg6B,EACpC,CAEQP,wBACN,IAAIW,EAAmB,EACvB,MAAMZ,EAAyB,IAAI3jC,WAAW+6B,IAC9C,IAAK,MAAMsB,KAAejvB,KAAK2zB,qBAAsB,CACnD,MAAMyD,EAAiCr+B,QACvCq3B,GACEgH,EACAnI,EAAYE,kBAAkBh8B,QAGhC,MAAMkkC,EAAoBt+B,QAC1Bq3B,GAAsBiH,EAAmBpI,EAAYvvB,KAAKvM,QAuB1DgkC,GArB0B7H,GAAAA,GAMvB,CACDA,GAAAA,GAAgB,kBAChBA,GAAAA,GACE8H,EAA+BjkC,OAC/B,kCAEFm8B,GAAAA,GACEA,GAAAA,KACAL,EAAYE,kBAAkBh8B,OAC9B,qBAEFm8B,GAAAA,GAAkB+H,EAAkBlkC,OAAQ,qBAC5Cm8B,GAAAA,GAAkBL,EAAYvvB,KAAKvM,OAAQ,UAGPiC,OACpC,CACE85B,eAAgBD,EAAYC,eAC5BkI,+BAAgC,IAAIxkC,WAClCwkC,GAEFjI,kBAAmBF,EAAYE,kBAC/BkI,kBAAmB,IAAIzkC,WAAWykC,GAClC33B,KAAMuvB,EAAYvvB,MAEpB62B,EACAY,EAEJ,CAEA,OAAOZ,EAAuBx5B,MAAM,EAAGo6B,EACzC,CAEQR,+BACN,IAAIQ,EAAmB,EACvB,MAAMT,EAAgC,IAAI9jC,WAAW+6B,IACrD,IAAK,MAAMiI,KAAU51B,KAAK6zB,oBAAqB,CAC7C,MAAMyD,EAA+Bv+B,QACrCq3B,GACEkH,EACA1B,EAAOtD,gBAAgBn/B,QAGzB,MAAMokC,EAA+Bx+B,QACrCq3B,GACEmH,EACA3B,EAAOlD,gBAAgBv/B,QA+BzBgkC,GA5BiC7H,GAAAA,GAM9B,CACD7Y,GAAiB,cACjB6Y,GAAAA,GACEgI,EAA6BnkC,OAC7B,gCAEFm8B,GAAAA,GACEA,GAAAA,KACAsG,EAAOtD,gBAAgBn/B,OACvB,mBAEFm8B,GAAAA,GACEiI,EAA6BpkC,OAC7B,gCAEFm8B,GAAAA,GACEA,GAAAA,KACAsG,EAAOlD,gBAAgBv/B,OACvB,qBAIyCiC,OAC3C,CACEw9B,WAAYgD,EAAOhD,WAAWnzB,UAC9B63B,6BAA8B,IAAI1kC,WAChC0kC,GAEFhF,gBAAiBsD,EAAOtD,gBACxBiF,6BAA8B,IAAI3kC,WAChC2kC,GAEF7E,gBAAiBkD,EAAOlD,iBAE1BgE,EACAS,EAEJ,CAEA,OAAOT,EAA8B35B,MAAM,EAAGo6B,EAChD,CAEAxuB,mBAAmBmuB,GACjB,IAAIxB,EAAY,IAAIwB,GAEpB,MAAM9gB,EAASsf,EAAU57B,QACnB89B,ERpayB,IQoaVxhB,EACrB7X,GACE6X,IAAWwhB,EACV,0DAIHr5B,GACc,IAFEq5B,EAGiD,+DAHjDA,KAMhB,MAAMnT,EAAwB,CAC5BuN,sBAAuB0D,EAAU57B,QACjCm4B,0BAA2ByD,EAAU57B,QACrCo4B,4BAA6BwD,EAAU57B,SAGnCy0B,EAAoB,GACpB6I,EAA0B/G,GAAsBqF,GACtD,IAAK,IAAI/8B,EAAI,EAAGA,EAAIy+B,EAAyBz+B,IAC3C41B,EAAkB31B,KAChB,IAAI0zB,GAAUoJ,EAAUmC,OAAO,EAAG3L,MAItC,MAAMyH,EAAkBjH,KAAAA,OAAYgJ,EAAUmC,OAAO,EAAG3L,KAElDkJ,EAAmB/E,GAAsBqF,GACzC3B,EAAqD,GAC3D,IAAK,IAAIp7B,EAAI,EAAGA,EAAIy8B,EAAkBz8B,IAAK,CACzC,MAAM22B,EAAiBoG,EAAU57B,QAC3Bg+B,EAA0BzH,GAAsBqF,GAChDnG,EAAoBmG,EAAUmC,OAAO,EAAGC,GACxC3C,EAAa9E,GAAsBqF,GACnC51B,EAAO,IAAI9M,WAAW0iC,EAAUmC,OAAO,EAAG1C,IAChDpB,EAAqBn7B,KAAK,CACxB02B,iBACAC,oBACAzvB,QAEJ,CAEA,MAAMi4B,EAA2B1H,GAAsBqF,GACjDzB,EAAmD,GACzD,IAAK,IAAIt7B,EAAI,EAAGA,EAAIo/B,EAA0Bp/B,IAAK,CACjD,MAAMq6B,EAAa,IAAI1G,GAAUoJ,EAAUmC,OAAO,EAAG3L,KAC/C8L,EAAwB3H,GAAsBqF,GAC9ChD,EAAkBgD,EAAUmC,OAAO,EAAGG,GACtCC,EAAwB5H,GAAsBqF,GAC9C5C,EAAkB4C,EAAUmC,OAAO,EAAGI,GAC5ChE,EAAoBr7B,KAAK,CACvBo6B,aACAN,kBACAI,mBAEJ,CAEA,OAAO,IAAIgD,GAAU,CACnBrR,SACA8J,oBACAoF,kBACAI,uBACAE,uBAEJ,ECxeK,MAAMiE,GAAmB,CAC9BC,0BAA0BjB,GACxB,MAAM9gB,EAAS8gB,EAAkB,GAC3BU,ETAyB,ISAVxhB,EAGrB,OAAIwhB,IAAiBxhB,EACZ,SAIFwhB,GAGT5L,YAAckL,IACZ,MAAMpD,EACJoE,GAAiBC,0BAA0BjB,GAC7C,GAAgB,WAAZpD,EACF,OAAON,GAAQpgC,KAAK8jC,GAGtB,GAAgB,IAAZpD,EACF,OAAOgC,GAAU9J,YAAYkL,GAE7B,MAAM,IAAIniC,MACuB,+BAAA++B,qCAEnC,GCbJ,IAAkBsE,IAOlB,SAPkBA,GAAAA,EAAAA,EAAiB,+CAAjBA,EAAAA,EAAiB,yBAAjBA,EAAAA,EAAiB,yBAAjBA,EAAAA,EAAiB,gCAAjB,CAOlB,CAPkBA,KAAAA,GAAiB,KAUnC,MAAMC,GAAoBllC,EAAAA,GAAAA,MVnBe,IUmByBwO,KAAK,GAiDhE,MAAM22B,GAiBX7kC,YAAYisB,GAAwC,KAZpD1C,UAAI,OAKJkQ,eAAS,OAKTptB,KAAe3M,EAAAA,GAAAA,MAAa,GAG1BiN,KAAK8sB,UAAYxN,EAAKwN,UACtB9sB,KAAK4c,KAAO0C,EAAK1C,KACb0C,EAAK5f,OACPM,KAAKN,KAAO4f,EAAK5f,KAErB,CAKAgtB,SACE,MAAO,CACL9P,KAAM5c,KAAK4c,KAAK7X,KAAIozB,IAAA,IAAC,OAAC9I,EAAM,SAAEsB,EAAQ,WAAEC,GAAWuH,EAAA,MAAM,CACvD9I,OAAQA,EAAO3C,SACfiE,WACAC,aACD,IACD9D,UAAW9sB,KAAK8sB,UAAUJ,SAC1BhtB,KAAM,IAAIM,KAAKN,MAEnB,EAqFK,MAAM04B,GAUP1T,gBACF,OAAI1kB,KAAKq4B,WAAWllC,OAAS,EACpB6M,KAAKq4B,WAAW,GAAG3T,UAErB,IACT,CA8DArxB,YACEisB,GAKA,GADA,KA7EF+Y,WAAyC,GAAE,KAe3CC,cAAQ,OAKR1J,aAA8C,GAAE,KAKhD2E,qBAAe,OAKfgF,0BAAoB,OAMpBC,eAAS,OASTC,yBAAmB,OAKnBC,cAAQ,OAKRC,WAAK,EAuBErZ,EASL,GANIA,EAAKgZ,WACPt4B,KAAKs4B,SAAWhZ,EAAKgZ,UAEnBhZ,EAAK+Y,aACPr4B,KAAKq4B,WAAa/Y,EAAK+Y,YAErBrkC,OAAOE,UAAU2G,eAAeC,KAAKwkB,EAAM,aAAc,CAC3D,MAAM,eAACsZ,EAAc,UAAEJ,GAAalZ,EACpCtf,KAAKy4B,oBAAsBG,EAC3B54B,KAAKw4B,UAAYA,CACnB,MAAO,GACLxkC,OAAOE,UAAU2G,eAAeC,KAAKwkB,EAAM,wBAC3C,CACA,MAAM,UAACuZ,EAAS,qBAAEN,GAChBjZ,EACFtf,KAAKuzB,gBAAkBsF,EACvB74B,KAAKu4B,qBAAuBA,CAC9B,KAAO,CACL,MAAM,gBAAChF,EAAe,UAAEiF,GACtBlZ,EACEkZ,IACFx4B,KAAKw4B,UAAYA,GAEnBx4B,KAAKuzB,gBAAkBA,CACzB,CACF,CAKA7G,SACE,MAAO,CACL6G,gBAAiBvzB,KAAKuzB,iBAAmB,KACzC+E,SAAUt4B,KAAKs4B,SAAWt4B,KAAKs4B,SAAS5L,SAAW,KACnD8L,UAAWx4B,KAAKw4B,UACZ,CACErL,MAAOntB,KAAKw4B,UAAUrL,MACtB2L,iBAAkB94B,KAAKw4B,UAAUM,iBAAiBpM,UAEpD,KACJkC,aAAc5uB,KAAK4uB,aAAa7pB,KAAIkqB,GAAeA,EAAYvC,WAC/DqM,QAAS/4B,KAAKq4B,WAAWtzB,KAAIi0B,IAAiB,IAAhB,UAACviB,GAAUuiB,EACvC,OAAOviB,EAAUiW,QAAQ,IAG/B,CAKA9oB,MAIe,QAAA7F,EAAAjJ,UAAA3B,OAHV8lC,EAEF,IAAAlgC,MAAAgF,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAFEg7B,EAEFh7B,GAAAnJ,UAAAmJ,GAED,GAAqB,IAAjBg7B,EAAM9lC,OACR,MAAM,IAAIwB,MAAM,mBAYlB,OATAskC,EAAMhP,SAAS9b,IACT,iBAAkBA,EACpBnO,KAAK4uB,aAAe5uB,KAAK4uB,aAAavB,OAAOlf,EAAKygB,cACzC,SAAUzgB,GAAQ,cAAeA,GAAQ,SAAUA,EAC5DnO,KAAK4uB,aAAap2B,KAAK2V,GAEvBnO,KAAK4uB,aAAap2B,KAAK,IAAI0/B,GAAuB/pB,GACpD,IAEKnO,IACT,CAKAk5B,iBACE,GACEl5B,KAAK04B,UACLhf,KAAKC,UAAU3Z,KAAK0sB,YAAchT,KAAKC,UAAU3Z,KAAK24B,OAEtD,OAAO34B,KAAK04B,SAGd,IAAInF,EACA3E,EAoBA0J,EARJ,GAXIt4B,KAAKw4B,WACPjF,EAAkBvzB,KAAKw4B,UAAUrL,MAE/ByB,EADE5uB,KAAK4uB,aAAa,IAAM5uB,KAAKw4B,UAAUM,iBAC1B,CAAC94B,KAAKw4B,UAAUM,oBAAqB94B,KAAK4uB,cAE1C5uB,KAAK4uB,eAGtB2E,EAAkBvzB,KAAKuzB,gBACvB3E,EAAe5uB,KAAK4uB,eAEjB2E,EACH,MAAM,IAAI5+B,MAAM,wCAQlB,GALIi6B,EAAaz7B,OAAS,GACxBgmC,QAAQC,KAAK,4BAIXp5B,KAAKs4B,SACPA,EAAWt4B,KAAKs4B,aACX,MAAIt4B,KAAKq4B,WAAWllC,OAAS,GAAK6M,KAAKq4B,WAAW,GAAG5hB,WAI1D,MAAM,IAAI9hB,MAAM,kCAFhB2jC,EAAWt4B,KAAKq4B,WAAW,GAAG5hB,SAGhC,CAEA,IAAK,IAAIle,EAAI,EAAGA,EAAIq2B,EAAaz7B,OAAQoF,IACvC,QAAkCxD,IAA9B65B,EAAar2B,GAAGu0B,UAClB,MAAM,IAAIn4B,MACyB,iCAAA4D,8BAKvC,MAAMg8B,EAAuB,GACvB8E,EAA8B,GACpCzK,EAAa3E,SAAQgF,IACnBA,EAAYrS,KAAKqN,SAAQ+G,IACvBqI,EAAa7gC,KAAK,IAAIw4B,GAAa,IAGrC,MAAMlE,EAAYmC,EAAYnC,UAAU5vB,WACnCq3B,EAAWr2B,SAAS4uB,IACvByH,EAAW/7B,KAAKs0B,EAClB,IAIFyH,EAAWtK,SAAQ6C,IACjBuM,EAAa7gC,KAAK,CAChB62B,OAAQ,IAAInD,GAAUY,GACtB6D,UAAU,EACVC,YAAY,GACZ,IAIJ,MAAM0I,EAA6B,GACnCD,EAAapP,SAAQ+G,IACnB,MAAMuI,EAAevI,EAAY3B,OAAOnyB,WAClCs8B,EAAcF,EAAYpG,WAAU3qB,GACjCA,EAAE8mB,OAAOnyB,aAAeq8B,IAE7BC,GAAe,GACjBF,EAAYE,GAAa5I,WACvB0I,EAAYE,GAAa5I,YAAcI,EAAYJ,WACrD0I,EAAYE,GAAa7I,SACvB2I,EAAYE,GAAa7I,UAAYK,EAAYL,UAEnD2I,EAAY9gC,KAAKw4B,EACnB,IAIFsI,EAAYG,MAAK,SAAUlxB,EAAGC,GAC5B,OAAID,EAAEooB,WAAanoB,EAAEmoB,SAEZpoB,EAAEooB,UAAY,EAAI,EAEvBpoB,EAAEqoB,aAAepoB,EAAEooB,WAEdroB,EAAEqoB,YAAc,EAAI,EAGtBroB,EAAE8mB,OAAO5C,WAAWiN,cAAclxB,EAAE6mB,OAAO5C,WACpD,IAGA,MAAMkN,EAAgBL,EAAYpG,WAAU3qB,GACnCA,EAAE8mB,OAAOvmB,OAAOwvB,KAEzB,GAAIqB,GAAiB,EAAG,CACtB,MAAOC,GAAaN,EAAY7B,OAAOkC,EAAe,GACtDC,EAAUjJ,UAAW,EACrBiJ,EAAUhJ,YAAa,EACvB0I,EAAYO,QAAQD,EACtB,MACEN,EAAYO,QAAQ,CAClBxK,OAAQiJ,EACR3H,UAAU,EACVC,YAAY,IAKhB,IAAK,MAAMlM,KAAa1kB,KAAKq4B,WAAY,CACvC,MAAMmB,EAAcF,EAAYpG,WAAU3qB,GACjCA,EAAE8mB,OAAOvmB,OAAO4b,EAAUjO,aAEnC,KAAI+iB,GAAe,GAUjB,MAAM,IAAI7kC,MAAyB,mBAAA+vB,EAAUjO,UAAUvZ,cATlDo8B,EAAYE,GAAa7I,WAC5B2I,EAAYE,GAAa7I,UAAW,EACpCwI,QAAQC,KACN,gOAQR,CAEA,IAAIxH,EAAwB,EACxBC,EAA4B,EAC5BC,EAA8B,EAGlC,MAAMgI,EAAuB,GACvBC,EAAyB,GAC/BT,EAAYrP,SAAQ+P,IAAoC,IAAnC,OAAC3K,EAAM,SAAEsB,EAAQ,WAAEC,GAAWoJ,EAC7CrJ,GACFmJ,EAAWthC,KAAK62B,EAAOnyB,YACvB00B,GAAyB,EACpBhB,IACHiB,GAA6B,KAG/BkI,EAAavhC,KAAK62B,EAAOnyB,YACpB0zB,IACHkB,GAA+B,GAEnC,IAGF,MAAMwB,EAAcwG,EAAWzM,OAAO0M,GAChCpG,EAA8C/E,EAAa7pB,KAC/DkqB,IACE,MAAM,KAACvvB,EAAI,UAAEotB,GAAamC,EAC1B,MAAO,CACLC,eAAgBoE,EAAY2G,QAAQnN,EAAU5vB,YAC9C02B,SAAU3E,EAAYrS,KAAK7X,KAAIqqB,GAC7BkE,EAAY2G,QAAQ7K,EAAKC,OAAOnyB,cAElCwC,KAAM4sB,KAAAA,OAAY5sB,GACnB,IASL,OALAi0B,EAAqB1J,SAAQgF,IAC3B9wB,GAAU8wB,EAAYC,gBAAkB,GACxCD,EAAY2E,SAAS3J,SAAQ+E,GAAY7wB,GAAU6wB,GAAY,IAAG,IAG7D,IAAIoE,GAAQ,CACjB/O,OAAQ,CACNuN,wBACAC,4BACAC,+BAEFwB,cACAC,kBACA3E,aAAc+E,GAElB,CAKAuG,WACE,MAAM75B,EAAUL,KAAKk5B,iBACfY,EAAaz5B,EAAQizB,YAAYv2B,MACrC,EACAsD,EAAQgkB,OAAOuN,uBAGjB,GAAI5xB,KAAKq4B,WAAWllC,SAAW2mC,EAAW3mC,OAAQ,CAKhD,GAJc6M,KAAKq4B,WAAW1lB,OAAM,CAACwnB,EAAM3L,IAClCsL,EAAWtL,GAAO1lB,OAAOqxB,EAAK1jB,aAG5B,OAAOpW,CACpB,CAOA,OALAL,KAAKq4B,WAAayB,EAAW/0B,KAAI0R,IAAa,CAC5CiO,UAAW,KACXjO,gBAGKpW,CACT,CAKA+5B,mBACE,OAAOp6B,KAAKk6B,WAAWxO,WACzB,CAKAtV,sBAAsBikB,GACpB,aAAcA,EAAWC,iBAAiBt6B,KAAKk5B,mBAAmBt9B,KACpE,CAYA2+B,aAAyC,QAAA/S,EAAA1yB,UAAA3B,OAA3B4lC,EAAyB,IAAAhgC,MAAAyuB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAzBsR,EAAyBtR,GAAA3yB,UAAA2yB,GACrC,GAAuB,IAAnBsR,EAAQ5lC,OACV,MAAM,IAAIwB,MAAM,cAGlB,MAAM6lC,EAAO,IAAIxf,IACjBhb,KAAKq4B,WAAaU,EACf3H,QAAO3a,IACN,MAAMb,EAAMa,EAAUvZ,WACtB,OAAIs9B,EAAKlG,IAAI1e,KAGX4kB,EAAK52B,IAAIgS,IACF,EACT,IAED7Q,KAAI0R,IAAa,CAAEiO,UAAW,KAAMjO,eACzC,CAgBAS,OAAgC,QAAA0Q,EAAA9yB,UAAA3B,OAAxB4lC,EAAsB,IAAAhgC,MAAA6uB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAtBkR,EAAsBlR,GAAA/yB,UAAA+yB,GAC5B,GAAuB,IAAnBkR,EAAQ5lC,OACV,MAAM,IAAIwB,MAAM,cAIlB,MAAM6lC,EAAO,IAAIxf,IACXyf,EAAgB,GACtB,IAAK,MAAMC,KAAU3B,EAAS,CAC5B,MAAMnjB,EAAM8kB,EAAOjkB,UAAUvZ,WACzBs9B,EAAKlG,IAAI1e,KAGX4kB,EAAK52B,IAAIgS,GACT6kB,EAAcjiC,KAAKkiC,GAEvB,CAEA16B,KAAKq4B,WAAaoC,EAAc11B,KAAI21B,IAAU,CAC5ChW,UAAW,KACXjO,UAAWikB,EAAOjkB,cAGpB,MAAMpW,EAAUL,KAAKk6B,WACrBl6B,KAAK26B,aAAat6B,KAAYo6B,EAChC,CASAG,cAAuC,QAAA9Q,EAAAh1B,UAAA3B,OAAxB4lC,EAAsB,IAAAhgC,MAAA+wB,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAtB+O,EAAsB/O,GAAAl1B,UAAAk1B,GACnC,GAAuB,IAAnB+O,EAAQ5lC,OACV,MAAM,IAAIwB,MAAM,cAIlB,MAAM6lC,EAAO,IAAIxf,IACXyf,EAAgB,GACtB,IAAK,MAAMC,KAAU3B,EAAS,CAC5B,MAAMnjB,EAAM8kB,EAAOjkB,UAAUvZ,WACzBs9B,EAAKlG,IAAI1e,KAGX4kB,EAAK52B,IAAIgS,GACT6kB,EAAcjiC,KAAKkiC,GAEvB,CAEA,MAAMr6B,EAAUL,KAAKk6B,WACrBl6B,KAAK26B,aAAat6B,KAAYo6B,EAChC,CAKAE,aAAat6B,GACX,MAAMg1B,EAAWh1B,EAAQqrB,YAAW,QAAAxB,EAAAp1B,UAAA3B,OADJ4lC,EAAsB,IAAAhgC,MAAAmxB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAtB4O,EAAsB5O,EAAA,GAAAr1B,UAAAq1B,GAEtD4O,EAAQ9O,SAAQyQ,IACd,MAAMhW,EAAYxN,GAAKme,EAAUqF,EAAOpP,WACxCtrB,KAAK66B,cAAcH,EAAOjkB,UAAW+U,GAAS9G,GAAW,GAE7D,CAOAoW,aAAazL,EAAmB3K,GAC9B1kB,KAAKk6B,WACLl6B,KAAK66B,cAAcxL,EAAQ3K,EAC7B,CAKAmW,cAAcxL,EAAmB3K,GAC/BvmB,GAA+B,KAArBumB,EAAUvxB,QAEpB,MAAMq7B,EAAQxuB,KAAKq4B,WAAWnF,WAAU6H,GACtC1L,EAAOvmB,OAAOiyB,EAAQtkB,aAExB,GAAI+X,EAAQ,EACV,MAAM,IAAI75B,MAAO,mBAAkB06B,EAAOnyB,cAG5C8C,KAAKq4B,WAAW7J,GAAO9J,UAAY3xB,EAAAA,GAAAA,KAAY2xB,EACjD,CAOAsW,iBAAiBC,GACf,OAAOj7B,KAAKk7B,kBACVl7B,KAAKo6B,wBACoBrlC,IAAzBkmC,GAA4CA,EAEhD,CAKAC,kBACE7F,EACA4F,GAEA,IAAK,MAAM,UAACvW,EAAS,UAAEjO,KAAczW,KAAKq4B,WACxC,GAAkB,OAAd3T,GACF,GAAIuW,EACF,OAAO,OAGT,IAAK7jB,GAAOsN,EAAW2Q,EAAU5e,EAAUhX,WACzC,OAAO,EAIb,OAAO,CACT,CAKAisB,UAAUyP,GACR,MAAM,qBAACF,EAAoB,iBAAED,GAAoBhnC,OAAOG,OACtD,CAAC8mC,sBAAsB,EAAMD,kBAAkB,GAC/CG,GAGI9F,EAAWr1B,KAAKo6B,mBACtB,GACEY,IACCh7B,KAAKk7B,kBAAkB7F,EAAU4F,GAElC,MAAM,IAAItmC,MAAM,iCAGlB,OAAOqL,KAAKo7B,WAAW/F,EACzB,CAKA+F,WAAW/F,GACT,MAAM,WAACgD,GAAcr4B,KACfq7B,EAA2B,GACjCjL,GAAsBiL,EAAgBhD,EAAWllC,QACjD,MAAMmoC,EACJD,EAAeloC,OAA6B,GAApBklC,EAAWllC,OAAckiC,EAASliC,OACtDooC,EAAkBxoC,EAAAA,GAAAA,MAAauoC,GAoBrC,OAnBAn9B,GAAUk6B,EAAWllC,OAAS,KAC9BJ,EAAAA,GAAAA,KAAYsoC,GAAgB/9B,KAAKi+B,EAAiB,GAClDlD,EAAWpO,SAAQ,CAAAuR,EAAchN,KAAU,IAAvB,UAAC9J,GAAU8W,EACX,OAAd9W,IACFvmB,GAA+B,KAArBumB,EAAUvxB,OAAgB,gCACpCJ,EAAAA,GAAAA,KAAY2xB,GAAWpnB,KACrBi+B,EACAF,EAAeloC,OAAiB,GAARq7B,GAE5B,IAEF6G,EAAS/3B,KACPi+B,EACAF,EAAeloC,OAA6B,GAApBklC,EAAWllC,QAErCgL,GACEo9B,EAAgBpoC,QAAUw6B,GACA,0BAAA4N,EAAgBpoC,iBAErCooC,CACT,CAMI3e,WAEF,OADAze,GAAuC,IAA7B6B,KAAK4uB,aAAaz7B,QACrB6M,KAAK4uB,aAAa,GAAGhS,KAAK7X,KAAI02B,GAAUA,EAAOpM,QACxD,CAMIvC,gBAEF,OADA3uB,GAAuC,IAA7B6B,KAAK4uB,aAAaz7B,QACrB6M,KAAK4uB,aAAa,GAAG9B,SAC9B,CAMIptB,WAEF,OADAvB,GAAuC,IAA7B6B,KAAK4uB,aAAaz7B,QACrB6M,KAAK4uB,aAAa,GAAGlvB,IAC9B,CAKAiJ,YAAY1V,GAEV,IAAIqiC,EAAY,IAAIriC,GAEpB,MAAMooC,EAAiBpL,GAAsBqF,GAC7C,IAAI+C,EAAa,GACjB,IAAK,IAAI9/B,EAAI,EAAGA,EAAI8iC,EAAgB9iC,IAAK,CACvC,MAAMmsB,EAAY4Q,EAAUv4B,MAAM,EVt0BC,IUu0BnCu4B,EAAYA,EAAUv4B,MVv0Ba,IUw0BnCs7B,EAAW7/B,KAAK8zB,KAAAA,OAAYv5B,EAAAA,GAAAA,KAAY2xB,IAC1C,CAEA,OAAO0T,GAAYsD,SAAStI,GAAQpgC,KAAKsiC,GAAY+C,EACvD,CAKA1vB,gBACEtI,GAEa,IADbg4B,EAAyBvjC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAE5B,MAAMsgC,EAAc,IAAIgD,GAyCxB,OAxCAhD,EAAY7B,gBAAkBlzB,EAAQkzB,gBAClClzB,EAAQgkB,OAAOuN,sBAAwB,IACzCwD,EAAYkD,SAAWj4B,EAAQizB,YAAY,IAE7C+E,EAAWpO,SAAQ,CAACvF,EAAW8J,KAC7B,MAAMmN,EAAgB,CACpBjX,UACEA,GAAa4H,KAAAA,OAAY2L,IACrB,KACA3L,KAAAA,OAAY5H,GAClBjO,UAAWpW,EAAQizB,YAAY9E,IAEjC4G,EAAYiD,WAAW7/B,KAAKmjC,EAAc,IAG5Ct7B,EAAQuuB,aAAa3E,SAAQgF,IAC3B,MAAMrS,EAAOqS,EAAY2E,SAAS7uB,KAAI0uB,IACpC,MAAMpE,EAAShvB,EAAQizB,YAAYG,GACnC,MAAO,CACLpE,SACAsB,SACEyE,EAAYiD,WAAWuD,MACrBH,GAAUA,EAAOhlB,UAAUvZ,aAAemyB,EAAOnyB,cAC9CmD,EAAQ6zB,gBAAgBT,GAC/B7C,WAAYvwB,EAAQ8zB,kBAAkBV,GACvC,IAGH2B,EAAYxG,aAAap2B,KACvB,IAAI0/B,GAAuB,CACzBtb,OACAkQ,UAAWzsB,EAAQizB,YAAYrE,EAAYC,gBAC3CxvB,KAAM4sB,KAAAA,OAAY2C,EAAYvvB,QAEjC,IAGH01B,EAAYsD,SAAWr4B,EACvB+0B,EAAYuD,MAAQvD,EAAY1I,SAEzB0I,CACT,EC13BK,MAAMyG,GAIPnI,cACF,OAAO1zB,KAAKK,QAAQqzB,OACtB,CAEArgC,YAAYgN,EAA2Bg4B,GACrC,GADqE,KAPvEA,gBAAU,OACVh4B,aAAO,OAOctL,IAAfsjC,EACFl6B,GACEk6B,EAAWllC,SAAWkN,EAAQgkB,OAAOuN,sBACrC,+EAEF5xB,KAAKq4B,WAAaA,MACb,CACL,MAAMyD,EAAoB,GAC1B,IAAK,IAAIvjC,EAAI,EAAGA,EAAI8H,EAAQgkB,OAAOuN,sBAAuBr5B,IACxDujC,EAAkBtjC,KAAK,IAAI5F,WXvBM,KWyBnCoN,KAAKq4B,WAAayD,CACpB,CACA97B,KAAKK,QAAUA,CACjB,CAEAqrB,YACE,MAAMoL,EAAoB92B,KAAKK,QAAQqrB,YAEjCqQ,EAA0BhjC,QAChCq3B,GAAsB2L,EAAyB/7B,KAAKq4B,WAAWllC,QAE/D,MAAM6oC,EAAoB1M,GAAAA,GAIvB,CACDA,GAAAA,GACEyM,EAAwB5oC,OACxB,2BAEFm8B,GAAAA,GACE5K,KACA1kB,KAAKq4B,WAAWllC,OAChB,cAEFm8B,GAAAA,GAAkBwH,EAAkB3jC,OAAQ,uBAGxC8oC,EAAwB,IAAIrpC,WAAW,MACvCspC,EAA8BF,EAAkB5mC,OACpD,CACE2mC,wBAAyB,IAAInpC,WAAWmpC,GACxC1D,WAAYr4B,KAAKq4B,WACjBvB,qBAEFmF,GAGF,OAAOA,EAAsBl/B,MAAM,EAAGm/B,EACxC,CAEAvzB,mBAAmBszB,GACjB,IAAI3G,EAAY,IAAI2G,GAEpB,MAAM5D,EAAa,GACb8D,EAAmBlM,GAAsBqF,GAC/C,IAAK,IAAI/8B,EAAI,EAAGA,EAAI4jC,EAAkB5jC,IACpC8/B,EAAW7/B,KACT,IAAI5F,WAAW0iC,EAAUmC,OAAO,EXzEC,MW6ErC,MAAMp3B,EAAUy3B,GAAiBlM,YAAY,IAAIh5B,WAAW0iC,IAC5D,OAAO,IAAIuG,GAAqBx7B,EAASg4B,EAC3C,CAEAnhB,KAAK6hB,GACH,MAAMqD,EAAcp8B,KAAKK,QAAQqrB,YAC3B2Q,EAAgBr8B,KAAKK,QAAQ8tB,kBAAkBpxB,MACnD,EACAiD,KAAKK,QAAQgkB,OAAOuN,uBAEtB,IAAK,MAAM8I,KAAU3B,EAAS,CAC5B,MAAMuD,EAAcD,EAAcnJ,WAAU7D,GAC1CA,EAAOvmB,OAAO4xB,EAAOjkB,aAEvBtY,GACEm+B,GAAe,EACd,mCAAkC5B,EAAOjkB,UAAUgW,cAEtDzsB,KAAKq4B,WAAWiE,GAAeplB,GAAKklB,EAAa1B,EAAOpP,UAC1D,CACF,CAEAwP,aAAarkB,EAAsBiO,GACjCvmB,GAAgC,KAAzBumB,EAAUrlB,WAAmB,mCACpC,MAIMi9B,EAJgBt8B,KAAKK,QAAQ8tB,kBAAkBpxB,MACnD,EACAiD,KAAKK,QAAQgkB,OAAOuN,uBAEYsB,WAAU7D,GAC1CA,EAAOvmB,OAAO2N,KAEhBtY,GACEm+B,GAAe,EACa,4BAAA7lB,EAAUgW,yDAExCzsB,KAAKq4B,WAAWiE,GAAe5X,CACjC,QC1HW6X,GAAsB,IAAIrQ,GACrC,+CAWWsQ,IAR+B,IAAItQ,GAC9C,+CAGwC,IAAIA,GAC5C,+CAG8C,IAAIA,GAClD,gDAGWuQ,GAAqB,IAAIvQ,GACpC,+CAeWwQ,IAZwB,IAAIxQ,GACvC,+CAGuC,IAAIA,GAC3C,+CAGwC,IAAIA,GAC5C,+CAGyC,IAAIA,GAC7C,gDClBK9V,eAAeumB,GACpBtC,EACAjF,EACA2D,EACAze,GAMA,MAAMsiB,EAActiB,GAAW,CAC7BuiB,cAAeviB,EAAQuiB,cACvBC,oBAAqBxiB,EAAQwiB,qBAAuBxiB,EAAQyiB,WAC5DC,WAAY1iB,EAAQ0iB,WACpBpE,eAAgBte,EAAQse,gBAGpBlU,QAAkB2V,EAAW4C,gBACjC7H,EACA2D,EACA6D,GAGF,IAAIM,EACJ,GACiC,MAA/B9H,EAAY7B,iBACwB,MAApC6B,EAAYmD,qBAEZ2E,SACQ7C,EAAW8C,mBACf,CACEC,YAAoB,OAAP9iB,QAAO,IAAPA,OAAO,EAAPA,EAAS8iB,YACtB1Y,UAAWA,EACXmU,UAAWzD,EAAY7B,gBACvBgF,qBAAsBnD,EAAYmD,sBAEpCje,GAAWA,EAAQyiB,aAErBnhC,WACG,GAC8B,MAAnCw5B,EAAYqD,qBACa,MAAzBrD,EAAYoD,UACZ,CACA,MAAM,iBAACM,GAAoB1D,EAAYoD,UACjC6E,EAAqBvE,EAAiBlc,KAAK,GAAGyS,OACpD6N,SACQ7C,EAAW8C,mBACf,CACEC,YAAoB,OAAP9iB,QAAO,IAAPA,OAAO,EAAPA,EAAS8iB,YACtBxE,eAAgBxD,EAAYqD,oBAC5B4E,qBACAC,WAAYlI,EAAYoD,UAAUrL,MAClCzI,aAEFpK,GAAWA,EAAQyiB,aAErBnhC,KACJ,MAC8B,OAAjB,OAAP0e,QAAO,IAAPA,OAAO,EAAPA,EAAS8iB,cACXjE,QAAQC,KACN,yPAKJ8D,SACQ7C,EAAW8C,mBACfzY,EACApK,GAAWA,EAAQyiB,aAErBnhC,MAGJ,GAAIshC,EAAO5P,IACT,MAAM,IAAI34B,MACP,eAAc+vB,aAAqBhL,KAAKC,UAAUujB,OAIvD,OAAOxY,CACT,CChGO,SAAS6Y,GAAMC,GACpB,OAAO,IAAIC,SAAQC,GAAWC,WAAWD,EAASF,IACpD,CCoBO,SAASI,GACd5jB,EACAnhB,GAEA,MAAMglC,EACJ7jB,EAAKzkB,OAAOjC,MAAQ,EAAI0mB,EAAKzkB,OAAOjC,KAAOw8B,GAAgB9V,EAAMnhB,GAC7D6G,EAAO3M,EAAAA,GAAAA,MAAa8qC,GACpBC,EAAe9pC,OAAOG,OAAO,CAAC86B,YAAajV,EAAKwU,OAAQ31B,GAE9D,OADAmhB,EAAKzkB,OAAOH,OAAO0oC,EAAcp+B,GAC1BA,CACT,CC1BO,MAAMq+B,GAAsBzO,GAAAA,GAAkB,wBCO/C0O,GAAqB1O,GAAAA,GAUzB,CACAA,GAAAA,GAAiB,WACjBA,GAAAA,GAAiB,SACjB7Y,GAAiB,oBACjBA,GAAiB,SACjB6Y,GAAAA,GACE,CAACyO,IACD,mBAISE,GAAuBD,GAAmB1qC,KAgBhD,MAAM4qC,GAQX7qC,YAAYggC,GAAwB,KAPpC8K,sBAAgB,OAChBhR,WAAK,OACLiR,mBAAa,EAMXp+B,KAAKm+B,iBAAmB9K,EAAK8K,iBAC7Bn+B,KAAKmtB,MAAQkG,EAAKlG,MAClBntB,KAAKo+B,cAAgB/K,EAAK+K,aAC5B,CAQAz1B,uBACE1V,GAEA,MAAMorC,EAAeL,GAAmBhpC,OAAOw2B,GAASv4B,GAAS,GACjE,OAAO,IAAIirC,GAAa,CACtBC,iBAAkB,IAAIjS,GAAUmS,EAAaF,kBAC7ChR,MAAO,IAAIjB,GAAUmS,EAAalR,OAAOjwB,WACzCkhC,cAAeC,EAAaD,eAEhC,ECvEF,MA2Bat5B,IApBV3R,GAoBuB,EAnBvBI,IACC,MAAMgC,GAAS+oC,EAAAA,GAAAA,IAAKnrC,GAAQI,IACtB,OAAC6B,EAAM,OAAEJ,GAVMO,KAGhB,CAACP,OAFOO,EAAOP,OAAOuF,KAAKhF,GAElBH,OADDG,EAAOH,OAAOmF,KAAKhF,KAQPgpC,CAAahpC,GAEhCipC,EAAejpC,EAYrB,OAVAipC,EAAaxpC,OAAS,CAAC/B,EAAgBW,KACrC,MAAMyB,EAAML,EAAO/B,EAAQW,GAC3B,OAAO6qC,EAAAA,GAAAA,IAAW1rC,EAAAA,GAAAA,KAAYsC,GAAK,EAGrCmpC,EAAappC,OAAS,CAACspC,EAAgBzrC,EAAgBW,KACrD,MAAMyB,GAAMspC,EAAAA,GAAAA,IAAWD,EAAQvrC,IAC/B,OAAOiC,EAAOC,EAAKpC,EAAQW,EAAO,EAG7B4qC,CAAY,GAjBpBrrC,aCkmBUyrC,GAA6B5qC,OAAO0T,OAI9C,CACDm3B,OAAQ,CACNrQ,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA0D,CAChEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,YAClBA,GAAAA,GAAkB,SAClB7Y,GAAiB,gBAGrBqoB,OAAQ,CACNtQ,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA0D,CAChEA,GAAAA,GAAiB,eACjB7Y,GAAiB,gBAGrBsoB,SAAU,CACRvQ,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA4D,CAClEA,GAAAA,GAAiB,eACjBxqB,GAAI,eAGRk6B,eAAgB,CACdxQ,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAAkE,CACxEA,GAAAA,GAAiB,eACjB7Y,GAAiB,QACjB8Y,GAAkB,QAClBD,GAAAA,GAAkB,YAClBA,GAAAA,GAAkB,SAClB7Y,GAAiB,gBAGrBwoB,oBAAqB,CACnBzQ,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,kBAEtB4P,qBAAsB,CACpB1Q,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,eAAgBA,GAAAA,GAAkB,eAExD6P,uBAAwB,CACtB3Q,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,eAAgB7Y,GAAiB,iBAEvD2oB,sBAAuB,CACrB5Q,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,eAAgB7Y,GAAiB,iBAEvD4oB,SAAU,CACR7Q,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA4D,CAClEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,YAGtBgQ,iBAAkB,CAChB9Q,MAAO,EACPj5B,OAAQ+5B,GAAAA,GACN,CACEA,GAAAA,GAAiB,eACjB7Y,GAAiB,QACjB8Y,GAAkB,QAClBD,GAAAA,GAAkB,SAClB7Y,GAAiB,gBAIvB8oB,eAAgB,CACd/Q,MAAO,GACPj5B,OAAQ+5B,GAAAA,GAAkE,CACxEA,GAAAA,GAAiB,eACjB7Y,GAAiB,QACjB8Y,GAAkB,QAClB9Y,GAAiB,gBAGrB+oB,iBAAkB,CAChBhR,MAAO,GACPj5B,OAAQ+5B,GAAAA,GACN,CACEA,GAAAA,GAAiB,eACjBxqB,GAAI,YACJyqB,GAAkB,QAClB9Y,GAAiB,gBAIvBgpB,oBAAqB,CACnBjR,MAAO,GACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,oBAOjB,MAAMoQ,GAIXrsC,cAAe,CAYfsV,qBAAqBg3B,GACnB,MACMjgC,EAAOk+B,GADAgB,GAA2BC,OACV,CAC5Be,SAAUD,EAAOC,SACjBC,MAAOF,EAAOE,MACd/S,UAAWtB,GAASmU,EAAO7S,UAAUtB,cAGvC,OAAO,IAAI0M,GAAuB,CAChCtb,KAAM,CACJ,CAACyS,OAAQsQ,EAAOG,WAAYnP,UAAU,EAAMC,YAAY,GACxD,CAACvB,OAAQsQ,EAAOI,iBAAkBpP,UAAU,EAAMC,YAAY,IAEhE9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,gBACEg3B,GAEA,IAAIjgC,EACAkd,EACJ,GAAI,eAAgB+iB,EAAQ,CAE1BjgC,EAAOk+B,GADMgB,GAA2BY,iBAChB,CACtBI,SAAUl+B,OAAOi+B,EAAOC,UACxB5X,KAAM2X,EAAO3X,KACb8E,UAAWtB,GAASmU,EAAO7S,UAAUtB,cAEvC5O,EAAO,CACL,CAACyS,OAAQsQ,EAAOG,WAAYnP,UAAU,EAAOC,YAAY,GACzD,CAACvB,OAAQsQ,EAAOK,WAAYrP,UAAU,EAAMC,YAAY,GACxD,CAACvB,OAAQsQ,EAAOM,SAAUtP,UAAU,EAAOC,YAAY,GAE3D,KAAO,CAELlxB,EAAOk+B,GADMgB,GAA2BG,SAChB,CAACa,SAAUl+B,OAAOi+B,EAAOC,YACjDhjB,EAAO,CACL,CAACyS,OAAQsQ,EAAOG,WAAYnP,UAAU,EAAMC,YAAY,GACxD,CAACvB,OAAQsQ,EAAOM,SAAUtP,UAAU,EAAOC,YAAY,GAE3D,CAEA,OAAO,IAAIsH,GAAuB,CAChCtb,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,cACEg3B,GAEA,IAAIjgC,EACAkd,EACJ,GAAI,eAAgB+iB,EAAQ,CAE1BjgC,EAAOk+B,GADMgB,GAA2BW,eAChB,CACtB1zB,KAAM2f,GAASmU,EAAOK,WAAWxU,YACjCxD,KAAM2X,EAAO3X,KACb8E,UAAWtB,GAASmU,EAAO7S,UAAUtB,cAEvC5O,EAAO,CACL,CAACyS,OAAQsQ,EAAOO,cAAevP,UAAU,EAAOC,YAAY,GAC5D,CAACvB,OAAQsQ,EAAOK,WAAYrP,UAAU,EAAMC,YAAY,GAE5D,KAAO,CAELlxB,EAAOk+B,GADMgB,GAA2BE,OAChB,CACtBhS,UAAWtB,GAASmU,EAAO7S,UAAUtB,cAEvC5O,EAAO,CAAC,CAACyS,OAAQsQ,EAAOO,cAAevP,UAAU,EAAMC,YAAY,GACrE,CAEA,OAAO,IAAIsH,GAAuB,CAChCtb,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAMAiJ,6BACEg3B,GAEA,MACMjgC,EAAOk+B,GADAgB,GAA2BI,eACV,CAC5BnzB,KAAM2f,GAASmU,EAAOK,WAAWxU,YACjCxD,KAAM2X,EAAO3X,KACb4X,SAAUD,EAAOC,SACjBC,MAAOF,EAAOE,MACd/S,UAAWtB,GAASmU,EAAO7S,UAAUtB,cAEvC,IAAI5O,EAAO,CACT,CAACyS,OAAQsQ,EAAOG,WAAYnP,UAAU,EAAMC,YAAY,GACxD,CAACvB,OAAQsQ,EAAOI,iBAAkBpP,UAAU,EAAOC,YAAY,IAUjE,OARI+O,EAAOK,YAAcL,EAAOG,YAC9BljB,EAAKpkB,KAAK,CACR62B,OAAQsQ,EAAOK,WACfrP,UAAU,EACVC,YAAY,IAIT,IAAIsH,GAAuB,CAChCtb,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,0BACEg3B,GAEA,MAAMvK,EAAc,IAAIgD,GACpB,eAAgBuH,GAAU,SAAUA,EACtCvK,EAAYxxB,IACV87B,GAAcS,sBAAsB,CAClCL,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOS,YACzBJ,WAAYL,EAAOK,WACnBhY,KAAM2X,EAAO3X,KACb4X,SAAUD,EAAOC,SACjBC,MAAO5B,GACPnR,UAAW9sB,KAAK8sB,aAIpBsI,EAAYxxB,IACV87B,GAAcW,cAAc,CAC1BP,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOS,YACzBR,SAAUD,EAAOC,SACjBC,MAAO5B,GACPnR,UAAW9sB,KAAK8sB,aAKtB,MAAMwT,EAAa,CACjBF,YAAaT,EAAOS,YACpBjC,iBAAkBwB,EAAOxB,kBAI3B,OADA/I,EAAYxxB,IAAI5D,KAAKugC,gBAAgBD,IAC9BlL,CACT,CAKAzsB,uBACEg3B,GAEA,MACMjgC,EAAOk+B,GADAgB,GAA2BO,uBACV,CAC5BqB,WAAYhV,GAASmU,EAAOxB,iBAAiB3S,cAEzCiV,EAAkB,CACtB7jB,KAAM,CACJ,CAACyS,OAAQsQ,EAAOS,YAAazP,UAAU,EAAOC,YAAY,GAC1D,CACEvB,OAAQmN,GACR7L,UAAU,EACVC,YAAY,GAEd,CAACvB,OAAQoN,GAAoB9L,UAAU,EAAOC,YAAY,IAE5D9D,UAAW9sB,KAAK8sB,UAChBptB,QAEF,OAAO,IAAIw4B,GAAuBuI,EACpC,CAKA93B,oBAAoBg3B,GAClB,MACMjgC,EAAOk+B,GADAgB,GAA2BK,qBAElCwB,EAAkB,CACtB7jB,KAAM,CACJ,CAACyS,OAAQsQ,EAAOS,YAAazP,UAAU,EAAOC,YAAY,GAC1D,CACEvB,OAAQmN,GACR7L,UAAU,EACVC,YAAY,GAEd,CAACvB,OAAQsQ,EAAOxB,iBAAkBxN,UAAU,EAAMC,YAAY,IAEhE9D,UAAW9sB,KAAK8sB,UAChBptB,QAEF,OAAO,IAAIw4B,GAAuBuI,EACpC,CAKA93B,qBAAqBg3B,GACnB,MACMjgC,EAAOk+B,GADAgB,GAA2BM,qBACV,CAACU,SAAUD,EAAOC,WAEhD,OAAO,IAAI1H,GAAuB,CAChCtb,KAAM,CACJ,CAACyS,OAAQsQ,EAAOS,YAAazP,UAAU,EAAOC,YAAY,GAC1D,CAACvB,OAAQsQ,EAAOM,SAAUtP,UAAU,EAAOC,YAAY,GACvD,CACEvB,OAAQmN,GACR7L,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQoN,GACR9L,UAAU,EACVC,YAAY,GAEd,CAACvB,OAAQsQ,EAAOxB,iBAAkBxN,UAAU,EAAMC,YAAY,IAEhE9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAMAiJ,sBAAsBg3B,GACpB,MACMjgC,EAAOk+B,GADAgB,GAA2BQ,sBACV,CAC5BoB,WAAYhV,GAASmU,EAAOe,oBAAoBlV,cAGlD,OAAO,IAAI0M,GAAuB,CAChCtb,KAAM,CACJ,CAACyS,OAAQsQ,EAAOS,YAAazP,UAAU,EAAOC,YAAY,GAC1D,CAACvB,OAAQsQ,EAAOxB,iBAAkBxN,UAAU,EAAMC,YAAY,IAEhE9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,gBACEg3B,GAEA,IAAIjgC,EACAkd,EACJ,GAAI,eAAgB+iB,EAAQ,CAE1BjgC,EAAOk+B,GADMgB,GAA2BU,iBAChB,CACtBzzB,KAAM2f,GAASmU,EAAOK,WAAWxU,YACjCxD,KAAM2X,EAAO3X,KACb6X,MAAOF,EAAOE,MACd/S,UAAWtB,GAASmU,EAAO7S,UAAUtB,cAEvC5O,EAAO,CACL,CAACyS,OAAQsQ,EAAOO,cAAevP,UAAU,EAAOC,YAAY,GAC5D,CAACvB,OAAQsQ,EAAOK,WAAYrP,UAAU,EAAMC,YAAY,GAE5D,KAAO,CAELlxB,EAAOk+B,GADMgB,GAA2BS,SAChB,CACtBQ,MAAOF,EAAOE,QAEhBjjB,EAAO,CAAC,CAACyS,OAAQsQ,EAAOO,cAAevP,UAAU,EAAMC,YAAY,GACrE,CAEA,OAAO,IAAIsH,GAAuB,CAChCtb,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,EAnTWggC,GASJ5S,UAAuB,IAAIZ,GAChC,oCCttBG,MAAMyU,GAIXttC,cAAe,CAafsV,2BAA2BosB,GACzB,OACE,GACC7/B,KAAK0rC,KAAK7L,EAAa4L,GAAOE,WAC7B,EACA,EAEN,CAYAl4B,kBACE0xB,EACA9J,EACAuQ,EACAhU,EACAptB,GAEA,CACE,MAAMqhC,QAAsB1G,EAAW2G,kCACrCthC,EAAKvM,QAID8tC,QAAoB5G,EAAW6G,eACnCJ,EAAQrqB,UACR,aAGF,IAAI2e,EAAkC,KACtC,GAAoB,OAAhB6L,EAAsB,CACxB,GAAIA,EAAYE,WAEd,OADAhI,QAAQ3Q,MAAM,uDACP,EAGLyY,EAAYvhC,KAAKvM,SAAWuM,EAAKvM,SACnCiiC,EAAcA,GAAe,IAAIgD,GACjChD,EAAYxxB,IACV87B,GAAc0B,SAAS,CACrBlB,cAAeY,EAAQrqB,UACvBopB,MAAOngC,EAAKvM,WAKb8tC,EAAYI,MAAMv4B,OAAOgkB,KAC5BsI,EAAcA,GAAe,IAAIgD,GACjChD,EAAYxxB,IACV87B,GAAcvrC,OAAO,CACnB+rC,cAAeY,EAAQrqB,UACvBqW,gBAKFmU,EAAYrB,SAAWmB,IACzB3L,EAAcA,GAAe,IAAIgD,GACjChD,EAAYxxB,IACV87B,GAAc4B,SAAS,CACrBxB,WAAYvP,EAAM9Z,UAClBwpB,SAAUa,EAAQrqB,UAClBmpB,SAAUmB,EAAgBE,EAAYrB,YAI9C,MACExK,GAAc,IAAIgD,IAAcx0B,IAC9B87B,GAAcW,cAAc,CAC1BP,WAAYvP,EAAM9Z,UAClBspB,iBAAkBe,EAAQrqB,UAC1BmpB,SAAUmB,EAAgB,EAAIA,EAAgB,EAC9ClB,MAAOngC,EAAKvM,OACZ25B,eAOc,OAAhBsI,SACIuH,GACJtC,EACAjF,EACA,CAAC7E,EAAOuQ,GACR,CACE/D,WAAY,aAIpB,CAEA,MAAMwE,EAAajS,GAAAA,GAQjB,CACAA,GAAAA,GAAiB,eACjBA,GAAAA,GAAiB,UACjBA,GAAAA,GAAiB,eACjBA,GAAAA,GAAiB,sBACjBA,GAAAA,GACEA,GAAAA,GAAgB,QAChBA,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,WAIEuR,EAAYF,GAAOE,UACzB,IAAIjtC,EAAS,EACTqf,EAAQvT,EACR8hC,EAAe,GACnB,KAAOvuB,EAAM9f,OAAS,GAAG,CACvB,MAAM2K,EAAQmV,EAAMlW,MAAM,EAAG8jC,GACvBnhC,EAAO3M,EAAAA,GAAAA,MAAa8tC,EAAY,IACtCU,EAAWnsC,OACT,CACE65B,YAAa,EACbr7B,SACAkK,MAAOA,EACP6Z,YAAa,EACb8pB,mBAAoB,GAEtB/hC,GAGF,MAAM01B,GAAc,IAAIgD,IAAcx0B,IAAI,CACxCgZ,KAAM,CAAC,CAACyS,OAAQyR,EAAQrqB,UAAWka,UAAU,EAAMC,YAAY,IAC/D9D,YACAptB,SASF,GAPA8hC,EAAahpC,KACXmkC,GAA0BtC,EAAYjF,EAAa,CAAC7E,EAAOuQ,GAAU,CACnE/D,WAAY,eAKZ1C,EAAWqH,aAAaxjC,SAAS,cAAe,CAClD,MAAMyjC,EAAsB,QACtBpE,GAAM,IAAOoE,EACrB,CAEA/tC,GAAUitC,EACV5tB,EAAQA,EAAMlW,MAAM8jC,EACtB,OACMpD,QAAQmE,IAAIJ,GAGlB,CACE,MAAMD,EAAajS,GAAAA,GAA2C,CAC5DA,GAAAA,GAAiB,iBAGb5vB,EAAO3M,EAAAA,GAAAA,MAAawuC,EAAWjuC,MACrCiuC,EAAWnsC,OACT,CACE65B,YAAa,GAEfvvB,GAGF,MAAM01B,GAAc,IAAIgD,IAAcx0B,IAAI,CACxCgZ,KAAM,CACJ,CAACyS,OAAQyR,EAAQrqB,UAAWka,UAAU,EAAMC,YAAY,GACxD,CAACvB,OAAQoN,GAAoB9L,UAAU,EAAOC,YAAY,IAE5D9D,YACAptB,eAEIi9B,GACJtC,EACAjF,EACA,CAAC7E,EAAOuQ,GACR,CACE/D,WAAY,aAGlB,CAGA,OAAO,CACT,EAnNW4D,GASJE,UAdUlT,ICXkB,IAAIzB,GACvC,+CCRF,IAAI2V,GAAc7tC,OAAOE,UAAUgJ,SAC/B4kC,GAAU9tC,OAAO4oB,MAAQ,SAASmlB,GACpC,IAAInlB,EAAO,GACX,IAAK,IAAIroB,KAAQwtC,EAChBnlB,EAAKpkB,KAAKjE,GAEX,OAAOqoB,CACT,EAEA,SAASjD,GAAUtB,EAAK2pB,GACvB,IAAIzpC,EAAGkd,EAAK9V,EAAKid,EAAMhH,EAAKqsB,EAASC,EACrC,IAAY,IAAR7pB,EACH,MAAO,OAER,IAAY,IAARA,EACH,MAAO,QAER,cAAeA,GACd,IAAK,SACJ,GAAY,OAARA,EACH,OAAO,KACD,GAAIA,EAAIqU,QAAgC,oBAAfrU,EAAIqU,OACnC,OAAO/S,GAAUtB,EAAIqU,SAAUsV,GAG/B,GAAc,oBADdE,EAAQL,GAAY/mC,KAAKud,IACO,CAG/B,IAFA1Y,EAAM,IACN8V,EAAM4C,EAAIllB,OAAS,EACfoF,EAAI,EAAGA,EAAIkd,EAAKld,IACnBoH,GAAOga,GAAUtB,EAAI9f,IAAI,GAAQ,IAKlC,OAHIkd,GAAO,IACV9V,GAAOga,GAAUtB,EAAI9f,IAAI,IAEnBoH,EAAM,GAClB,CAAW,GAAc,oBAAVuiC,EAA6B,CAMvC,IAHAzsB,GADAmH,EAAOklB,GAAQzpB,GAAKohB,QACTtmC,OACXwM,EAAM,GACNpH,EAAI,EACGA,EAAIkd,QAGM1gB,KADhBktC,EAAUtoB,GAAUtB,EADpBzC,EAAMgH,EAAKrkB,KACmB,MAEzBoH,IACHA,GAAO,KAERA,GAAO+Z,KAAKC,UAAU/D,GAAO,IAAMqsB,GAEpC1pC,IAED,MAAO,IAAMoH,EAAM,GACxB,CACK,OAAO+Z,KAAKC,UAAUtB,GAGzB,IAAK,WACL,IAAK,YACJ,OAAO2pB,EAAc,UAAOjtC,EAC7B,IAAK,SACJ,OAAO2kB,KAAKC,UAAUtB,GACvB,QACC,OAAO8pB,SAAS9pB,GAAOA,EAAM,KAEhC,QAEiB,SAASA,GACzB,IAAI+pB,EAAYzoB,GAAUtB,GAAK,GAC/B,QAAkBtjB,IAAdqtC,EACH,MAAO,GAAIA,CAEb,ECrEA,SAASC,GAAczkC,GACrB,IAAIykC,EAAgB,EACpB,KAAOzkC,EAAI,GACTA,GAAK,EACLykC,IAEF,OAAOA,CACT,CAoBO,MAAMC,GAYXjvC,YACEkvC,EACAC,EACAC,EACAC,EACAC,GACA,KAhBKJ,mBAAa,OAEbC,8BAAwB,OAExBC,YAAM,OAENC,sBAAgB,OAEhBC,qBAAe,EASpB3iC,KAAKuiC,cAAgBA,EACrBviC,KAAKwiC,yBAA2BA,EAChCxiC,KAAKyiC,OAASA,EACdziC,KAAK0iC,iBAAmBA,EACxB1iC,KAAK2iC,gBAAkBA,CACzB,CAEAC,SAASC,GACP,OAAO7iC,KAAK8iC,qBAAqBD,GAAM,EACzC,CAEAC,qBAAqBD,GACnB,GAAIA,EAAO7iC,KAAK2iC,gBAAiB,CAC/B,MAAMI,EACJV,GAjDI,KADYzkC,EAkDailC,EA/DN,GA+DsC,GAjD/C,GACpBjlC,IACAA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,GAEC,GADXA,GAAKA,GAAK,MA2CJykC,GAhEuB,IAiEvB,EAIF,MAAO,CAACU,EADUF,GADD7iC,KAAKgjC,gBAAgBD,GAnEb,IAsE3B,CAAO,CACL,MAAME,EAAkBJ,EAAO7iC,KAAK2iC,gBAC9BO,EAAmBhuC,KAAKC,MAAM8tC,EAAkBjjC,KAAKuiC,eAG3D,MAAO,CAFOviC,KAAK0iC,iBAAmBQ,EACpBD,EAAkBjjC,KAAKuiC,cAE3C,CA/DJ,IAAwB3kC,CAgEtB,CAEAulC,oBAAoBJ,GAClB,OAAIA,GAAS/iC,KAAK0iC,iBAhFS,IAiFjBxtC,KAAKmB,IAAI,EAAG0sC,GAAS,IAG1BA,EAAQ/iC,KAAK0iC,kBAAoB1iC,KAAKuiC,cACvCviC,KAAK2iC,eAGX,CAEAS,mBAAmBL,GACjB,OAAO/iC,KAAKmjC,oBAAoBJ,GAAS/iC,KAAKgjC,gBAAgBD,GAAS,CACzE,CAEAC,gBAAgBD,GACd,OAAIA,EAAQ/iC,KAAK0iC,iBACRxtC,KAAKmB,IAAI,EAAG0sC,EAAQV,GAhGF,KAkGlBriC,KAAKuiC,aAEhB,ECpGK,MAAMc,WAA6B1uC,MAGxCtB,YAAYgN,EAAiBijC,GAC3B1iC,MAAMP,GAAS,KAHjBijC,UAAI,EAKFtjC,KAAKsjC,KAAOA,CACd,EA0BK,MAAMC,WAA2B5uC,MAGtCtB,YAAWmwC,EAMTC,GACA,IANA,KACEC,EAAI,QACJrjC,EAAO,KACPX,GACuD8jC,EAGzD5iC,MAAuB,MAAjB6iC,EAAyB,GAAEA,MAAkBpjC,IAAYA,GAAS,KAV1EqjC,UAAI,OACJhkC,UAAI,EAUFM,KAAK0jC,KAAOA,EACZ1jC,KAAKN,KAAOA,EACZM,KAAKzL,KAAO,oBACd,EC7CF,IAAAovC,GAAeC,WAAWC,MCYX,MAAMC,WAA2BC,GAAAA,EAE9C1wC,YACE65B,EACA5S,EACA0pB,GAsBApjC,OAjB0BqjC,IACxB,MAAMC,GAAMC,EAAAA,GAAAA,GAAUF,EAAK,CACzBG,aAAa,EACbC,eAAgB,EAChBC,WAAW,EACXC,mBAAoB,OACjBjqB,IASL,OANEta,KAAKwkC,iBADH,WAAYN,EAEZA,EACAO,OAEsBP,EAEnBA,CAAG,GAEYhX,EAAS5S,EAAS0pB,GAAqB,KA1BzDQ,sBAAgB,CA2BxB,CACA1pC,OAEgD,IAAA4pC,EAC9C,MAAMC,EAAkC,QAAxBD,EAAG1kC,KAAKwkC,wBAAgB,IAAAE,OAAA,EAArBA,EAAuBC,WAC1C,OAAmB,IAAfA,EACK/jC,MAAM9F,QAAKhG,WAEb2oC,QAAQmH,OACb,IAAIjwC,MACF,qCAAmCG,UAAA3B,QAAA,OAAA4B,EAAAD,UAAA,IAEjC,qEACA6vC,EACA,KAGR,CACAE,SAEkD,IAAAC,EAChD,MAAMH,EAAkC,QAAxBG,EAAG9kC,KAAKwkC,wBAAgB,IAAAM,OAAA,EAArBA,EAAuBH,WAC1C,OAAmB,IAAfA,EACK/jC,MAAMikC,UAAO/vC,WAEf2oC,QAAQmH,OACb,IAAIjwC,MACF,2CAAyCG,UAAA3B,QAAA,OAAA4B,EAAAD,UAAA,IAEvC,qEACA6vC,EACA,KAGR,ECrDK,MAAMI,GAIX1xC,YAAYggC,GAAqC,KAHjDzd,SAAG,OACHzT,WAAK,EAGHnC,KAAK4V,IAAMyd,EAAKzd,IAChB5V,KAAKmC,MAAQkxB,EAAKlxB,KACpB,CAEA6iC,WACE,MAAMC,EAAUvjC,OAAO,sBACvB,OAAO1B,KAAKmC,MAAM+iC,mBAAqBD,CACzC,CAEAt8B,mBAAmBw8B,GACjB,MAAM/V,ECnBH,SACLpV,EACAta,GAEA,IAAI2sB,EACJ,IACEA,EAAUrS,EAAKzkB,OAAOP,OAAO0K,GAC7B,MAAO4tB,GACP,MAAM,IAAI34B,MAAM,wBAA0B24B,EAC5C,CAEA,GAAIjB,EAAQ+Y,YAAcprB,EAAKwU,MAC7B,MAAM,IAAI75B,MACP,+CAA8C03B,EAAQ+Y,gBAAgBprB,EAAKwU,SAIhF,OAAOnC,CACT,CDCiBgZ,CAAWC,GAAuBH,GAEzCI,EAAyBJ,EAAYhyC,OAnBhB,GAoB3BgL,GAAOonC,GAA0B,EAAG,2BACpCpnC,GAAOonC,EAAyB,KAAO,EAAG,2BAE1C,MAAMC,EAAyBD,EAAyB,IAClD,UAAC9S,GAAanD,GAAAA,GAAoD,CACtEA,GAAAA,GAAiB7Y,KAAoB+uB,EAAwB,eAC5DxwC,OAAOmwC,EAAYpoC,MA1BK,KA4B3B,MAAO,CACLmoC,iBAAkB9V,EAAK8V,iBACvBO,iBAAkBrW,EAAKqW,iBACvBC,2BAA4BtW,EAAKuW,uBACjCC,UAC4B,IAA1BxW,EAAKwW,UAAUzyC,OACX,IAAI+4B,GAAUkD,EAAKwW,UAAU,SAC7B7wC,EACN09B,UAAWA,EAAU1tB,KAAImoB,GAAW,IAAIhB,GAAUgB,KAEtD,EAGF,MAAMoY,GAAwB,CAC5B9W,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAML,CACDA,GAAAA,GAAiB,aACjBxqB,GAAI,oBACJwqB,GAAAA,GAAkB,oBAClBA,GAAAA,GAAgB,0BAChBA,GAAAA,KACAA,GAAAA,GACE7Y,KACA6Y,GAAAA,GAAoBA,GAAAA,MAAoB,GACxC,gBEhFAuW,GAAS,6CC6Df,MAAMC,GAAsBvrB,GAC1B9b,GAASytB,IACTzP,MACA7gB,GAAS,IAAIswB,GAAUtwB,KAGnBmqC,GAAuBxqB,GAAM,CAACkB,KAAUT,GAAQ,YAEhDgqB,GAA2BzrB,GAC/B9b,GAAS1L,EAAAA,IACTgzC,IACAnqC,GAAS7I,EAAAA,GAAAA,KAAY6I,EAAM,GAAI,YAuSjC,SAASqqC,GACPC,GAEA,IAAInJ,EACA5B,EACJ,GAAkC,kBAAvB+K,EACTnJ,EAAamJ,OACR,GAAIA,EAAoB,CAC7B,MAAOnJ,WAAYoJ,KAAwBC,GACzCF,EACFnJ,EAAaoJ,EACbhL,EAASiL,CACX,CACA,MAAO,CAACrJ,aAAY5B,SACtB,CAKA,SAASkL,GAAsBzzB,GAC7B,OAAOrX,GAAM,CACXye,GAAK,CACHssB,QAAStqB,GAAQ,OACjBuqB,GAAI9pB,KACJ7J,WAEFoH,GAAK,CACHssB,QAAStqB,GAAQ,OACjBuqB,GAAI9pB,KACJ+L,MAAOxO,GAAK,CACV0pB,KAAM1mB,KACN3c,QAASoc,KACT/c,KAAM2c,GxC/XLT,GAAO,OAAO,KAAM,UwCmY7B,CAEA,MAAM4qB,GAAmBH,GAAgBrpB,MAKzC,SAASypB,GAAoB/rB,GAC3B,OAAOH,GAAO8rB,GAAgB3rB,GAAS8rB,IAAkB5qC,GACnD,UAAWA,EACNA,EAEA,IACFA,EACHgX,OAAQ3e,GAAO2H,EAAMgX,OAAQ8H,KAIrC,CAKA,SAASgsB,GAA8B9qC,GACrC,OAAO6qC,GACLzsB,GAAK,CACHH,QAASG,GAAK,CACZ6oB,KAAMllC,OAER/B,UAGN,CAKA,SAAS+qC,GAAmC/qC,GAC1C,OAAOoe,GAAK,CACVH,QAASG,GAAK,CACZ6oB,KAAMllC,OAER/B,SAEJ,CAKA,SAASgrC,GACPlT,EACAmT,GAEA,OAAgB,IAAZnT,EACK,IAAIgC,GAAU,CACnBrR,OAAQwiB,EAASxiB,OACjB8J,kBAAmB0Y,EAASvT,YAAYvuB,KACtC6tB,GAAc,IAAI1G,GAAU0G,KAE9BW,gBAAiBsT,EAAStT,gBAC1BI,qBAAsBkT,EAASjY,aAAa7pB,KAAIgsB,IAAM,CACpD7B,eAAgB6B,EAAG7B,eACnBC,kBAAmB4B,EAAG6C,SACtBl0B,KAAM4sB,KAAAA,OAAYyE,EAAGrxB,UAEvBm0B,oBAAqBgT,EAAShT,sBAGzB,IAAIT,GAAQyT,EAEvB,CAoRA,MAAMC,GAA6B9sB,GAAK,CACtC+sB,WAAYppC,KACZqpC,eAAgBrpC,KAChBspC,QAAStpC,KACTupC,MAAOvpC,KACPwpC,SAAUxpC,OAsBNypC,GAA2BX,GAC/BxzB,GACEmJ,GACEpC,GAAK,CACH+oB,MAAOplC,KACP0pC,cAAe1pC,KACf2pC,OAAQ3pC,KACR4pC,YAAa5pC,KACb6pC,WAAYnrB,GAASD,GAASze,YAoBhC8pC,GAAyBztB,GAAK,CAClC0tB,MAAO/pC,KACPid,UAAWjd,KACXopC,WAAYppC,KACZolC,MAAOplC,OAeHgqC,GAAqB3tB,GAAK,CAC9B+oB,MAAOplC,KACPiqC,UAAWjqC,KACXkqC,aAAclqC,KACdmqC,aAAcnqC,KACdoqC,YAAa1rB,GAAS1e,MACtBqqC,iBAAkB3rB,GAAS1e,QAGvBsqC,GAAyBjuB,GAAK,CAClCuoB,cAAe5kC,KACf6kC,yBAA0B7kC,KAC1B8kC,OAAQ3mB,KACR4mB,iBAAkB/kC,KAClBglC,gBAAiBhlC,OAWbuqC,GAA0B5rB,GAAOG,KAAUxJ,GAAMtV,OAKjDwqC,GAAyB/rB,GAAS7gB,GAAM,CAACye,GAAK,CAAC,GAAIyC,QAKnD2rB,GAAwBpuB,GAAK,CACjCsT,IAAK6a,KAMDE,GAA0BrsB,GAAQ,qBAWlCssB,GAAgBtuB,GAAK,CACzB,cAAeyC,KACf,cAAeJ,GAAS1e,QA8CpB4qC,GAAqC7B,GACzC1sB,GAAK,CACHsT,IAAKlR,GAAS7gB,GAAM,CAACye,GAAK,CAAC,GAAIyC,QAC/B6mB,KAAMlnB,GAASnJ,GAAMwJ,OACrBmX,SAAUvX,GACRD,GACEnJ,GACEmJ,GACEpC,GAAK,CACHmnB,WAAYrlB,KACZulB,MAAO5kB,KACPmjB,SAAUjiC,KACV+B,KAAMuT,GAAMwJ,MACZ+rB,UAAWnsB,GAAS1e,YAM9B8qC,cAAepsB,GAAS1e,MACxB+qC,WAAYrsB,GACVD,GACEpC,GAAK,CACH8S,UAAWrQ,KACX/c,KAAM6b,GAAM,CAACkB,KAAUT,GAAQ,mBAogBnC2sB,GAAgCjC,GACpC1sB,GAAK,CACH4uB,WAAYtsB,GAAOG,KAAUxJ,GAAMtV,OACnCkrC,MAAO7uB,GAAK,CACV8uB,UAAWnrC,KACXorC,SAAUprC,UA4LhB,MAAMqrC,GAAgCvC,GAAcK,IAK9CmC,GAA4BxC,GAAcgB,IAK1CyB,GAAwBzC,GAAckB,IAKtCwB,GAA4B1C,GAAcwB,IAK1CmB,GAA6B3C,GAAcyB,IAK3CmB,GAAgB5C,GAAc9oC,MAmB9B2rC,GAAqB5C,GACzB1sB,GAAK,CACH0tB,MAAO/pC,KACP4rC,YAAa5rC,KACb6rC,eAAgB7rC,KAChB8rC,uBAAwBx2B,GAAM6yB,OAsB5B4D,GAAoB1vB,GAAK,CAC7BstB,OAAQ7qB,KACRktB,SAAUvtB,GAASze,MACnBisC,SAAUjsC,KACVksC,eAAgBxtB,GAASI,QAsBrBqtB,GAAgCpD,GACpCzzB,GACE+G,GAAK,CACHkT,QAAS4Y,GACTwB,OAAQ7qB,KACRktB,SAAUvtB,GAASze,MACnBisC,SAAUjsC,KACVksC,eAAgBxtB,GAASI,UAQzBstB,GAA0BrD,GAC9BzzB,GACE+G,GAAK,CACHqV,OAAQyW,GACRrS,QAASzZ,GAAK,CACZmnB,WAAYrlB,KACZulB,MAAOyE,GACPlG,SAAUjiC,KACV+B,KAAMsmC,GACNwC,UAAW7qC,WAMbqsC,GAA0BhwB,GAAK,CACnC8mB,QAASrkB,KACTwtB,OAAQjtB,KACR6iB,MAAOliC,OAMHusC,GAAgCxD,GACpCzzB,GACE+G,GAAK,CACHqV,OAAQyW,GACRrS,QAASzZ,GAAK,CACZmnB,WAAYrlB,KACZulB,MAAOyE,GACPlG,SAAUjiC,KACV+B,KAAMsqC,GACNxB,UAAW7qC,WAiBbwsC,GAA8BzD,GAClCzzB,GACE+G,GAAK,CACH4lB,SAAUjiC,KACVuvB,QAAS4Y,OAQTsE,GAAoBpwB,GAAK,CAC7BmnB,WAAYrlB,KACZulB,MAAOyE,GACPlG,SAAUjiC,KACV+B,KAAMsmC,GACNwC,UAAW7qC,OAMP0sC,GAAyBrwB,GAAK,CAClCqV,OAAQyW,GACRrS,QAAS2W,KAGLE,GAAyB/vB,GAC7Bhf,GAAM,CAACkD,GAAS1L,EAAAA,IAASi3C,KACzBzuC,GAAM,CAACwqC,GAAsBiE,MAC7BpuC,GACM7C,MAAMC,QAAQ4C,GACT3H,GAAO2H,EAAOoqC,IAEdpqC,IAQP2uC,GAA0BvwB,GAAK,CACnCmnB,WAAYrlB,KACZulB,MAAOyE,GACPlG,SAAUjiC,KACV+B,KAAM4qC,GACN9B,UAAW7qC,OAGP6sC,GAA+BxwB,GAAK,CACxCqV,OAAQyW,GACRrS,QAAS8W,KAMLE,GAAwBzwB,GAAK,CACjC7X,MAAO5G,GAAM,CACXygB,GAAQ,UACRA,GAAQ,YACRA,GAAQ,cACRA,GAAQ,kBAEV0uB,OAAQ/sC,KACRgtC,SAAUhtC,OAONitC,GAA6CnE,GACjDxzB,GACE+G,GAAK,CACH0K,UAAWjI,KACXomB,KAAMllC,KACN2vB,IAAK6a,GACL0C,KAAMzuB,GAASK,MACfquB,UAAWzuB,GAASD,GAASze,WAQ7BotC,GAAmCtE,GACvCxzB,GACE+G,GAAK,CACH0K,UAAWjI,KACXomB,KAAMllC,KACN2vB,IAAK6a,GACL0C,KAAMzuB,GAASK,MACfquB,UAAWzuB,GAASD,GAASze,WAQ7BqtC,GAA4BhxB,GAAK,CACrCixB,aAActtC,KACdiV,OAAQ+zB,GAA6ByD,MAMjCc,GAA2BlxB,GAAK,CACpCqV,OAAQyW,GACRrS,QAAS2W,KAMLe,GAAmCnxB,GAAK,CAC5CixB,aAActtC,KACdiV,OAAQ+zB,GAA6BuE,MAMjCE,GAAiBpxB,GAAK,CAC1BqxB,OAAQ1tC,KACRklC,KAAMllC,KACN2tC,KAAM3tC,OAMF4tC,GAAyBvxB,GAAK,CAClCixB,aAActtC,KACdiV,OAAQw4B,KAiEJI,GAAmBjwC,GAAM,CAC7Bye,GAAK,CACHA,KAAMze,GAAM,CACVygB,GAAQ,sBACRA,GAAQ,aACRA,GAAQ,0BACRA,GAAQ,UAEV6mB,KAAMllC,KACN8tC,UAAW9tC,OAEbqc,GAAK,CACHA,KAAMgC,GAAQ,eACdqvB,OAAQ1tC,KACRklC,KAAMllC,KACN8tC,UAAW9tC,OAEbqc,GAAK,CACHA,KAAMgC,GAAQ,UACd6mB,KAAMllC,KACN8tC,UAAW9tC,KACX+tC,MAAO1xB,GAAK,CACV2xB,sBAAuBhuC,KACvBiuC,0BAA2BjuC,KAC3BkuC,sBAAuBluC,KACvBmuC,wBAAyBnuC,SAG7Bqc,GAAK,CACHA,KAAMgC,GAAQ,QACd6mB,KAAMllC,KACN8tC,UAAW9tC,KACX2vB,IAAK7Q,SAOHsvB,GAA+B/xB,GAAK,CACxCixB,aAActtC,KACdiV,OAAQ44B,KAMJQ,GAA8BhyB,GAAK,CACvCixB,aAActtC,KACdiV,OAAQ+zB,GACNprC,GAAM,CAAC6sC,GAAuBC,QAO5B4D,GAAyBjyB,GAAK,CAClCixB,aAActtC,KACdiV,OAAQjV,OAGJuuC,GAAoBlyB,GAAK,CAC7BqV,OAAQ5S,KACR0vB,OAAQ/vB,GAASK,MACjB2vB,IAAKhwB,GAASK,MACdynB,IAAK9nB,GAASK,MACdiX,QAAStX,GAASK,QAGd4vB,GAAwBryB,GAAK,CACjCsyB,WAAY7vB,KACZ8vB,WAAY9vB,KACZ+vB,eAAgB7uC,KAChB8uC,iBAAkB3wB,KAClB4wB,aAAcz5B,GAAMsI,GAAM,CAAC5d,KAAUA,KAAUA,QAC/C6pC,WAAY7pC,KACZgvC,SAAUhvC,KACVivC,SAAUxwB,GAASze,QAMfkvC,GAAkBpG,GACtBzsB,GAAK,CACH8yB,QAAS75B,GAAMo5B,IACfU,WAAY95B,GAAMo5B,OAIhBW,GAAqBzxC,GAAM,CAC/BygB,GAAQ,aACRA,GAAQ,aACRA,GAAQ,eAGJixB,GAA0BjzB,GAAK,CACnC6oB,KAAMllC,KACNuvC,cAAe9wB,GAASze,MACxB2vB,IAAK6a,GACLgF,mBAAoB9wB,GAAS2wB,MAMzBI,GAAgC1G,GACpCzzB,GAAMmJ,GAAS6wB,MAMXI,GAA6C5G,GAAc9oC,MAE3D2vC,GAA2BtzB,GAAK,CACpC4Y,WAAYkT,GACZxT,gBAAiBrf,GAAMtV,MACvB+0B,gBAAiBzf,GAAMtV,QAGnB4vC,GAA6BvzB,GAAK,CACtCqe,WAAYplB,GAAMwJ,MAClBpc,QAAS2Z,GAAK,CACZsZ,YAAargB,GAAMwJ,MACnB4H,OAAQrK,GAAK,CACX4X,sBAAuBj0B,KACvBk0B,0BAA2Bl0B,KAC3Bm0B,4BAA6Bn0B,OAE/BixB,aAAc3b,GACZ+G,GAAK,CACH4Z,SAAU3gB,GAAMtV,MAChB+B,KAAM+c,KACNyS,eAAgBvxB,QAGpB41B,gBAAiB9W,KACjBoX,oBAAqBxX,GAASpJ,GAAMq6B,SAIlCE,GAAsBxzB,GAAK,CAC/BqV,OAAQyW,GACRpL,OAAQ5e,KACRwS,SAAUxS,KACV2xB,OAAQpxB,GAAS9gB,GAAM,CAACygB,GAAQ,eAAgBA,GAAQ,oBAGpD0xB,GAAyC1zB,GAAK,CAClDsZ,YAAargB,GAAMu6B,IACnBnV,WAAYplB,GAAMwJ,QAGdkxB,GAA0B3zB,GAAK,CACnCiwB,OAAQjtB,KACR8jB,QAASrkB,KACTqQ,UAAWgZ,KAGP8H,GAAuB5zB,GAAK,CAChC4Z,SAAU3gB,GAAM6yB,IAChBpmC,KAAM+c,KACNqQ,UAAWgZ,KAqBP+H,GAAyBtzB,GAlBLhf,GAAM,CAC9BqyC,GACAD,KAG+BpyC,GAAM,CACrCye,GAAK,CACHiwB,OAAQjtB,KACR8jB,QAASrkB,KACTqQ,UAAWrQ,OAEbzC,GAAK,CACH4Z,SAAU3gB,GAAMwJ,MAChB/c,KAAM+c,KACNqQ,UAAWrQ,UAOb7gB,GAEW3H,GAAO2H,EADZ,aAAcA,EACKgyC,GAEAD,MAQrBG,GAAmC9zB,GAAK,CAC5Cqe,WAAYplB,GAAMwJ,MAClBpc,QAAS2Z,GAAK,CACZsZ,YAAargB,GAAMu6B,IACnB5e,aAAc3b,GAAM46B,IACpBta,gBAAiB9W,KACjBoX,oBAAqBxX,GAASD,GAASnJ,GAAMq6B,UAI3CS,GAAqB/zB,GAAK,CAC9Bg0B,aAAcrwC,KACdswC,KAAMxxB,KACN4kB,MAAOhlB,GAASI,MAChByxB,cAAexE,KAGXyE,GAAwBn0B,GAAK,CACjCsU,SAAUrb,GAAM6yB,IAChBvX,SAAUtb,GAAM6yB,MAMZsI,GAAiCp0B,GAAK,CAC1CsT,IAAK6a,GACLkG,IAAK1wC,KACL2wC,kBAAmBjyB,GACjBD,GACEnJ,GACE+G,GAAK,CACHwU,MAAO7wB,KACPixB,aAAc3b,GACZ+G,GAAK,CACH4Z,SAAU3gB,GAAMtV,MAChB+B,KAAM+c,KACNyS,eAAgBvxB,aAO5B4wC,YAAat7B,GAAMtV,MACnB6wC,aAAcv7B,GAAMtV,MACpB8wC,YAAapyB,GAASD,GAASnJ,GAAMwJ,QACrCiyB,iBAAkBryB,GAASD,GAASnJ,GAAM86B,MAC1CY,kBAAmBtyB,GAASD,GAASnJ,GAAM86B,MAC3Ca,gBAAiBvyB,GAAS8xB,IAC1BU,qBAAsBxyB,GAAS1e,QAM3BmxC,GAAuC90B,GAAK,CAChDsT,IAAK6a,GACLkG,IAAK1wC,KACL2wC,kBAAmBjyB,GACjBD,GACEnJ,GACE+G,GAAK,CACHwU,MAAO7wB,KACPixB,aAAc3b,GAAM46B,SAK5BU,YAAat7B,GAAMtV,MACnB6wC,aAAcv7B,GAAMtV,MACpB8wC,YAAapyB,GAASD,GAASnJ,GAAMwJ,QACrCiyB,iBAAkBryB,GAASD,GAASnJ,GAAM86B,MAC1CY,kBAAmBtyB,GAASD,GAASnJ,GAAM86B,MAC3Ca,gBAAiBvyB,GAAS8xB,IAC1BU,qBAAsBxyB,GAAS1e,QAG3BoxC,GAA2BxzC,GAAM,CAACygB,GAAQ,GAAIA,GAAQ,YAGtDgzB,GAAgBh1B,GAAK,CACzBqV,OAAQ5S,KACRmjB,SAAUjiC,KACV4pC,YAAanrB,GAASze,MACtBsxC,WAAY7yB,GAASK,MACrB+qB,WAAYnrB,GAASD,GAASze,SAM1BuxC,GAAoBzI,GACxBrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ6jC,aAAcvuB,GACZ+G,GAAK,CACHob,YAAamY,GACbne,KAAMhT,GAASgyB,IACf1a,QAASrX,GAAS0yB,OAGtBM,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,MACpBoqC,YAAa3rB,GAASze,UAQtB2xC,GAA4B7I,GAChCrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ0xC,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,MACpBoqC,YAAa3rB,GAASze,UAQtB4xC,GAAgC9I,GACpCrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ6jC,aAAcvuB,GACZ+G,GAAK,CACHob,YAAasY,GACbte,KAAMhT,GAASgyB,IACf1a,QAASrX,GAAS0yB,OAGtBM,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,MACpBoqC,YAAa3rB,GAASze,UAQtB6xC,GAA0B/I,GAC9BrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ6jC,aAAcvuB,GACZ+G,GAAK,CACHob,YAAa0Y,GACb1e,KAAMhT,GAAS0yB,IACfpb,QAASrX,GAAS0yB,OAGtBM,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,MACpBoqC,YAAa3rB,GAASze,UAQtB8xC,GAAsChJ,GAC1CrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ6jC,aAAcvuB,GACZ+G,GAAK,CACHob,YAAasY,GACbte,KAAMhT,GAAS0yB,IACfpb,QAASrX,GAAS0yB,OAGtBM,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,MACpBoqC,YAAa3rB,GAASze,UAQtB+xC,GAAkCjJ,GACtCrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ0xC,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,MACpBoqC,YAAa3rB,GAASze,UAUtBgyC,GAA6BlJ,GACjCrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ6jC,aAAcvuB,GACZ+G,GAAK,CACHob,YAAamY,GACbne,KAAMhT,GAASgyB,OAGnBiB,QAAShzB,GAASpJ,GAAM+7B,KACxBlE,UAAW1uB,GAASze,UAQpBiyC,GAA8BnJ,GAClCrqB,GACEpC,GAAK,CACH6e,UAAWpc,KACX0yB,kBAAmB1yB,KACnB2yB,WAAYzxC,KACZ06B,WAAYplB,GAAMwJ,MAClBquB,UAAW1uB,GAASze,UAQpBkyC,GAA0BpJ,GAC9BrqB,GACEpC,GAAK,CACH6oB,KAAMllC,KACNyxB,KAAMgf,GACNtD,UAAWzuB,GAASD,GAASze,OAC7By3B,YAAamY,GACb7Z,QAASrX,GAAS0yB,QAQlBe,GAAgCrJ,GACpCrqB,GACEpC,GAAK,CACH6oB,KAAMllC,KACNy3B,YAAa0Y,GACb1e,KAAMhT,GAAS0yB,IACfhE,UAAWzuB,GAASD,GAASze,OAC7B+1B,QAASrX,GAAS0yB,QAUlBgB,GAAwCrJ,GAC5C1sB,GAAK,CACH6e,UAAWpc,KACX2hB,cAAepkB,GAAK,CAClBg2B,qBAAsBryC,UAQtBsyC,GAA8BvJ,GAClC1sB,GAAK,CACH6e,UAAWpc,KACX8b,qBAAsB56B,QAcpBuyC,GAAuCzJ,GAC3CxzB,GAXuB+G,GAAK,CAC5B6oB,KAAMllC,KACNwyC,gBAAiBxyC,KACjByyC,SAAUzyC,KACV0yC,iBAAkB1yC,SAad2yC,GAA4B5J,GAChCtqB,GACEpC,GAAK,CACHokB,cAAepkB,GAAK,CAClBg2B,qBAAsBryC,WASxB4yC,GAA0B9J,GAAchqB,MAKxC+zB,GAA2B/J,GAAchqB,MAwQzCg0B,GAAaz2B,GAAK,CACtBsT,IAAK6a,GACL7E,KAAMrwB,GAAMwJ,MACZiI,UAAWjI,OAePi0B,GAAyB12B,GAAK,CAClCpH,OAAQ+zB,GAA6B8J,IACrCxF,aAActtC,OAyHVgzC,GAAsB,CAC1B,gBAAkB,wBAMb,MAAMC,GAoFXv9C,YACEw9C,EACA3K,GAEA,IAAI4K,EACAC,EACAlN,EACAmN,EACAC,EACAC,EANJ,KAtFeC,iBAAW,OACXC,uCAAiC,OACjC1P,kBAAY,OACZ2P,oBAAc,OACdC,gBAAU,OACVC,iBAAW,OACXC,sBAAgB,OAChBC,mBAAa,OACbC,wBAAkC,EAAK,KACvCC,uBAEN,KAAI,KACEC,yBAEN,KAAI,KAOHC,wBAAkC,EAAC,KAE9BC,0BAAoC,EAAK,KACzCC,mBAA6B,EAAK,KAClCC,eAKb,CACFC,gBAAiB,KACjBC,UAAW,EACXC,sBAAuB,GACvBC,oBAAqB,IACtB,KAEwBC,0BAAkD,EAAC,KACnDC,oDAIrB,CAAC,EAAC,KACmBC,wCAIrB,CAAC,EAAC,KACmBC,wCAIrB,CAAC,EAAC,KACmBC,6CAIrB,CAAC,EAAC,KACmBC,qBAErB,CAAC,EAAC,KAcmBC,gCACvB,IAAI33B,IAkBAkrB,GAAoD,kBAAvBA,EAC/BlmC,KAAKmxC,YAAcjL,EACVA,IACTlmC,KAAKmxC,YAAcjL,EAAmBnJ,WACtC/8B,KAAKoxC,kCACHlL,EAAmB0M,iCACrB9B,EAAa5K,EAAmB4K,WAChCC,EAAc7K,EAAmB6K,YACjClN,EAAQqC,EAAmBrC,MAC3BmN,EAAkB9K,EAAmB8K,gBACrCC,EAA0B/K,EAAmB+K,wBAC7CC,EAAYhL,EAAmBgL,WAGjClxC,KAAK0hC,aApqFT,SAA2BmR,GACzB,IAAqC,IAAjC,WAAWC,KAAKD,GAClB,MAAM,IAAIhgD,UAAU,qDAEtB,OAAOggD,CACT,CA+pFwBE,CAAkBlC,GACtC7wC,KAAKqxC,eAAiBP,GD1gGnB,SAA0BD,GAC/B,MAAMmC,EAAUnC,EAASoC,MAAMpN,IAC/B,GAAe,MAAXmN,EACF,MAAMngD,UAA+C,qCAAAg+C,OAEvD,MACEpc,EACAye,EACAC,EACA/5B,GACE45B,EACEI,EAAWvC,EAASwC,WAAW,UAAY,OAAS,MACpDC,EACa,MAAjBH,EAAwB,KAAO9/B,SAAS8/B,EAAcp2C,MAAM,GAAI,IASlE,MAAQ,GAAEq2C,MAAaF,IADR,MAAbI,EAAoB,GAAS,IAAAA,EAAY,MACMl6B,GACnD,CCm/FwCm6B,CAAiB1C,GAErD7wC,KAAKsxC,WA9jDT,SACErN,EACA8M,EACAyC,EACAxC,EACAC,EACAC,GAEA,MAAMrN,EAAQ2P,GAA4B7P,GAC1C,IA+CI8P,EAwEJ,OArHmB,MAAbvC,GACF/X,QAAQC,KACN,8JA6CF4X,IACFyC,EAAsBr9B,MAAOs9B,EAAMC,KACjC,MAAMC,QAA0B,IAAInW,SAClC,CAACC,EAASkH,KACR,IACEoM,EAAgB0C,EAAMC,GAAM,CAACE,EAAcC,IACzCpW,EAAQ,CAACmW,EAAcC,MAEzB,MAAOtrB,GACPoc,EAAOpc,EACT,KAGJ,aAAaqb,KAAS+P,EAAkB,GAItB,IAAIG,KAAJ,EAAc39B,MAAO49B,EAASC,KAClD,MAAM35B,EAAU,CACd45B,OAAQ,OACRC,KAAMH,EACNI,WAtEAA,EAuEAC,QAASrgD,OAAOG,OACd,CACE,eAAgB,oBAElB48C,GAAe,CAAC,EAChBJ,KAIJ,IACE,IACItuC,EADAiyC,EAA4B,EAE5BC,EAAW,IACf,KAEIlyC,EADEoxC,QACUA,EAAoBxP,EAAK3pB,SAEzBupB,EAAMI,EAAK3pB,GAGN,MAAfjY,EAAI66B,SAGwB,IAA5B+T,IAGJqD,GAA6B,EACK,IAA9BA,IAGJnb,QAAQqb,IACL,yBAAwBnyC,EAAI66B,UAAU76B,EAAIoyC,+BAA+BF,sBAEtEhX,GAAMgX,GACZA,GAAY,EAGd,MAAMG,QAAaryC,EAAIqyC,OACnBryC,EAAIsyC,GACNV,EAAS,KAAMS,GAEfT,EAAS,IAAIt/C,MAAO,GAAE0N,EAAI66B,UAAU76B,EAAIoyC,eAAeC,MAEzD,MAAOpnB,GACHA,aAAe34B,OAAOs/C,EAAS3mB,EACrC,IACC,CAAC,EAGN,CA67CsBsnB,CAChB/D,EACAE,EACAlN,EACAmN,EACAC,EACAC,GAEFlxC,KAAKuxC,YAn8CT,SAA0BsD,GACxB,MAAO,CAACX,EAAQ7gB,IACP,IAAIoK,SAAQ,CAACC,EAASkH,KAC3BiQ,EAAOb,QAAQE,EAAQ7gB,GAAM,CAAC/F,EAAUuZ,KAClCvZ,EACFsX,EAAOtX,GAGToQ,EAAQmJ,EAAS,GACjB,GAGR,CAu7CuBiO,CAAiB90C,KAAKsxC,YACzCtxC,KAAKwxC,iBAt7CT,SAA+BqD,GAC7B,OAAQE,GACC,IAAItX,SAAQ,CAACC,EAASkH,KAEH,IAApBmQ,EAAS5hD,QAAcuqC,EAAQ,IAEnC,MAAMsX,EAAQD,EAAShwC,KAAK46B,GACnBkV,EAAOb,QAAQrU,EAAOsV,WAAYtV,EAAOtM,QAGlDwhB,EAAOb,QAAQgB,GAAO,CAAC1nB,EAAUuZ,KAC3BvZ,EACFsX,EAAOtX,GAGToQ,EAAQmJ,EAAS,GACjB,GAGR,CAm6C4BqO,CAAsBl1C,KAAKsxC,YAEnDtxC,KAAKyxC,cAAgB,IAAI3N,GAAmB9jC,KAAKqxC,eAAgB,CAC/DjN,aAAa,EACbC,eAAgB8Q,MAElBn1C,KAAKyxC,cAAc2D,GAAG,OAAQp1C,KAAKq1C,UAAU96C,KAAKyF,OAClDA,KAAKyxC,cAAc2D,GAAG,QAASp1C,KAAKs1C,WAAW/6C,KAAKyF,OACpDA,KAAKyxC,cAAc2D,GAAG,QAASp1C,KAAKu1C,WAAWh7C,KAAKyF,OACpDA,KAAKyxC,cAAc2D,GACjB,sBACAp1C,KAAKw1C,yBAAyBj7C,KAAKyF,OAErCA,KAAKyxC,cAAc2D,GACjB,sBACAp1C,KAAKy1C,gCAAgCl7C,KAAKyF,OAE5CA,KAAKyxC,cAAc2D,GACjB,mBACAp1C,KAAK01C,sBAAsBn7C,KAAKyF,OAElCA,KAAKyxC,cAAc2D,GACjB,2BACAp1C,KAAK21C,6BAA6Bp7C,KAAKyF,OAEzCA,KAAKyxC,cAAc2D,GACjB,wBACAp1C,KAAK41C,2BAA2Br7C,KAAKyF,OAEvCA,KAAKyxC,cAAc2D,GACjB,mBACAp1C,KAAK61C,sBAAsBt7C,KAAKyF,OAElCA,KAAKyxC,cAAc2D,GACjB,mBACAp1C,KAAK81C,sBAAsBv7C,KAAKyF,MAEpC,CAKI+8B,iBACF,OAAO/8B,KAAKmxC,WACd,CAKI4E,kBACF,OAAO/1C,KAAK0hC,YACd,CAKAtrB,2BACEK,EACAyvB,GAGA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,CAACv/B,EAAUgW,YACXsQ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,aAAcle,GACzBqT,GAAwB/oC,OACtD,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,6BAA4B/R,EAAUgW,cAG3C,OAAOpqB,EAAIuQ,MACb,CAKAwD,iBACEK,EACAyvB,GAEA,aAAalmC,KAAKi2C,qBAAqBx/B,EAAWyvB,GAC/CgQ,MAAK3tC,GAAKA,EAAE3M,QACZu6C,OAAMh9C,IACL,MAAM,IAAIxE,MACR,oCAAsC8hB,EAAUgW,WAAa,KAAOtzB,EACrE,GAEP,CAKAid,mBAAmBysB,GACjB,MACMxgC,EAAMpO,SADY+L,KAAKuxC,YAAY,eAAgB,CAAC1O,IAC5B4D,GAAcrqB,GAASze,QACrD,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,qCAAoCqa,KAGzC,OAAOxgC,EAAIuQ,MACb,CAMAwD,6BACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,oBAAqB,IAChC9K,GAAc9oC,OAC5C,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,qCAGJ,OAAOnmB,EAAIuQ,MACb,CAKAwD,+BACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,yBAA0B,IACrClI,IAC9B,GAAI,UAAWhnC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,uCAGJ,OAAOnmB,EAAIuQ,MACb,CAKAwD,gBACE+kB,GAEA,IAAIib,EAA6B,CAAC,EAEhCA,EADoB,kBAAXjb,EACG,CAAC4B,WAAY5B,GAChBA,EACG,IACPA,EACH4B,WAAa5B,GAAUA,EAAO4B,YAAe/8B,KAAK+8B,YAGxC,CACVA,WAAY/8B,KAAK+8B,YAIrB,MACM16B,EAAMpO,SADY+L,KAAKuxC,YAAY,YAAa,CAAC6E,IACzB9M,IAC9B,GAAI,UAAWjnC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,wBAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,qBACEigC,EACAtZ,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAAW,CAACK,EAAiB5pB,YAAasQ,GAEtD16B,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAC7BqT,GAAwBgD,KACtD,GAAI,UAAWrnC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,8BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,6BACEkgC,EACAvZ,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAAW,CAACM,EAAa7pB,YAAasQ,GAElD16B,EAAMpO,SADY+L,KAAKuxC,YAAY,yBAA0Ble,GACrCqT,GAAwBgD,KACtD,GAAI,UAAWrnC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,uCAGJ,OAAOnmB,EAAIuQ,MACb,CAOAwD,8BACEmgC,EACAnlB,EACA8U,GAMA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GAC9B,IAAIsQ,EAAe,CAACD,EAAa9pB,YAC7B,SAAU2E,EACZolB,EAAMh+C,KAAK,CAACy1C,KAAM7c,EAAO6c,KAAKxhB,aAE9B+pB,EAAMh+C,KAAK,CAACs0B,UAAWsE,EAAOtE,UAAUL,aAG1C,MAAM4G,EAAOrzB,KAAKg2C,WAAWQ,EAAOzZ,EAAY,SAAU5B,GAEpD94B,EAAMpO,SADY+L,KAAKuxC,YAAY,0BAA2Ble,GACtC0W,IAC9B,GAAI,UAAW1nC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,iDAAgD+tB,EAAa9pB,cAGlE,OAAOpqB,EAAIuQ,MACb,CAOAwD,oCACEmgC,EACAnlB,EACA2L,GAMA,IAAIyZ,EAAe,CAACD,EAAa9pB,YAC7B,SAAU2E,EACZolB,EAAMh+C,KAAK,CAACy1C,KAAM7c,EAAO6c,KAAKxhB,aAE9B+pB,EAAMh+C,KAAK,CAACs0B,UAAWsE,EAAOtE,UAAUL,aAG1C,MAAM4G,EAAOrzB,KAAKg2C,WAAWQ,EAAOzZ,EAAY,cAE1C16B,EAAMpO,SADY+L,KAAKuxC,YAAY,0BAA2Ble,GACtC6W,IAC9B,GAAI,UAAW7nC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,iDAAgD+tB,EAAa9pB,cAGlE,OAAOpqB,EAAIuQ,MACb,CAKAwD,yBACE+kB,GAEA,MAAMsb,EAAM,IACPtb,EACH4B,WAAa5B,GAAUA,EAAO4B,YAAe/8B,KAAK+8B,YAE9C1J,EAAOojB,EAAIrlB,QAAUqlB,EAAI1Z,WAAa,CAAC0Z,GAAO,GAE9Cp0C,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjC8W,IAC9B,GAAI,UAAW9nC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,kCAE1C,OAAOnmB,EAAIuQ,MACb,CAMAwD,8BACEsgC,EACA3Z,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAAW,CAACU,EAAYjqB,YAAasQ,GAEjD16B,EAAMpO,SADY+L,KAAKuxC,YAAY,0BAA2Ble,GACtCyW,IAC9B,GAAI,UAAWznC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,wCAGJ,OAAOnmB,EAAIuQ,MACb,CAKAwD,+BACEK,EACAyvB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,CAACv/B,EAAUgW,YACXsQ,EACA,SACA5B,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAGzDqT,GAAwBtqB,GAASguB,MAEnC,GAAI,UAAW/nC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,oCAAmC/R,EAAUgW,cAGlD,OAAOpqB,EAAIuQ,MACb,CAKAwD,2BACEK,EACAyvB,GAIA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,CAACv/B,EAAUgW,YACXsQ,EACA,aACA5B,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAGzDqT,GAAwBtqB,GAASmuB,MAEnC,GAAI,UAAWloC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,oCAAmC/R,EAAUgW,cAGlD,OAAOpqB,EAAIuQ,MACb,CAKAwD,qBACEK,EACAyvB,GAEA,IAKE,aAJkBlmC,KAAK22C,yBACrBlgC,EACAyvB,IAEStqC,MACX,MAAOzC,GACP,MAAM,IAAIxE,MACR,oCAAsC8hB,EAAUgW,WAAa,KAAOtzB,EAExE,CACF,CAKAid,gCACEwgC,EACAC,GAIA,MAAM,WAAC9Z,EAAU,OAAE5B,GAAU8K,GAA4B4Q,GACnDj6B,EAAOg6B,EAAW7xC,KAAI6Q,GAAOA,EAAI6W,aACjC4G,EAAOrzB,KAAKg2C,WAAW,CAACp5B,GAAOmgB,EAAY,aAAc5B,GAEzD94B,EAAMpO,SADY+L,KAAKuxC,YAAY,sBAAuBle,GAG9DqT,GAAwBzzB,GAAMmJ,GAASmuB,OAEzC,GAAI,UAAWloC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,mCAAkC5L,KAGvC,OAAOva,EAAIuQ,MACb,CAKAwD,wCACEwgC,EACA1Q,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxBtpB,EAAOg6B,EAAW7xC,KAAI6Q,GAAOA,EAAI6W,aACjC4G,EAAOrzB,KAAKg2C,WAAW,CAACp5B,GAAOmgB,EAAY,SAAU5B,GAErD94B,EAAMpO,SADY+L,KAAKuxC,YAAY,sBAAuBle,GAG9DqT,GAAwBzzB,GAAMmJ,GAASguB,OAEzC,GAAI,UAAW/nC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,mCAAkC5L,KAGvC,OAAOva,EAAIuQ,MACb,CAKAwD,8BACEwgC,EACA1Q,GAMA,aAJkBlmC,KAAK82C,kCACrBF,EACA1Q,IAEStqC,KACb,CAKAwa,yBACEK,EACAyvB,EACAnD,GAEA,MAAM,WAAChG,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,CAACv/B,EAAUgW,YACXsQ,OACAhoC,EACA,IACKomC,EACH4H,MAAgB,MAATA,EAAgBA,EAAc,OAAN5H,QAAM,IAANA,OAAM,EAANA,EAAQ4H,QAKrC1gC,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjCoT,GAAcgE,KAC5C,GAAI,UAAWpoC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,kCAAiC/R,EAAUgW,cAGhD,OAAOpqB,EAAIuQ,MACb,CAOAwD,yBACE0W,EACAiqB,GAEA,MAAM,WAACha,EAAU,OAAE5B,GACjB8K,GAA4B8Q,IACxB,SAACC,KAAaC,GAAyB9b,GAAU,CAAC,EAClD9H,EAAOrzB,KAAKg2C,WAChB,CAAClpB,EAAUL,YACXsQ,EACAia,GAAY,SACZC,GAGI50C,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjCoT,GAAcxzB,GAAMo3B,MAClD,GAAI,UAAWhoC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,2CAA0CsE,EAAUL,cAGzD,OAAOpqB,EAAIuQ,MACb,CAOAwD,+BACE0W,EACAiqB,GAOA,MAAM,WAACha,EAAU,OAAE5B,GACjB8K,GAA4B8Q,GACxB1jB,EAAOrzB,KAAKg2C,WAChB,CAAClpB,EAAUL,YACXsQ,EACA,aACA5B,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GAG7DoT,GAAcxzB,GAAMu3B,MAEtB,GAAI,UAAWnoC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,2CAA0CsE,EAAUL,cAGzD,OAAOpqB,EAAIuQ,MACb,CAeAwD,yBACE8gC,EACAna,GAEA,IAAIoa,EAaAC,EAXJ,GAAuB,iBAAZF,EACTC,EAAeD,MACV,KAAAG,EACL,MAAMlc,EAAS+b,EAEf,GAAsB,QAAtBG,EAAIlc,EAAOiC,mBAAW,IAAAia,GAAlBA,EAAoBC,QACtB,OAAO7Z,QAAQmH,OAAOzJ,EAAOiC,YAAYma,QAE3CJ,EAAehc,EAAOzW,SACxB,CAIA,IACE0yB,EAAmB9qB,KAAAA,OAAY6qB,GAC/B,MAAO7pB,GACP,MAAM,IAAI34B,MAAM,qCAAuCwiD,EACzD,CAIA,OAFAh5C,GAAmC,KAA5Bi5C,EAAiBjkD,OAAe,gCAEf,kBAAb+jD,QACIl3C,KAAKw3C,6CAA6C,CAC7Dza,WAAYA,GAAc/8B,KAAK+8B,WAC/BrY,UAAWyyB,IAEJ,yBAA0BD,QACtBl3C,KAAKy3C,qDAAqD,CACrE1a,WAAYA,GAAc/8B,KAAK+8B,WAC/Bma,mBAGWl3C,KAAK03C,4CAA4C,CAC5D3a,WAAYA,GAAc/8B,KAAK+8B,WAC/Bma,YAGN,CAEQS,uBAAuBC,GAC7B,OAAO,IAAIna,SAAe,CAAChJ,EAAGmQ,KACd,MAAVgT,IAGAA,EAAON,QACT1S,EAAOgT,EAAOL,QAEdK,EAAOC,iBAAiB,SAAS,KAC/BjT,EAAOgT,EAAOL,OAAO,IAEzB,GAEJ,CAEQO,kCAAiCC,GAYvC,IACIC,EACAC,GAdoC,WACxClb,EAAU,UACVrY,GAIDqzB,EAWKt8B,GAAO,EAkGX,MAAO,CAACy8B,kBAVkBA,KACpBD,IACFA,IACAA,OAAkDljD,GAErB,MAA3BijD,IACFh4C,KAAKm4C,wBAAwBH,GAC7BA,OAA0BjjD,EAC5B,EAEyBqjD,oBAjGC,IAAI3a,SAG7B,CAACC,EAASkH,KACX,IACEoT,EAA0Bh4C,KAAKq4C,YAC7B3zB,GACA,CAAC9R,EAAyBiH,KACxBm+B,OAA0BjjD,EAC1B,MAAM8xC,EAAW,CACfhtB,UACAje,MAAOgX,GAET8qB,EAAQ,CAAC4a,OAAQtgB,GAAkBugB,UAAW1R,YAAU,GAE1D9J,GAEF,MAAMyb,EAA2B,IAAI/a,SACnCgb,IACiC,MAA3BT,EACFS,IAEAR,EACEj4C,KAAK04C,2BACHV,GACAW,IACoB,eAAdA,GACFF,GACF,GAGR,IAGJ,WAEE,SADMD,EACF/8B,EAAM,OACV,MAAMorB,QAAiB7mC,KAAK44C,mBAAmBl0B,GAC/C,GAAIjJ,EAAM,OACV,GAAgB,MAAZorB,EACF,OAEF,MAAM,QAAChtB,EAAO,MAAEje,GAASirC,EACzB,GAAa,MAATjrC,EAGJ,GAAS,OAALA,QAAK,IAALA,GAAAA,EAAO0xB,IACTsX,EAAOhpC,EAAM0xB,SACR,CACL,OAAQyP,GACN,IAAK,YACL,IAAK,SACL,IAAK,eACH,GAAiC,cAA7BnhC,EAAMuxC,mBACR,OAEF,MAEF,IAAK,YACL,IAAK,MACL,IAAK,OACH,GAC+B,cAA7BvxC,EAAMuxC,oBACuB,cAA7BvxC,EAAMuxC,mBAEN,OAQN1xB,GAAO,EACPiiB,EAAQ,CACN4a,OAAQtgB,GAAkBugB,UAC1B1R,SAAU,CACRhtB,UACAje,UAGN,CACD,EAhDD,GAiDA,MAAO0xB,GACPsX,EAAOtX,EACT,KAaJ,CAEA,2DAAkEurB,GAM/D,IANgE,WACjE9b,EACAma,UAAU,YAAC9Z,EAAW,qBAAE7E,EAAoB,UAAE7T,IAI/Cm0B,EACKp9B,GAAgB,EACpB,MAAMq9B,EAAgB,IAAIrb,SAEvBC,IACD,MAAMqb,EAAmB3iC,UACvB,IAEE,aAD0BpW,KAAKg5C,eAAejc,GAE9C,MAAOkc,GACP,OAAQ,CACV,GAEF,WACE,IAAIC,QAA2BH,IAC/B,IAAIt9B,EAAJ,CACA,KAAOy9B,GAAsB3gB,GAAsB,CAEjD,SADMgF,GAAM,KACR9hB,EAAM,OAEV,GADAy9B,QAA2BH,IACvBt9B,EAAM,MACZ,CACAiiB,EAAQ,CAAC4a,OAAQtgB,GAAkBmhB,sBAPnB,CAQjB,EAVD,EAUI,KAEA,kBAACjB,EAAiB,oBAAEE,GACxBp4C,KAAK83C,kCAAkC,CAAC/a,aAAYrY,cAChD00B,EAAsBp5C,KAAK23C,uBAAuBva,GACxD,IAAIxqB,EACJ,IACE,MAAMymC,QAAgB5b,QAAQ6b,KAAK,CACjCF,EACAhB,EACAU,IAEF,GAAIO,EAAQf,SAAWtgB,GAAkBugB,UAGvC,MAAM,IAAI3qB,GAA2ClJ,GAFrD9R,EAASymC,EAAQxS,QAIrB,CAAE,QACAprB,GAAO,EACPy8B,GACF,CACA,OAAOtlC,CACT,CAEA,kDAAyD2mC,GAYtD,IAZuD,WACxDxc,EACAma,UAAU,YACR9Z,EAAW,eACXxE,EAAc,mBACdyE,EAAkB,WAClBC,EAAU,UACV5Y,IAKH60B,EACK99B,GAAgB,EACpB,MAAMq9B,EAAgB,IAAIrb,SAGvBC,IACD,IAAI8b,EAAwClc,EACxCmc,EAAiC,KACrC,MAAMC,EAAuBtjC,UAC3B,IACE,MAAM,QAACyD,EAASje,MAAOyiC,SAAsBr+B,KAAK25C,mBAChDtc,EACA,CACEN,aACAnE,mBAIJ,OADA6gB,EAAkB5/B,EAAQgpB,KACP,OAAZxE,QAAY,IAAZA,OAAY,EAAZA,EAAclR,MACrB,MAAOh0B,GAGP,OAAOqgD,CACT,GAEF,WAEE,GADAA,QAA0BE,KACtBj+B,EACJ,OAEE,CACA,GAAI6hB,IAAekc,EAKjB,YAJA9b,EAAQ,CACN4a,OAAQtgB,GAAkB4hB,cAC1BC,2BAA4BJ,IAKhC,SADMlc,GAAM,KACR9hB,EAAM,OAEV,GADA+9B,QAA0BE,IACtBj+B,EAAM,MACZ,CACD,EAlBD,EAkBI,KAEA,kBAACy8B,EAAiB,oBAAEE,GACxBp4C,KAAK83C,kCAAkC,CAAC/a,aAAYrY,cAChD00B,EAAsBp5C,KAAK23C,uBAAuBva,GACxD,IAAIxqB,EACJ,IACE,MAAMymC,QAAgB5b,QAAQ6b,KAAK,CACjCF,EACAhB,EACAU,IAEF,GAAIO,EAAQf,SAAWtgB,GAAkBugB,UACvC3lC,EAASymC,EAAQxS,aACZ,KAAAiT,EAEL,IAAIC,EAIJ,OAEE,KAAAC,EACA,MAAM9c,QAAel9B,KAAK44C,mBAAmBl0B,GAC7C,GAAc,MAAVwY,EACF,MAEF,KACEA,EAAOrjB,QAAQgpB,MACoB,QADhBmX,EAClBX,EAAQQ,kCAA0B,IAAAG,EAAAA,EAAIphB,IAFzC,CAOAmhB,EAAkB7c,EAClB,KAFA,OAFQK,GAAM,IAKhB,CACA,GAAmB,QAAnBuc,EAAIC,SAAe,IAAAD,IAAfA,EAAiBl+C,MAyCnB,MAAM,IAAIqyB,GAAoCvJ,GAzCpB,CAC1B,MAAMu1B,EAAsBld,GAAc,aACpC,mBAACoQ,GAAsB4M,EAAgBn+C,MAC7C,OAAQq+C,GACN,IAAK,YACL,IAAK,SACH,GACyB,cAAvB9M,GACuB,cAAvBA,GACuB,cAAvBA,EAEA,MAAM,IAAIlf,GAAoCvJ,GAEhD,MACF,IAAK,YACL,IAAK,SACL,IAAK,eACH,GACyB,cAAvByoB,GACuB,cAAvBA,EAEA,MAAM,IAAIlf,GAAoCvJ,GAEhD,MACF,IAAK,YACL,IAAK,MACL,IAAK,OACH,GAA2B,cAAvByoB,EACF,MAAM,IAAIlf,GAAoCvJ,GAQpD9R,EAAS,CACPiH,QAASkgC,EAAgBlgC,QACzBje,MAAO,CAAC0xB,IAAKysB,EAAgBn+C,MAAM0xB,KAEvC,CAGF,CACF,CAAE,QACA7R,GAAO,EACPy8B,GACF,CACA,OAAOtlC,CACT,CAEA,mDAA0DsnC,GAMvD,IACGC,GAPqD,WACzDpd,EAAU,UACVrY,GAIDw1B,EAEC,MAAMpB,EAAgB,IAAIrb,SAGvBC,IACD,IAAI0c,EAAYp6C,KAAKoxC,mCAAqC,IAC1D,OAAQrU,GACN,IAAK,YACL,IAAK,SACL,IAAK,SACL,IAAK,YACL,IAAK,eACHqd,EAAYp6C,KAAKoxC,mCAAqC,IAQ1D+I,EAAYxc,YACV,IAAMD,EAAQ,CAAC4a,OAAQtgB,GAAkBqiB,UAAWD,eACpDA,EACD,KAEG,kBAAClC,EAAiB,oBAAEE,GACxBp4C,KAAK83C,kCAAkC,CACrC/a,aACArY,cAEJ,IAAI9R,EACJ,IACE,MAAMymC,QAAgB5b,QAAQ6b,KAAK,CAAClB,EAAqBU,IACzD,GAAIO,EAAQf,SAAWtgB,GAAkBugB,UAGvC,MAAM,IAAIzqB,GACRpJ,EACA20B,EAAQe,UAAY,KAJtBxnC,EAASymC,EAAQxS,QAOrB,CAAE,QACAyT,aAAaH,GACbjC,GACF,CACA,OAAOtlC,CACT,CAKAwD,wBACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,kBAAmB,IAC9B9K,GAAcxzB,GAAMi5B,MAClD,GAAI,UAAW7pC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,+BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,sBAAsB2mB,GACpB,MAAM1J,EAAOrzB,KAAKg2C,WAAW,GAAIjZ,GAE3B16B,EAAMpO,SADY+L,KAAKuxC,YAAY,kBAAmBle,GAC9BwZ,IAC9B,GAAI,UAAWxqC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,+BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,cACE8vB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,GACAjZ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,UAAWle,GACtBoT,GAAc9oC,OAC5C,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,sBAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,oBACE8vB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,GACAjZ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,gBAAiBle,GAC5BoT,GAAchqB,OAC5C,GAAI,UAAWpa,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,6BAE1C,OAAOnmB,EAAIuQ,MACb,CAQAwD,qBACEmkC,EACAC,GAEA,MAAMnnB,EAAO,CAACknB,EAAWC,GAEnBn4C,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAC7BoT,GAAcxzB,GAAM6yB,MAClD,GAAI,UAAWzjC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,8BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,yBACEsO,EACAyW,GAEA,MAAM,QAACthB,EAASje,MAAOvH,SAAgB2L,KAAKy6C,qBAC1C,CAAC/1B,GACDyW,GAEFh9B,GAAyB,IAAlB9J,EAAOlB,QAEd,MAAO,CAAC0mB,UAASje,MADHvH,EAAO,GAEvB,CAKA+hB,2BACEiiB,EACA8C,GAEA,MAAMwE,EAAgB,CAACtH,GACnB8C,GACFwE,EAAOnnC,KAAK2iC,GAEd,MACM94B,EAAMpO,SADY+L,KAAKuxC,YAAY,uBAAwB5R,GACnCyN,IAC9B,GAAI,UAAW/qC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,kCAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,0BACE8vB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,GACAjZ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,sBAAuBle,GAClCoT,GAAc9oC,OAC5C,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,mCAGJ,OAAOnmB,EAAIuQ,MACb,CAOAwD,qBAAqB2mB,GAKnB,aAJqB/8B,KAAK06C,UAAU,CAClC3d,aACA4d,mCAAmC,KAEvB/+C,MAAM8rC,KACtB,CAKAtxB,2BACE2mB,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAAW,GAAIjZ,GAE3B16B,EAAMpO,SADY+L,KAAKuxC,YAAY,uBAAwBle,GACnC2V,IAC9B,GAAI,UAAW3mC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,2BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,yBACEqc,EACAsQ,EACAmD,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,CAACvjB,EAAU1tB,KAAIsqB,GAAUA,EAAO5C,cAChCsQ,OACAhoC,EACA,IACKomC,EACH4H,MAAgB,MAATA,EAAgBA,EAAc,OAAN5H,QAAM,IAANA,OAAM,EAANA,EAAQ4H,QAIrC1gC,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjC+T,IAC9B,GAAI,UAAW/kC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,kCAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,yBACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,mBAAoB,IAC/BtI,IAC9B,GAAI,UAAW5mC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,gCAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,mBACE8vB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,GACAjZ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,eAAgBle,GAC3B6V,IAC9B,GAAI,UAAW7mC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,4BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,yBACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,mBAAoB,IAC/BpI,IAC9B,GAAI,UAAW9mC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,gCAE1C,MAAMoyB,EAAgBv4C,EAAIuQ,OAC1B,OAAO,IAAI0vB,GACTsY,EAAcrY,cACdqY,EAAcpY,yBACdoY,EAAcnY,OACdmY,EAAclY,iBACdkY,EAAcjY,gBAElB,CAMAvsB,0BACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,oBAAqB,IAChCnI,IAC9B,GAAI,UAAW/mC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,iCAE1C,OAAOnmB,EAAIuQ,MACb,CAMAwD,wCACE2e,EACAgI,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAAW,CAACjhB,GAAagI,GAKrC16B,EAAMpO,SAJY+L,KAAKuxC,YAC3B,oCACAle,GAE4Bga,IAC9B,MAAI,UAAWhrC,GACb82B,QAAQC,KAAK,sDACN,GAEF/2B,EAAIuQ,MACb,CAQAwD,mCAAmC2mB,GAMjC,MAAM1J,EAAOrzB,KAAKg2C,WAAW,GAAIjZ,GAE3B16B,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjC0c,IAC9B,GAAI,UAAW1tC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,kCAE1C,OAAOnmB,EAAIuQ,MACb,CAMAwD,kCACEokC,GAEA,MAIMn4C,EAAMpO,SAJY+L,KAAKuxC,YAC3B,8BACAiJ,EAAQ,CAACA,GAAS,IAEUtK,IAC9B,GAAI,UAAW7tC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,4CAIJ,OAAOnmB,EAAIuQ,MACb,CAOAwD,mCACEyiB,EACAkE,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAAW,CAACnd,GAAYkE,GAMpC16B,EAAMpO,SALY+L,KAAKuxC,YAC3B,+BACAle,GAG4Bid,IAC9B,GAAI,UAAWjuC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,gCAE1C,MAAM,QAAC3O,EAAO,MAAEje,GAASyG,EAAIuQ,OAC7B,MAAO,CACLiH,UACAje,MAAiB,OAAVA,EAAiBA,EAAMwiC,cAAgB,KAElD,CAKAhoB,uBACE/V,EACA08B,GAEA,MAAM8d,EAAcrvB,GAASnrB,EAAQqrB,aAAaxuB,SAAS,UACrDm2B,EAAOrzB,KAAKg2C,WAAW,CAAC6E,GAAc9d,GAGtC16B,EAAMpO,SAFY+L,KAAKuxC,YAAY,mBAAoBle,GAE/BqT,GAAwBtqB,GAASze,QAC/D,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,iCAE1C,GAAmB,OAAfnmB,EAAIuQ,OACN,MAAM,IAAIje,MAAM,qBAElB,OAAO0N,EAAIuQ,MACb,CAQAwD,yBACE2mB,GAEA,IAEE,aADkB/8B,KAAK86C,6BAA6B/d,IACzCnhC,MACX,MAAOzC,GACP,MAAM,IAAIxE,MAAM,mCAAqCwE,EACvD,CACF,CAMAid,yBACE8vB,GAEA,IAEE,aADkBlmC,KAAK+6C,6BAA6B7U,IACzCtqC,MACX,MAAOzC,GACP,MAAM,IAAIxE,MAAM,mCAAqCwE,EACvD,CACF,CAMAid,mCACE8vB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,GACAjZ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjC4c,IAC9B,GAAI,UAAW5tC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,kCAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,mBACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,aAAc,IACzB9K,GAAc6B,KAC5C,GAAI,UAAWjmC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,yBAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,uBACE,MACM/T,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkB,IAC7B9K,GAAchqB,OAC5C,GAAI,UAAWpa,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,8BAE1C,OAAOnmB,EAAIuQ,MACb,CA0DAwD,eACEysB,EACAgU,GAOA,MAAM,WAAC9Z,EAAU,OAAE5B,GAAU8K,GAA4B4Q,GACnDxjB,EAAOrzB,KAAKg7C,2BAChB,CAACnY,GACD9F,OACAhoC,EACAomC,GAEI8f,QAAkBj7C,KAAKuxC,YAAY,WAAYle,GACrD,IACE,OAAc,OAAN8H,QAAM,IAANA,OAAM,EAANA,EAAQ+f,oBACd,IAAK,WAAY,CACf,MAAM74C,EAAMpO,GAAOgnD,EAAW1L,IAC9B,GAAI,UAAWltC,EACb,MAAMA,EAAImmB,MAEZ,OAAOnmB,EAAIuQ,MACb,CACA,IAAK,OAAQ,CACX,MAAMvQ,EAAMpO,GAAOgnD,EAAW3L,IAC9B,GAAI,UAAWjtC,EACb,MAAMA,EAAImmB,MAEZ,OAAOnmB,EAAIuQ,MACb,CACA,QAAS,CACP,MAAMvQ,EAAMpO,GAAOgnD,EAAW/L,IAC9B,GAAI,UAAW7sC,EACb,MAAMA,EAAImmB,MAEZ,MAAM,OAAC5V,GAAUvQ,EACjB,OAAOuQ,EACH,IACKA,EACH4uB,aAAc5uB,EAAO4uB,aAAaz8B,KAChCo2C,IAAA,IAAC,YAAC/lB,EAAW,KAAEhG,EAAI,QAAEsE,GAAQynB,EAAA,MAAM,CACjC/rB,OACAgG,YAAa,IACRA,EACH/0B,QAASumC,GACPlT,EACA0B,EAAY/0B,UAGhBqzB,UACD,KAGL,IACN,GAEF,MAAOv6B,GACP,MAAM,IAAIoqC,GACRpqC,EACA,gCAEJ,CACF,CAsBAid,qBACEysB,EACAgU,GAOA,MAAM,WAAC9Z,EAAU,OAAE5B,GAAU8K,GAA4B4Q,GACnDxjB,EAAOrzB,KAAKg7C,2BAChB,CAACnY,GACD9F,EACA,aACA5B,GAEI8f,QAAkBj7C,KAAKuxC,YAAY,WAAYle,GACrD,IACE,OAAc,OAAN8H,QAAM,IAANA,OAAM,EAANA,EAAQ+f,oBACd,IAAK,WAAY,CACf,MAAM74C,EAAMpO,GAAOgnD,EAAWxL,IAC9B,GAAI,UAAWptC,EACb,MAAMA,EAAImmB,MAEZ,OAAOnmB,EAAIuQ,MACb,CACA,IAAK,OAAQ,CACX,MAAMvQ,EAAMpO,GAAOgnD,EAAWvL,IAC9B,GAAI,UAAWrtC,EACb,MAAMA,EAAImmB,MAEZ,OAAOnmB,EAAIuQ,MACb,CACA,QAAS,CACP,MAAMvQ,EAAMpO,GAAOgnD,EAAWzL,IAC9B,GAAI,UAAWntC,EACb,MAAMA,EAAImmB,MAEZ,OAAOnmB,EAAIuQ,MACb,GAEF,MAAOzZ,GACP,MAAM,IAAIoqC,GAAmBpqC,EAAmB,sBAClD,CACF,CAKAid,qBACE8vB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg2C,WAChB,GACAjZ,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAC7BoT,GAAc9oC,OAC5C,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,0CAIJ,OAAOnmB,EAAIuQ,MACb,CAKAwD,yBACE2gC,GAEA,IAAIqE,EACAre,EAEJ,GAAkC,kBAAvBga,EACTha,EAAaga,OACR,GAAIA,EAAoB,CAC7B,MAAOha,WAAYpuB,KAAMyK,GAAQ29B,EACjCha,EAAapuB,EACbysC,EAAQhiC,CACV,CAEA,MAAMia,EAAOrzB,KAAKg2C,WAAW,GAAIjZ,EAAY,SAAUqe,GAEjD/4C,EAAMpO,SADY+L,KAAKuxC,YAAY,qBAAsBle,GACjCsV,IAC9B,GAAI,UAAWtmC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,8CAIJ,OAAOnmB,EAAIuQ,MACb,CA2BAwD,qBACEsO,EACAmyB,GAEA,MAAM,WAAC9Z,EAAU,OAAE5B,GAAU8K,GAA4B4Q,GACnDxjB,EAAOrzB,KAAKg7C,2BAChB,CAACt2B,GACDqY,OACAhoC,EACAomC,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAC7Bwc,IAC9B,GAAI,UAAWxtC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,6BAG1C,MAAM5V,EAASvQ,EAAIuQ,OACnB,OAAKA,EAEE,IACFA,EACHwiB,YAAa,IACRxiB,EAAOwiB,YACV/0B,QAASumC,GACPh0B,EAAO8gB,QACP9gB,EAAOwiB,YAAY/0B,WARLuS,CAYtB,CAKAwD,2BACEsO,EACAwhB,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB7S,EAAOrzB,KAAKg7C,2BAChB,CAACt2B,GACDqY,EACA,aACA5B,GAGI94B,EAAMpO,SADY+L,KAAKuxC,YAAY,iBAAkBle,GAC7Byc,IAC9B,GAAI,UAAWztC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,6BAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,4BACEiiB,EACA6N,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB8O,EAAQ3c,EAAWtzB,KAAI2f,IAOpB,CACLuwB,WAAY,iBACZ5hB,KARWrzB,KAAKg7C,2BAChB,CAACt2B,GACDqY,EACA,aACA5B,OAiBJ,aATwBn7B,KAAKwxC,iBAAiBwD,IACxBjwC,KAAKk2C,IACzB,MAAM54C,EAAMpO,GAAOgnD,EAAWnL,IAC9B,GAAI,UAAWztC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,8BAE1C,OAAOnmB,EAAIuQ,MAAM,GAIrB,CAgCAwD,sBACEiiB,EACA6N,GAEA,MAAM,WAACnJ,EAAU,OAAE5B,GACjB8K,GAA4BC,GACxB8O,EAAQ3c,EAAWtzB,KAAI2f,IAOpB,CACLuwB,WAAY,iBACZ5hB,KARWrzB,KAAKg7C,2BAChB,CAACt2B,GACDqY,OACAhoC,EACAomC,OA6BJ,aArBwBn7B,KAAKwxC,iBAAiBwD,IACxBjwC,KAAKk2C,IACzB,MAAM54C,EAAMpO,GAAOgnD,EAAWpL,IAC9B,GAAI,UAAWxtC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,8BAE1C,MAAM5V,EAASvQ,EAAIuQ,OACnB,OAAKA,EAEE,IACFA,EACHwiB,YAAa,IACRxiB,EAAOwiB,YACV/0B,QAASumC,GACPh0B,EAAO8gB,QACP9gB,EAAOwiB,YAAY/0B,WARLuS,CAWnB,GAIL,CAQAwD,wBACEysB,EACA9F,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAA2B,CAACnY,GAAO9F,GAE/C16B,EAAMpO,SADY+L,KAAKuxC,YAAY,oBAAqBle,GAChCsc,IAE9B,GAAI,UAAWttC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,iCAG1C,MAAM5V,EAASvQ,EAAIuQ,OACnB,IAAKA,EACH,MAAM,IAAIje,MAAM,mBAAqBkuC,EAAO,cAG9C,MAAMwY,EAAQ,IACTzoC,EACH4uB,aAAc5uB,EAAO4uB,aAAaz8B,KAAIu2C,IAAyB,IAAxB,YAAClmB,EAAW,KAAEhG,GAAKksB,EACxD,MAAMj7C,EAAU,IAAI+yB,GAAQgC,EAAY/0B,SACxC,MAAO,CACL+uB,OACAgG,YAAa,IACRA,EACH/0B,WAEH,KAIL,MAAO,IACFg7C,EACH7Z,aAAc6Z,EAAM7Z,aAAaz8B,KAAIw2C,IAAyB,IAAxB,YAACnmB,EAAW,KAAEhG,GAAKmsB,EACvD,MAAO,CACLnsB,OACAgG,YAAagD,GAAYsD,SACvBtG,EAAY/0B,QACZ+0B,EAAYiD,YAEf,IAGP,CAKAjiB,gBACEmkC,EACAiB,EACAze,GAEA,MAAM1J,EAAOrzB,KAAKg7C,gCACJjmD,IAAZymD,EAAwB,CAACjB,EAAWiB,GAAW,CAACjB,GAChDxd,GAGI16B,EAAMpO,SADY+L,KAAKuxC,YAAY,YAAale,GACxBoT,GAAcxzB,GAAMtV,QAClD,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,wBAE1C,OAAOnmB,EAAIuQ,MACb,CAKAwD,yBACEysB,EACA9F,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAChB,CAACnY,GACD9F,OACAhoC,EACA,CACEmmD,mBAAoB,aACpB7L,SAAS,IAIPhtC,EAAMpO,SADY+L,KAAKuxC,YAAY,WAAYle,GACvBuc,IAC9B,GAAI,UAAWvtC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,uBAE1C,MAAM5V,EAASvQ,EAAIuQ,OACnB,IAAKA,EACH,MAAM,IAAIje,MAAM,SAAWkuC,EAAO,cAEpC,OAAOjwB,CACT,CAOAwD,kCACEysB,EACA9F,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAChB,CAACnY,GACD9F,OACAhoC,EACA,CACEmmD,mBAAoB,aACpB7L,SAAS,IAIPhtC,EAAMpO,SADY+L,KAAKuxC,YAAY,oBAAqBle,GAChCuc,IAC9B,GAAI,UAAWvtC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,iCAE1C,MAAM5V,EAASvQ,EAAIuQ,OACnB,IAAKA,EACH,MAAM,IAAIje,MAAM,mBAAqBkuC,EAAO,cAE9C,OAAOjwB,CACT,CAOAwD,8BACEsO,EACAqY,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAA2B,CAACt2B,GAAYqY,GAEpD16B,EAAMpO,SADY+L,KAAKuxC,YAAY,0BAA2Ble,GACtCwc,IAC9B,GAAI,UAAWxtC,EACb,MAAM,IAAIkhC,GAAmBlhC,EAAImmB,MAAO,6BAG1C,MAAM5V,EAASvQ,EAAIuQ,OACnB,IAAKA,EAAQ,OAAOA,EAEpB,MAAMvS,EAAU,IAAI+yB,GAAQxgB,EAAOwiB,YAAY/0B,SACzCg4B,EAAazlB,EAAOwiB,YAAYiD,WACtC,MAAO,IACFzlB,EACHwiB,YAAagD,GAAYsD,SAASr7B,EAASg4B,GAE/C,CAOAjiB,oCACEsO,EACAqY,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAChB,CAACt2B,GACDqY,EACA,cAGI16B,EAAMpO,SADY+L,KAAKuxC,YAAY,0BAA2Ble,GACtCyc,IAC9B,GAAI,UAAWztC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,uCAGJ,OAAOnmB,EAAIuQ,MACb,CAOAwD,qCACEiiB,EACA0E,GAEA,MAAMiY,EAAQ3c,EAAWtzB,KAAI2f,IAMpB,CACLuwB,WAAY,0BACZ5hB,KAPWrzB,KAAKg7C,2BAChB,CAACt2B,GACDqY,EACA,kBAoBJ,aAZwB/8B,KAAKwxC,iBAAiBwD,IACxBjwC,KAAKk2C,IACzB,MAAM54C,EAAMpO,GAAOgnD,EAAWnL,IAC9B,GAAI,UAAWztC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,wCAGJ,OAAOnmB,EAAIuQ,MAAM,GAIrB,CAYAwD,uCACE8W,EACAqtB,EACAiB,GAEA,IAAIlhC,EAAe,CAAC,EAEhBmhC,QAA4Bz7C,KAAK07C,yBACrC,OAAS,UAAWphC,QAClBigC,GACiB,GAAKA,EAAYkB,IAIlC,IACE,MAAMJ,QAAcr7C,KAAK27C,4BACvBpB,EACA,aAEEc,EAAMhjB,WAAWllC,OAAS,IAC5BmnB,EAAQshC,MACNP,EAAMhjB,WAAWgjB,EAAMhjB,WAAWllC,OAAS,GAAG+J,YAElD,MAAOowB,GACP,GAAIA,aAAe34B,OAAS24B,EAAIjtB,QAAQnC,SAAS,WAC/C,SAEA,MAAMovB,CAEV,CAGF,IAAIuuB,QAA6B77C,KAAK87C,QAAQ,aAC9C,OAAS,WAAYxhC,QACnBkhC,EACcK,IAId,IACE,MAAMR,QAAcr7C,KAAK27C,4BAA4BH,GACjDH,EAAMhjB,WAAWllC,OAAS,IAC5BmnB,EAAQyhC,OACNV,EAAMhjB,WAAWgjB,EAAMhjB,WAAWllC,OAAS,GAAG+J,YAElD,MAAOowB,GACP,GAAIA,aAAe34B,OAAS24B,EAAIjtB,QAAQnC,SAAS,WAC/C,SAEA,MAAMovB,CAEV,CAOF,aAJqCttB,KAAKg8C,kCACxC9uB,EACA5S,IAE4BvV,KAAI2uC,GAAQA,EAAKhvB,WACjD,CAUAtO,wCACE8W,EACA5S,EACAyiB,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAChB,CAAC9tB,EAAQT,YACTsQ,OACAhoC,EACAulB,GAMIjY,EAAMpO,SAJY+L,KAAKuxC,YAC3B,oCACAle,GAE4BuX,IAC9B,GAAI,UAAWvoC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,kDAGJ,OAAOnmB,EAAIuQ,MACb,CAUAwD,8BACE8W,EACA5S,EACAyiB,GAEA,MAAM1J,EAAOrzB,KAAKg7C,2BAChB,CAAC9tB,EAAQT,YACTsQ,OACAhoC,EACAulB,GAGIjY,EAAMpO,SADY+L,KAAKuxC,YAAY,0BAA2Ble,GACtC0X,IAC9B,GAAI,UAAW1oC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACJ,wCAGJ,OAAOnmB,EAAIuQ,MACb,CAEAwD,4BACEwc,EACAuI,GAEA,MAAM,QAACthB,EAASje,MAAOqgD,SAAqBj8C,KAAK22C,yBAC/C/jB,EACAuI,GAGF,IAAIv/B,EAAQ,KAQZ,OAPoB,OAAhBqgD,IACFrgD,EAAQ,IAAImpC,GAA0B,CACpCnvB,IAAKgd,EACLzwB,MAAO4iC,GAA0BnZ,YAAYqwB,EAAYv8C,SAItD,CACLma,UACAje,QAEJ,CAKAwa,yBACEioB,EACA6H,GAEA,MAAM,QAACrsB,EAASje,MAAOqgD,SAAqBj8C,KAAK22C,yBAC/CtY,EACA6H,GAGF,IAAItqC,EAAQ,KAKZ,OAJoB,OAAhBqgD,IACFrgD,EAAQsiC,GAAage,gBAAgBD,EAAYv8C,OAG5C,CACLma,UACAje,QAEJ,CAKAwa,eACEioB,EACA6H,GAEA,aAAalmC,KAAK25C,mBAAmBtb,EAAc6H,GAChDgQ,MAAK3tC,GAAKA,EAAE3M,QACZu6C,OAAMh9C,IACL,MAAM,IAAIxE,MACR,mCACE0pC,EAAa5R,WACb,KACAtzB,EACH,GAEP,CAgBAid,qBACE7T,EACAq9B,GAEA,MAIMv9B,EAAMpO,SAJY+L,KAAKuxC,YAAY,iBAAkB,CACzDhvC,EAAGkqB,WACHmT,IAE4B2Q,IAC9B,GAAI,UAAWluC,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,cAAajmB,EAAGkqB,qBAGrB,OAAOpqB,EAAIuQ,MACb,CAKAwD,sCACE+lC,GAEA,IAAKA,EAAc,CAEjB,KAAOn8C,KAAK+xC,yBACJxU,GAAM,KAEd,MACM6e,EADiBC,KAAKC,MAAQt8C,KAAKgyC,eAAeE,WAjvKpB,IAmvKpC,GAA4C,OAAxClyC,KAAKgyC,eAAeC,kBAA6BmK,EACnD,OAAOp8C,KAAKgyC,eAAeC,eAE/B,CAEA,aAAajyC,KAAKu8C,mBACpB,CAKAnmC,0BACEpW,KAAK+xC,mBAAoB,EACzB,IACE,MAAMyK,EAAYH,KAAKC,MACjBG,EAAwBz8C,KAAKgyC,eAAeC,gBAC5CyK,EAAkBD,EACpBA,EAAsB5jB,UACtB,KACJ,IAAK,IAAItgC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAM05C,QAAwBjyC,KAAK28C,mBAAmB,aAEtD,GAAID,IAAoBzK,EAAgBpZ,UAOtC,OANA74B,KAAKgyC,eAAiB,CACpBC,kBACAC,UAAWmK,KAAKC,MAChBnK,sBAAuB,GACvBC,oBAAqB,IAEhBH,QAIH1U,GAAMqf,IACd,CAEA,MAAM,IAAIjoD,MACkC,0CAAA0nD,KAAKC,MAAQE,MAE3D,CAAE,QACAx8C,KAAK+xC,mBAAoB,CAC3B,CACF,CAKA37B,gCACE+kB,GAEA,MAAM,WAAC4B,EAAY5B,OAAQib,GAAanQ,GAA4B9K,GAC9D9H,EAAOrzB,KAAKg2C,WAAW,GAAIjZ,EAAY,SAAUqZ,GAEjD/zC,EAAMpO,SADY+L,KAAKuxC,YAAY,4BAA6Ble,GACxCqT,GAAwB/oC,OACtD,GAAI,UAAW0E,EACb,MAAM,IAAIkhC,GACRlhC,EAAImmB,MACH,0CAGL,OAAOnmB,EAAIuQ,MACb,CA2BAwD,0BACEymC,EACAC,EACAC,GAEA,GAAI,YAAaF,EAAsB,CACrC,MACMthB,EADcshB,EACgBnxB,YAC9BsxB,EACJjqD,EAAAA,GAAAA,KAAYwoC,GAAiBr+B,SAAS,UACxC,GAAInE,MAAMC,QAAQ8jD,SAAwC/nD,IAApBgoD,EACpC,MAAM,IAAIpoD,MAAM,qBAGlB,MAAMwmC,EAAc2hB,GAAmB,CAAC,EACxC3hB,EAAO6b,SAAW,SACZ,eAAgB7b,IACpBA,EAAO4B,WAAa/8B,KAAK+8B,YAG3B,MAAM1J,EAAO,CAAC2pB,EAAoB7hB,GAE5B94B,EAAMpO,SADY+L,KAAKuxC,YAAY,sBAAuBle,GAClCkV,IAC9B,GAAI,UAAWlmC,EACb,MAAM,IAAI1N,MAAM,mCAAqC0N,EAAImmB,MAAMnoB,SAEjE,OAAOgC,EAAIuQ,MACb,CAEA,IAAIwiB,EACJ,GAAIynB,aAAgCzkB,GAAa,CAC/C,IAAI6kB,EAA0BJ,EAC9BznB,EAAc,IAAIgD,GAClBhD,EAAYkD,SAAW2kB,EAAW3kB,SAClClD,EAAYxG,aAAeiuB,EAAqBjuB,aAChDwG,EAAYoD,UAAYykB,EAAWzkB,UACnCpD,EAAYiD,WAAa4kB,EAAW5kB,UACtC,MACEjD,EAAcgD,GAAYsD,SAASmhB,GAEnCznB,EAAYsD,SAAWtD,EAAYuD,WAAQ5jC,EAG7C,QAAwBA,IAApB+nD,IAAkC/jD,MAAMC,QAAQ8jD,GAClD,MAAM,IAAInoD,MAAM,qBAGlB,MAAMokC,EAAU+jB,EAChB,GAAI1nB,EAAYoD,WAAaO,EAC3B3D,EAAYle,QAAQ6hB,OACf,CACL,IAAIojB,EAAen8C,KAAK8xC,yBACxB,OAAS,CACP,MAAMG,QAAwBjyC,KAAKk9C,gCACjCf,GAKF,GAHA/mB,EAAYmD,qBAAuB0Z,EAAgB1Z,qBACnDnD,EAAY7B,gBAAkB0e,EAAgBpZ,WAEzCE,EAAS,MAGd,GADA3D,EAAYle,QAAQ6hB,IACf3D,EAAY1Q,UACf,MAAM,IAAI/vB,MAAM,cAGlB,MAAM+vB,EAAY0Q,EAAY1Q,UAAUxnB,SAAS,UACjD,IACG8C,KAAKgyC,eAAeI,oBAAoBl0C,SAASwmB,KACjD1kB,KAAKgyC,eAAeG,sBAAsBj0C,SAASwmB,GACpD,CAGA1kB,KAAKgyC,eAAeI,oBAAoB55C,KAAKksB,GAC7C,KACF,CAKEy3B,GAAe,CAEnB,CACF,CAEA,MAAM97C,EAAU+0B,EAAY8E,WACtB7E,EAAWh1B,EAAQqrB,YAEnBsxB,EADkB5nB,EAAYgG,WAAW/F,GACJn4B,SAAS,UAC9Ci+B,EAAc,CAClB6b,SAAU,SACVja,WAAY/8B,KAAK+8B,YAGnB,GAAIggB,EAAiB,CACnB,MAAMtqB,GACJ15B,MAAMC,QAAQ+jD,GACVA,EACA18C,EAAQm0B,iBACZzvB,KAAI6Q,GAAOA,EAAI6W,aAEjB0O,EAAiB,SAAI,CACnB6b,SAAU,SACVvkB,YAEJ,CAEIsG,IACFoC,EAAOgiB,WAAY,GAGrB,MAAM9pB,EAAO,CAAC2pB,EAAoB7hB,GAE5B94B,EAAMpO,SADY+L,KAAKuxC,YAAY,sBAAuBle,GAClCkV,IAC9B,GAAI,UAAWlmC,EAAK,CAClB,IAAIihC,EACJ,GAAI,SAAUjhC,EAAImmB,QAChB8a,EAAOjhC,EAAImmB,MAAM9oB,KAAK4jC,KAClBA,GAAQvqC,MAAMC,QAAQsqC,IAAO,CAC/B,MAAM8Z,EAAc,SACdC,EAAWD,EAAc9Z,EAAKhqB,KAAK8jC,GACzCjkB,QAAQ3Q,MAAMnmB,EAAImmB,MAAMnoB,QAASg9C,EACnC,CAEF,MAAM,IAAIha,GACR,mCAAqChhC,EAAImmB,MAAMnoB,QAC/CijC,EAEJ,CACA,OAAOjhC,EAAIuQ,MACb,CA2BAwD,sBACEgf,EACAkoB,EACAhjC,GAEA,GAAI,YAAa8a,EAAa,CAC5B,GAAIkoB,GAAoBvkD,MAAMC,QAAQskD,GACpC,MAAM,IAAI3oD,MAAM,qBAGlB,MAAM4mC,EAAkBnG,EAAY1J,YACpC,aAAa1rB,KAAKu9C,mBAAmBhiB,EAAiBjhB,EACxD,CAEA,QAAyBvlB,IAArBuoD,IAAmCvkD,MAAMC,QAAQskD,GACnD,MAAM,IAAI3oD,MAAM,qBAGlB,MAAMokC,EAAUukB,EAChB,GAAIloB,EAAYoD,UACdpD,EAAYle,QAAQ6hB,OACf,CACL,IAAIojB,EAAen8C,KAAK8xC,yBACxB,OAAS,CACP,MAAMG,QAAwBjyC,KAAKk9C,gCACjCf,GAKF,GAHA/mB,EAAYmD,qBAAuB0Z,EAAgB1Z,qBACnDnD,EAAY7B,gBAAkB0e,EAAgBpZ,UAC9CzD,EAAYle,QAAQ6hB,IACf3D,EAAY1Q,UACf,MAAM,IAAI/vB,MAAM,cAGlB,MAAM+vB,EAAY0Q,EAAY1Q,UAAUxnB,SAAS,UACjD,IAAK8C,KAAKgyC,eAAeG,sBAAsBj0C,SAASwmB,GAAY,CAGlE1kB,KAAKgyC,eAAeG,sBAAsB35C,KAAKksB,GAC/C,KACF,CAKEy3B,GAAe,CAEnB,CACF,CAEA,MAAM5gB,EAAkBnG,EAAY1J,YACpC,aAAa1rB,KAAKu9C,mBAAmBhiB,EAAiBjhB,EACxD,CAMAlE,yBACEonC,EACAljC,GAEA,MAAM0iC,EAAqBxxB,GAASgyB,GAAgBtgD,SAAS,UAK7D,aAJqB8C,KAAKy9C,uBACxBT,EACA1iC,EAGJ,CAMAlE,6BACE4mC,EACA1iC,GAEA,MAAM6gB,EAAc,CAAC6b,SAAU,UACzBna,EAAgBviB,GAAWA,EAAQuiB,cACnCC,EACHxiB,GAAWA,EAAQwiB,qBAAwB98B,KAAK+8B,WAE/CziB,GAAiC,MAAtBA,EAAQ0iB,aACrB7B,EAAO6B,WAAa1iB,EAAQ0iB,YAE1B1iB,GAAqC,MAA1BA,EAAQse,iBACrBuC,EAAOvC,eAAiBte,EAAQse,gBAE9BiE,IACF1B,EAAO0B,cAAgBA,GAErBC,IACF3B,EAAO2B,oBAAsBA,GAG/B,MAAMzJ,EAAO,CAAC2pB,EAAoB7hB,GAE5B94B,EAAMpO,SADY+L,KAAKuxC,YAAY,kBAAmBle,GAC9Bmd,IAC9B,GAAI,UAAWnuC,EAAK,CAClB,IAAIihC,EAIJ,KAHI,SAAUjhC,EAAImmB,QAChB8a,EAAOjhC,EAAImmB,MAAM9oB,KAAK4jC,MAElB,IAAID,GACR,+BAAiChhC,EAAImmB,MAAMnoB,QAC3CijC,EAEJ,CACA,OAAOjhC,EAAIuQ,MACb,CAKAyiC,YACEr1C,KAAK0xC,wBAAyB,EAC9B1xC,KAAK2xC,uBAAyB+L,aAAY,KAExC,WACE,UACQ19C,KAAKyxC,cAAc5M,OAAO,QAEhC,MAAO,CACV,EALD,EAKI,GACH,KACH7kC,KAAK29C,sBACP,CAKArI,WAAWhoB,GACTttB,KAAK0xC,wBAAyB,EAC9BvY,QAAQ3Q,MAAM,YAAa8E,EAAIjtB,QACjC,CAKAk1C,WAAW7R,GACT1jC,KAAK0xC,wBAAyB,EAC9B1xC,KAAK6xC,yBACF7xC,KAAK6xC,wBAA0B,GAAKr+C,OAAOoqD,iBAC1C59C,KAAK4xC,2BACP0I,aAAat6C,KAAK4xC,0BAClB5xC,KAAK4xC,yBAA2B,MAE9B5xC,KAAK2xC,yBACPkM,cAAc79C,KAAK2xC,wBACnB3xC,KAAK2xC,uBAAyB,MAGnB,MAATjO,GAOJ1jC,KAAKyyC,6CAA+C,CAAC,EACrDz+C,OAAO6mB,QACL7a,KAAK0yC,sBACLzoB,SAAQ6zB,IAA0B,IAAxBz/C,EAAM4sC,GAAa6S,EAC7B99C,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,WACP,KAZFnC,KAAK29C,sBAcT,CAKQI,iBACN1/C,EACA2/C,GACA,IAAAC,EACA,MAAMC,EAA2C,QAAlCD,EAAGj+C,KAAK0yC,qBAAqBr0C,UAAK,IAAA4/C,OAAA,EAA/BA,EAAiC97C,MAEnD,GADAnC,KAAK0yC,qBAAqBr0C,GAAQ2/C,EAC9BE,IAAcF,EAAiB77C,MAAO,CACxC,MAAMg8C,EACJn+C,KAAKwyC,wCAAwCn0C,GAC3C8/C,GACFA,EAAqBl0B,SAAQm0B,IAC3B,IACEA,EAAGJ,EAAiB77C,OAEpB,MAAO,IAGf,CACF,CAKQu2C,2BACN2F,EACApK,GACkC,IAAAqK,EAClC,MAAMjgD,EACJ2B,KAAKuyC,wCAAwC8L,GAC/C,GAAY,MAARhgD,EACF,MAAO,OAET,MAAM8/C,GAAwBG,EAAAt+C,KAAKwyC,yCACjCn0C,KAD4BigD,EAC5BjgD,GACI,IAAI2c,KAEV,OADAmjC,EAAqBv6C,IAAIqwC,GAClB,KACLkK,EAAqBzsC,OAAOuiC,GACM,IAA9BkK,EAAqBjuB,aAChBlwB,KAAKwyC,wCAAwCn0C,EACtD,CAEJ,CAKA+X,6BACE,GAAsD,IAAlDpiB,OAAO4oB,KAAK5c,KAAK0yC,sBAAsBv/C,OAiBzC,YAhBI6M,KAAK0xC,yBACP1xC,KAAK0xC,wBAAyB,EAC9B1xC,KAAK4xC,yBAA2BjU,YAAW,KACzC39B,KAAK4xC,yBAA2B,KAChC,IACE5xC,KAAKyxC,cAAc8M,QACnB,MAAOjxB,GAEHA,aAAe34B,OACjBwkC,QAAQqb,IACL,yCAAwClnB,EAAIjtB,UAGnD,IACC,OAWP,GANsC,OAAlCL,KAAK4xC,2BACP0I,aAAat6C,KAAK4xC,0BAClB5xC,KAAK4xC,yBAA2B,KAChC5xC,KAAK0xC,wBAAyB,IAG3B1xC,KAAK0xC,uBAER,YADA1xC,KAAKyxC,cAAc+M,UAIrB,MAAMC,EAA4Bz+C,KAAK6xC,wBACjC6M,EAAiCA,IAC9BD,IAA8Bz+C,KAAK6xC,8BAGtCpU,QAAQmE,IAKZ5tC,OAAO4oB,KAAK5c,KAAK0yC,sBAAsB3tC,KAAIqR,UACzC,MAAM60B,EAAejrC,KAAK0yC,qBAAqBr0C,GAC/C,QAAqBtJ,IAAjBk2C,EAIJ,OAAQA,EAAa9oC,OACnB,IAAK,UACL,IAAK,eACH,GAAoC,IAAhC8oC,EAAa0T,UAAUzuB,KAqBzB,cAPOlwB,KAAK0yC,qBAAqBr0C,GACN,iBAAvB4sC,EAAa9oC,cACRnC,KAAKyyC,6CACVxH,EAAa2T,iCAGX5+C,KAAK29C,4BAGP,WACJ,MAAM,KAACtqB,EAAI,OAAE6gB,GAAUjJ,EACvB,IACEjrC,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,gBAET,MAAMy8C,QACG5+C,KAAKyxC,cAAc32C,KAAKo5C,EAAQ7gB,GACzCrzB,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH2T,uBACAz8C,MAAO,eAETnC,KAAKyyC,6CACHmM,GACE3T,EAAa0T,gBACX3+C,KAAK29C,uBACX,MAAOxkD,GAQP,GAPIA,aAAaxE,OACfwkC,QAAQ3Q,MACL,GAAE0rB,uBACH7gB,EACAl6B,EAAEkH,UAGDq+C,IACH,OAGF1+C,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,kBAEHnC,KAAK29C,sBACb,CACD,EApCK,GAqCN,MACF,IAAK,aACiC,IAAhC1S,EAAa0T,UAAUzuB,WAInB,WACJ,MAAM,qBAAC0uB,EAAoB,kBAAEC,GAAqB5T,EAClD,GACEjrC,KAAK2yC,gCAAgCre,IAAIsqB,GAWzC5+C,KAAK2yC,gCAAgCjhC,OACnCktC,OAEG,CACL5+C,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,kBAETnC,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,kBAET,UACQnC,KAAKyxC,cAAc32C,KAAK+jD,EAAmB,CAC/CD,IAEF,MAAOzlD,GAIP,GAHIA,aAAaxE,OACfwkC,QAAQ3Q,MAAS,GAAAq2B,WAA4B1lD,EAAEkH,UAE5Cq+C,IACH,OAQF,OALA1+C,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,0BAEHnC,KAAK29C,sBAEb,CACF,CACA39C,KAAK+9C,iBAAiB1/C,EAAM,IACvB4sC,EACH9oC,MAAO,uBAEHnC,KAAK29C,sBACZ,EAnDK,GAqDR,IAOV,CAKQmB,0BAGNF,EACAG,GAEA,MAAMJ,EACJ3+C,KAAKyyC,6CAA6CmM,QAClC7pD,IAAd4pD,GAGJA,EAAU10B,SAAQm0B,IAChB,IACEA,KAKKW,GAEL,MAAO5lD,GACPggC,QAAQ3Q,MAAMrvB,EAChB,IAEJ,CAKAq8C,yBAAyBwJ,GACvB,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAC7B+qD,EACAhU,IAEFhrC,KAAK8+C,0BAAiD7T,EAAc,CAClEr4B,EAAOhX,MACPgX,EAAOiH,SAEX,CAKQolC,kBACNC,EAyBA7rB,GAEA,MAAMgrB,EAAuBr+C,KAAKqyC,4BAC5Bh0C,EAAO8gD,GACX,CAACD,EAAmBhL,OAAQ7gB,IAGxB+rB,EAAuBp/C,KAAK0yC,qBAAqBr0C,GA4BvD,YA3B6BtJ,IAAzBqqD,EACFp/C,KAAK0yC,qBAAqBr0C,GAAQ,IAC7B6gD,EACH7rB,OACAsrB,UAAW,IAAI3jC,IAAI,CAACkkC,EAAmBjL,WACvC9xC,MAAO,WAGTi9C,EAAqBT,UAAU/6C,IAAIs7C,EAAmBjL,UAExDj0C,KAAKuyC,wCAAwC8L,GAAwBhgD,EACrE2B,KAAKsyC,oDACH+L,GACEjoC,iBACKpW,KAAKsyC,oDACV+L,UAEKr+C,KAAKuyC,wCAAwC8L,GACpD,MAAMpT,EAAejrC,KAAK0yC,qBAAqBr0C,GAC/CF,QACmBpJ,IAAjBk2C,EAC4E,4EAAAoT,KAE9EpT,EAAa0T,UAAUjtC,OAAOwtC,EAAmBjL,gBAC3Cj0C,KAAK29C,sBAAsB,EAEnC39C,KAAK29C,uBACEU,CACT,CAUAgB,gBACE5oC,EACAw9B,EACAlX,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAChB,CAACv/B,EAAUgW,YACXsQ,GAAc/8B,KAAKmxC,aAAe,YAClC,UAEF,OAAOnxC,KAAKi/C,kBACV,CACEhL,WACAC,OAAQ,mBACR2K,kBAAmB,sBAErBxrB,EAEJ,CAOAjd,kCACEioC,SAEMr+C,KAAKs/C,+BACTjB,EACA,iBAEJ,CAKA5I,gCAAgCuJ,GAC9B,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAC7B+qD,EACA7T,IAEFnrC,KAAK8+C,0BAAwD7T,EAAc,CACzE,CACEsU,UAAW3sC,EAAOhX,MAAMyzB,OACxB4sB,YAAarpC,EAAOhX,MAAM63B,SAE5B7gB,EAAOiH,SAEX,CAYA2lC,uBACE1yB,EACAmnB,EACAlX,EACA0iB,GAEA,MAAMpsB,EAAOrzB,KAAKg2C,WAChB,CAAClpB,EAAUL,YACXsQ,GAAc/8B,KAAKmxC,aAAe,YAClC,SACAsO,EAAU,CAACA,QAASA,QAAW1qD,GAEjC,OAAOiL,KAAKi/C,kBACV,CACEhL,WACAC,OAAQ,mBACR2K,kBAAmB,sBAErBxrB,EAEJ,CAOAjd,yCACEioC,SAEMr+C,KAAKs/C,+BACTjB,EACA,yBAEJ,CAKAqB,OACEtuB,EACA6iB,EACAlX,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAChB,CAAmB,kBAAX5kB,EAAsB,CAACuuB,SAAU,CAACvuB,EAAOl0B,aAAek0B,GAChE2L,GAAc/8B,KAAKmxC,aAAe,aAEpC,OAAOnxC,KAAKi/C,kBACV,CACEhL,WACAC,OAAQ,gBACR2K,kBAAmB,mBAErBxrB,EAEJ,CAOAjd,2BACEioC,SAEMr+C,KAAKs/C,+BAA+BjB,EAAsB,OAClE,CAKAvI,sBAAsBkJ,GACpB,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAAO+qD,EAActO,IACpD1wC,KAAK8+C,0BAAwC7T,EAAc,CACzDr4B,EAAOhX,MACPgX,EAAOiH,SAEX,CAKA67B,sBAAsBsJ,GACpB,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAAO+qD,EAAczT,IACpDvrC,KAAK8+C,0BAA8C7T,EAAc,CAACr4B,GACpE,CAQAgtC,aAAa3L,GACX,OAAOj0C,KAAKi/C,kBACV,CACEhL,WACAC,OAAQ,gBACR2K,kBAAmB,mBAErB,GAEJ,CAOAzoC,+BACEioC,SAEMr+C,KAAKs/C,+BACTjB,EACA,cAEJ,CAKA1I,6BAA6BqJ,GAC3B,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAC7B+qD,EACAjT,IAEF/rC,KAAK8+C,0BAA8C7T,EAAc,CAACr4B,GACpE,CASAitC,aAAa5L,GACX,OAAOj0C,KAAKi/C,kBACV,CACEhL,WACAC,OAAQ,wBACR2K,kBAAmB,2BAErB,GAEJ,CAOAzoC,+BACEioC,SAEMr+C,KAAKs/C,+BACTjB,EACA,cAEJ,CAMA,qCACEA,EACAyB,GAEA,MAAMC,EACJ//C,KAAKsyC,oDACH+L,GAEA0B,QACIA,IAEN5mB,QAAQC,KAEH,wEAAIilB,YAA+ByB,gCAI5C,CAEA9J,WACE3iB,EACA2sB,EACAhJ,EACAoE,GAEA,MAAMre,EAAaijB,GAAYhgD,KAAKmxC,YACpC,GAAIpU,GAAcia,GAAYoE,EAAO,CACnC,IAAI9gC,EAAe,CAAC,EAChB08B,IACF18B,EAAQ08B,SAAWA,GAEjBja,IACFziB,EAAQyiB,WAAaA,GAEnBqe,IACF9gC,EAAUtmB,OAAOG,OAAOmmB,EAAS8gC,IAEnC/nB,EAAK76B,KAAK8hB,EACZ,CACA,OAAO+Y,CACT,CAKA2nB,2BACE3nB,EACA2sB,EACAhJ,EACAoE,GAEA,MAAMre,EAAaijB,GAAYhgD,KAAKmxC,YACpC,GAAIpU,IAAe,CAAC,YAAa,aAAa7+B,SAAS6+B,GACrD,MAAM,IAAIpoC,MACR,8CACEqL,KAAKmxC,YACL,+CAGN,OAAOnxC,KAAKg2C,WAAW3iB,EAAM2sB,EAAUhJ,EAAUoE,EACnD,CAKAxF,2BAA2BoJ,GACzB,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAC7B+qD,EACAhT,IAEmB,sBAAjBp5B,EAAOhX,OAcToE,KAAK2yC,gCAAgC/uC,IAAIqnC,GAE3CjrC,KAAK8+C,0BACH7T,EACiB,sBAAjBr4B,EAAOhX,MACH,CAAC,CAACoe,KAAM,YAAapH,EAAOiH,SAC5B,CAAC,CAACG,KAAM,SAAUpH,OAAQA,EAAOhX,OAAQgX,EAAOiH,SAExD,CAUAw+B,YACE3zB,EACAuvB,EACAlX,GAEA,MAAM1J,EAAOrzB,KAAKg2C,WAChB,CAACtxB,GACDqY,GAAc/8B,KAAKmxC,aAAe,aAE9BkN,EAAuBr+C,KAAKi/C,kBAChC,CACEhL,SAAUA,CAAC+K,EAAcnlC,KACvB,GAA0B,WAAtBmlC,EAAahlC,KAAmB,CAClCi6B,EAAS+K,EAAapsC,OAAQiH,GAG9B,IACE7Z,KAAKm4C,wBAAwBkG,GAE7B,MAAO4B,GACP,CAEJ,GAEF/L,OAAQ,qBACR2K,kBAAmB,wBAErBxrB,GAEF,OAAOgrB,CACT,CAYA6B,uBACEx7B,EACAuvB,EACA35B,GAEA,MAAM,WAACyiB,KAAeqe,GAAS,IAC1B9gC,EACHyiB,WACGziB,GAAWA,EAAQyiB,YAAe/8B,KAAKmxC,aAAe,aAErD9d,EAAOrzB,KAAKg2C,WAChB,CAACtxB,GACDqY,OACAhoC,EACAqmD,GAEIiD,EAAuBr+C,KAAKi/C,kBAChC,CACEhL,SAAUA,CAAC+K,EAAcnlC,KACvBo6B,EAAS+K,EAAcnlC,GAGvB,IACE7Z,KAAKm4C,wBAAwBkG,GAE7B,MAAO4B,GACP,GAGJ/L,OAAQ,qBACR2K,kBAAmB,wBAErBxrB,GAEF,OAAOgrB,CACT,CAOAjoC,8BACEioC,SAEMr+C,KAAKs/C,+BACTjB,EACA,mBAEJ,CAKAxI,sBAAsBmJ,GACpB,MAAM,OAACpsC,EAAM,aAAEq4B,GAAgBh3C,GAAO+qD,EAAc/S,IACpDjsC,KAAK8+C,0BAA8C7T,EAAc,CAACr4B,GACpE,CAQAutC,aAAalM,GACX,OAAOj0C,KAAKi/C,kBACV,CACEhL,WACAC,OAAQ,gBACR2K,kBAAmB,mBAErB,GAEJ,CAOAzoC,+BACEioC,SAEMr+C,KAAKs/C,+BACTjB,EACA,cAEJ,EC1/MK,MAAM+B,GASX/sD,YAAYgtD,GAA0B,KAR9BC,cAAQ,EASdtgD,KAAKsgD,SAAkB,OAAPD,QAAO,IAAPA,EAAAA,EAAWj1B,IAC7B,CAKAziB,kBACE,OAAO,IAAIy3C,GAAQh1B,KACrB,CAcAziB,qBACE2iB,EACAhR,GAEA,GAA6B,KAAzBgR,EAAUjsB,WACZ,MAAM,IAAI1K,MAAM,uBAElB,MAAM8hB,EAAY6U,EAAUvuB,MAAM,GAAI,IACtC,IAAKud,IAAYA,EAAQimC,eAAgB,CACvC,MAAMl1B,EAAgBC,EAAUvuB,MAAM,EAAG,IACnCyjD,EAAoBvpC,GAAaoU,GACvC,IAAK,IAAIo1B,EAAK,EAAGA,EAAK,GAAIA,IACxB,GAAIhqC,EAAUgqC,KAAQD,EAAkBC,GACtC,MAAM,IAAI9rD,MAAM,gCAGtB,CACA,OAAO,IAAIyrD,GAAQ,CAAC3pC,YAAW6U,aACjC,CAOA3iB,gBAAgBqf,GACd,MAAMvR,EAAYQ,GAAa+Q,GACzBsD,EAAY,IAAI14B,WAAW,IAGjC,OAFA04B,EAAUrqB,IAAI+mB,GACdsD,EAAUrqB,IAAIwV,EAAW,IAClB,IAAI2pC,GAAQ,CAAC3pC,YAAW6U,aACjC,CAKI7U,gBACF,OAAO,IAAIyV,GAAUlsB,KAAKsgD,SAAS7pC,UACrC,CAKI6U,gBACF,OAAO,IAAI14B,WAAWoN,KAAKsgD,SAASh1B,UACtC,QCLWo1B,GAAmC1sD,OAAO0T,OAAO,CAC5Di5C,kBAAmB,CACjBnyB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CACAA,GAAAA,GAAiB,eACjBxqB,GAAiB,cACjBwqB,GAAAA,GAAgB,eAGpBsxB,kBAAmB,CACjBpyB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,kBAEtBuxB,kBAAmB,CACjBryB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CACAA,GAAAA,GAAiB,eACjBxqB,KACAwqB,GAAAA,GACE7Y,KACA6Y,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,gBAINwxB,sBAAuB,CACrBtyB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,kBAEtByxB,iBAAkB,CAChBvyB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAiB,oBAuIjB,MAAM0xB,GAIX3tD,cAAe,CAMfsV,yBAAyBg3B,GACvB,MAAOshB,EAAoBC,GAAYh1B,GAAUqB,uBAC/C,CAACoS,EAAOiG,UAAUpa,YAAYmT,EAAAA,GAAAA,IAAWj9B,OAAOi+B,EAAOwhB,YAAa,IACpEnhD,KAAK8sB,WAIDptB,EAAOk+B,GADA8iB,GAAiCC,kBAChB,CAC5BQ,WAAYz/C,OAAOi+B,EAAOwhB,YAC1BD,SAAUA,IAGNtkC,EAAO,CACX,CACEyS,OAAQ4xB,EACRtwB,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAOiG,UACfjV,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAOpP,MACfI,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQqQ,GAAc5S,UACtB6D,UAAU,EACVC,YAAY,IAIhB,MAAO,CACL,IAAIsH,GAAuB,CACzBpL,UAAW9sB,KAAK8sB,UAChBlQ,KAAMA,EACNld,KAAMA,IAERuhD,EAEJ,CAEAt4C,yBAAyBg3B,GACvB,MACMjgC,EAAOk+B,GADA8iB,GAAiCE,mBAGxChkC,EAAO,CACX,CACEyS,OAAQsQ,EAAOtN,YACf1B,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAOiG,UACfjV,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAIsH,GAAuB,CAChCpL,UAAW9sB,KAAK8sB,UAChBlQ,KAAMA,EACNld,KAAMA,GAEV,CAEAiJ,yBAAyBg3B,GACvB,MACMjgC,EAAOk+B,GADA8iB,GAAiCG,kBAChB,CAC5BpuB,UAAWkN,EAAOlN,UAAU1tB,KAAIq8C,GAAQA,EAAK3hD,cAGzCmd,EAAO,CACX,CACEyS,OAAQsQ,EAAOtN,YACf1B,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAOiG,UACfjV,UAAU,EACVC,YAAY,IAmBhB,OAfI+O,EAAOpP,OACT3T,EAAKpkB,KACH,CACE62B,OAAQsQ,EAAOpP,MACfI,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQqQ,GAAc5S,UACtB6D,UAAU,EACVC,YAAY,IAKX,IAAIsH,GAAuB,CAChCpL,UAAW9sB,KAAK8sB,UAChBlQ,KAAMA,EACNld,KAAMA,GAEV,CAEAiJ,6BAA6Bg3B,GAC3B,MACMjgC,EAAOk+B,GADA8iB,GAAiCI,uBAGxClkC,EAAO,CACX,CACEyS,OAAQsQ,EAAOtN,YACf1B,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAOiG,UACfjV,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAIsH,GAAuB,CAChCpL,UAAW9sB,KAAK8sB,UAChBlQ,KAAMA,EACNld,KAAMA,GAEV,CAEAiJ,wBAAwBg3B,GACtB,MACMjgC,EAAOk+B,GADA8iB,GAAiCK,kBAGxCnkC,EAAO,CACX,CACEyS,OAAQsQ,EAAOtN,YACf1B,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAOiG,UACfjV,UAAU,EACVC,YAAY,GAEd,CACEvB,OAAQsQ,EAAO0hB,UACf1wB,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAIsH,GAAuB,CAChCpL,UAAW9sB,KAAK8sB,UAChBlQ,KAAMA,EACNld,KAAMA,GAEV,EA3KWshD,GAMJl0B,UAAuB,IAAIZ,GAChC,qDC1FSo1B,GAAqCttD,OAAO0T,OAItD,CACD65C,aAAc,CACZ/yB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CACAA,GAAAA,GAAgB,eAChBA,GAAAA,GAAiB,SACjBA,GAAAA,GAAiB,oBAGrBkyB,iBAAkB,CAChBhzB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAgB,eAAgBA,GAAAA,GAAiB,YAEtDmyB,oBAAqB,CACnBjzB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAgB,eAAgBA,GAAAA,GAAiB,YAEtDoyB,oBAAqB,CACnBlzB,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAEN,CAACA,GAAAA,GAAgB,eAAgBxqB,GAAI,sBAOpC,MAAM68C,GAIXtuD,cAAe,CAYfsV,oBAAoBg3B,GAClB,MACMjgC,EAAOk+B,GADA0jB,GAAmCC,aAClB5hB,GAC9B,OAAO,IAAIzH,GAAuB,CAChCtb,KAAM,GACNkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAEAiJ,wBACEg3B,GAEA,MACMjgC,EAAOk+B,GADA0jB,GAAmCE,iBAClB7hB,GAC9B,OAAO,IAAIzH,GAAuB,CAChCtb,KAAM,GACNkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAEAiJ,2BACEg3B,GAEA,MACMjgC,EAAOk+B,GADA0jB,GAAmCG,oBAClB9hB,GAC9B,OAAO,IAAIzH,GAAuB,CAChCtb,KAAM,GACNkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAEAiJ,2BACEg3B,GAEA,MACMjgC,EAAOk+B,GADA0jB,GAAmCI,oBAClB,CAC5BE,cAAelgD,OAAOi+B,EAAOiiB,iBAE/B,OAAO,IAAI1pB,GAAuB,CAChCtb,KAAM,GACNkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,EA9DWiiD,GASJ70B,UAAuB,IAAIZ,GAChC,+CC1NJ,MAuBM21B,GAA6BvyB,GAAAA,GAYjC,CACAA,GAAAA,GAAgB,iBAChBA,GAAAA,GAAgB,WAChBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAiB,6BACjBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAiB,6BACjBA,GAAAA,GAAiB,qBACjBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAiB,6BAGZ,MAAMwyB,GAIXzuD,cAAe,CAcfsV,sCACEg3B,GAEA,MAAM,UAAClpB,EAAS,QAAEpW,EAAO,UAAEqkB,EAAS,iBAAEq9B,GAAoBpiB,EAE1DxhC,GArEqB,KAsEnBsY,EAAUtjB,OACY,4CAAuCsjB,EAAUtjB,gBAGzEgL,GAzEoB,KA0ElBumB,EAAUvxB,OACW,2CAAsCuxB,EAAUvxB,gBAGvE,MAAM6uD,EAAkBH,GAA2BvuD,KAC7C2uD,EAAkBD,EAAkBvrC,EAAUtjB,OAC9C+uD,EAAoBD,EAAkBv9B,EAAUvxB,OAGhDstC,EAAkB1tC,EAAAA,GAAAA,MAAamvD,EAAoB7hD,EAAQlN,QAE3Dq7B,EACgB,MAApBuzB,EACI,MACAA,EAqBN,OAnBAF,GAA2BzsD,OACzB,CACE+sD,cAXkB,EAYlBC,QAAS,EACTH,kBACAI,0BAA2B7zB,EAC3BwzB,kBACAM,0BAA2B9zB,EAC3B0zB,oBACAK,gBAAiBliD,EAAQlN,OACzBqvD,wBAAyBh0B,GAE3BiS,GAGFA,EAAgBl/B,KAAKkV,EAAWurC,GAChCvhB,EAAgBl/B,KAAKmjB,EAAWu9B,GAChCxhB,EAAgBl/B,KAAKlB,EAAS6hD,GAEvB,IAAIhqB,GAAuB,CAChCtb,KAAM,GACNkQ,UAAWg1B,GAAeh1B,UAC1BptB,KAAM+gC,GAEV,CAMA93B,uCACEg3B,GAEA,MAAM,WAAC1tB,EAAU,QAAE5R,EAAO,iBAAE0hD,GAAoBpiB,EAEhDxhC,GA/HsB,KAgIpB8T,EAAW9e,OACY,6CAAwC8e,EAAW9e,gBAG5E,IACE,MAAMktD,EAAUD,GAAQqC,cAAcxwC,GAChCwE,EAAY4pC,EAAQ5pC,UAAUhX,UAC9BilB,EAAYxN,GAAK7W,EAASggD,EAAQ/0B,WAExC,OAAOtrB,KAAK0iD,+BAA+B,CACzCjsC,YACApW,UACAqkB,YACAq9B,qBAEF,MAAOv5B,GACP,MAAM,IAAI7zB,MAAqC,+BAAA6zB,IACjD,CACF,EAnGWs5B,GASJh1B,UAAuB,IAAIZ,GAChC,+CC5DJy2B,GAAAA,eAAiC,SAAC/sC,GAChC,MAAM9T,EAAIge,GAAK7rB,OAAO+kB,GAAQpD,GAAI,QAAAiV,EAAA/1B,UAAA3B,OADkByvD,EAAkB,IAAA7pD,MAAA8xB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAlB83B,EAAkB93B,EAAA,GAAAh2B,UAAAg2B,GAGtE,OADA83B,EAAK34B,SAAQrT,GAAO9U,EAAExB,OAAOsW,KACtB9U,EAAEvB,QACX,EAEO,MAAMsiD,GAAYA,CACvBp+B,EACAq+B,IzC03BF,SAAkBr+B,EAASq+B,GAAoB,IAAXxjC,EAAIxqB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxC,MAAM,KAAEkzB,EAAI,EAAEpU,EAAC,EAAEhM,GAAMmhB,GAAYtE,EAASq+B,EAASxjC,EAAK0J,cACpD+5B,EAAO,IAAI17B,GAAStG,GAASD,IAEnC,IAAItK,EACJ,IAFAusC,EAAK96B,WAAWD,KAEPxR,EAAM4R,GAAS26B,EAAK56B,eAAgBvU,EAAGhM,EAAG0X,EAAKiK,aACpDw5B,EAAK96B,aACT,OAAOkB,GAAY3S,EAAK8I,EAC5B,CyCj4BKqjC,CAAmBl+B,EAASq+B,EAAS,CAACz5B,KAAK,EAAOC,WAAW,IACjCq5B,GAAAA,kBAC1B,MAAMK,GzC+yBN,SAAsB/wC,GAAkC,IAAtBkT,EAAYrwB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GACjD,OAAO+T,GAAMo6C,eAAehxC,GAAYrB,WAAWuU,EACvD,E0CpxBM+9B,GAA+B5zB,GAAAA,GAcnC,CACAA,GAAAA,GAAgB,iBAChBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAgB,6BAChBA,GAAAA,GAAiB,oBACjBA,GAAAA,GAAgB,8BAChBA,GAAAA,GAAiB,qBACjBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAgB,2BAChBA,GAAAA,GAAkB,GAAI,cACtBA,GAAAA,GAAkB,GAAI,aACtBA,GAAAA,GAAgB,gBAGX,MAAM6zB,GAIX9vD,cAAe,CAafsV,6BACE8N,GAEAtY,GAlFqB,KAmFnBsY,EAAUtjB,OACY,4CAAuCsjB,EAAUtjB,gBAGzE,IACE,OAAOJ,EAAAA,GAAAA,KAAYosB,GAAWqM,GAAS/U,KAAa1Z,OAzF3B,IA4FzB,MAAOyrB,GACP,MAAM,IAAI7zB,MAA8C,wCAAA6zB,IAC1D,CACF,CAMA7f,sCACEg3B,GAEA,MAAM,UAAClpB,EAAS,QAAEpW,EAAO,UAAEqkB,EAAS,WAAE0+B,EAAU,iBAAErB,GAChDpiB,EACF,OAAOwjB,GAAiBE,gCAAgC,CACtDC,WAAYH,GAAiBI,sBAAsB9sC,GACnDpW,UACAqkB,YACA0+B,aACArB,oBAEJ,CAMAp5C,uCACEg3B,GAEA,MACE2jB,WAAYE,EAAU,QACtBnjD,EAAO,UACPqkB,EAAS,WACT0+B,EAAU,iBACVrB,EAAmB,GACjBpiB,EAEJ,IAAI2jB,EAGAA,EAFsB,kBAAfE,EACLA,EAAWnQ,WAAW,MACXtgD,EAAAA,GAAAA,KAAYywD,EAAWC,OAAO,GAAI,OAElC1wD,EAAAA,GAAAA,KAAYywD,EAAY,OAG1BA,EAGfrlD,GA7I2B,KA8IzBmlD,EAAWnwD,OACQ,yCAA6CmwD,EAAWnwD,gBAG7E,MAEM8uD,EAFY,GAEkBqB,EAAWnwD,OACzC+uD,EAAoBD,EAAkBv9B,EAAUvxB,OAAS,EAGzDstC,EAAkB1tC,EAAAA,GAAAA,MACtBmwD,GAA6B5vD,KAAO+M,EAAQlN,QAsB9C,OAnBA+vD,GAA6B9tD,OAC3B,CACE+sD,cARkB,EASlBF,kBACAI,0BAA2BN,EAC3B2B,iBAfc,GAgBdC,2BAA4B5B,EAC5BG,oBACAK,gBAAiBliD,EAAQlN,OACzBqvD,wBAAyBT,EACzBr9B,UAAW8G,GAAS9G,GACpB4+B,WAAY93B,GAAS83B,GACrBF,cAEF3iB,GAGFA,EAAgBl/B,KAAKiqB,GAASnrB,GAAU6iD,GAA6B5vD,MAE9D,IAAI4kC,GAAuB,CAChCtb,KAAM,GACNkQ,UAAWq2B,GAAiBr2B,UAC5BptB,KAAM+gC,GAEV,CAMA93B,uCACEg3B,GAEA,MAAO1tB,WAAY2xC,EAAI,QAAEvjD,EAAO,iBAAE0hD,GAAoBpiB,EAEtDxhC,GAhMsB,KAiMpBylD,EAAKzwD,OACkB,6CAAwCywD,EAAKzwD,gBAGtE,IACE,MAAM8e,EAAauZ,GAASo4B,GACtBntC,EAAYusC,GAChB/wC,GACA,GACAlV,MAAM,GACF8mD,EAAc9wD,EAAAA,GAAAA,KAAYosB,GAAWqM,GAASnrB,MAC7CqkB,EAAW0+B,GAAcP,GAAUgB,EAAa5xC,GAEvD,OAAOjS,KAAK0iD,+BAA+B,CACzCjsC,YACApW,UACAqkB,YACA0+B,aACArB,qBAEF,MAAOv5B,GACP,MAAM,IAAI7zB,MAAqC,+BAAA6zB,IACjD,CACF,EAxJW26B,GASJr2B,UAAuB,IAAIZ,GAChC,qDC7DS43B,GAAkB,IAAI53B,GACjC,+CA+BK,MAAM63B,GAWX1wD,YAAY2wD,EAAuBjhB,EAAekhB,GAAsB,KATxED,mBAAa,OAEbjhB,WAAK,OAELkhB,eAAS,EAMPjkD,KAAKgkD,cAAgBA,EACrBhkD,KAAK+iC,MAAQA,EACb/iC,KAAKikD,UAAYA,CACnB,EAfWF,GAoBJt2B,QAAkB,IAAIs2B,GAAO,EAAG,EAAG73B,GAAUuB,eAqazCy2B,GAA4BlwD,OAAO0T,OAI7C,CACDy8C,WAAY,CACV31B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA6D,CACnEA,GAAAA,GAAiB,elC1ZG,WAAqC,IAApC/7B,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,aAC5C,OAAOw6B,GAAAA,GAKL,CAAC7Y,GAAU,UAAWA,GAAU,eAAgBljB,EACpD,CkCoZMitC,GlC/YgB,WAAiC,IAAhCjtC,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,SACxC,OAAOw6B,GAAAA,GAOL,CACEA,GAAAA,GAAkB,iBAClBA,GAAAA,GAAkB,SAClB7Y,GAAU,cAEZljB,EAEJ,CkCiYM6wD,MAGJC,UAAW,CACT71B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA4D,CAClEA,GAAAA,GAAiB,eACjB7Y,GAAiB,iBACjB6Y,GAAAA,GAAiB,6BAGrBg1B,SAAU,CACR91B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA2D,CACjEA,GAAAA,GAAiB,kBAGrBi1B,MAAO,CACL/1B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAAwD,CAC9DA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,eAGtBk1B,SAAU,CACRh2B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA2D,CACjEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,eAGtBm1B,WAAY,CACVj2B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA6D,CACnEA,GAAAA,GAAiB,kBAGrBo1B,MAAO,CACLl2B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAAwD,CAC9DA,GAAAA,GAAiB,kBAGrBq1B,kBAAmB,CACjBn2B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GACN,CACEA,GAAAA,GAAiB,eACjB7Y,GAAiB,iBACjB6Y,GAAAA,GAAiB,0BACjBC,GAAkB,iBAClB9Y,GAAiB,uBAiBeziB,OAAO0T,OAAO,CACpDk9C,OAAQ,CACNp2B,MAAO,GAETq2B,WAAY,CACVr2B,MAAO,KAOJ,MAAMs2B,GAIXzxD,cAAe,CAqBfsV,kBAAkBg3B,GAChB,MAAM,YAAColB,EAAW,WAAEvkB,EAAY4jB,OAAQY,GAAerlB,EACjDykB,EAAiBY,GAAejB,GAAOt2B,QAEvC/tB,EAAOk+B,GADAsmB,GAA0BC,WACT,CAC5B3jB,WAAY,CACVykB,OAAQz5B,GAASgV,EAAWykB,OAAOz5B,YACnC05B,WAAY15B,GAASgV,EAAW0kB,WAAW15B,aAE7C44B,OAAQ,CACNJ,cAAeI,EAAOJ,cACtBjhB,MAAOqhB,EAAOrhB,MACdkhB,UAAWz4B,GAAS44B,EAAOH,UAAUz4B,eAGnCiV,EAAkB,CACtB7jB,KAAM,CACJ,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQoN,GAAoB9L,UAAU,EAAOC,YAAY,IAE5D9D,UAAW9sB,KAAK8sB,UAChBptB,QAEF,OAAO,IAAIw4B,GAAuBuI,EACpC,CAMA93B,6BACEg3B,GAEA,MAAMvK,EAAc,IAAIgD,GACxBhD,EAAYxxB,IACV87B,GAAcS,sBAAsB,CAClCL,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOolB,YACzB/kB,WAAYL,EAAOK,WACnBhY,KAAM2X,EAAO3X,KACb4X,SAAUD,EAAOC,SACjBC,MAAO7/B,KAAK6/B,MACZ/S,UAAW9sB,KAAK8sB,aAIpB,MAAM,YAACi4B,EAAW,WAAEvkB,EAAU,OAAE4jB,GAAUzkB,EAC1C,OAAOvK,EAAYxxB,IAAI5D,KAAKmlD,WAAW,CAACJ,cAAavkB,aAAY4jB,WACnE,CAKAz7C,qBAAqBg3B,GACnB,MAAMvK,EAAc,IAAIgD,GACxBhD,EAAYxxB,IACV87B,GAAcW,cAAc,CAC1BP,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOolB,YACzBnlB,SAAUD,EAAOC,SACjBC,MAAO7/B,KAAK6/B,MACZ/S,UAAW9sB,KAAK8sB,aAIpB,MAAM,YAACi4B,EAAW,WAAEvkB,EAAU,OAAE4jB,GAAUzkB,EAC1C,OAAOvK,EAAYxxB,IAAI5D,KAAKmlD,WAAW,CAACJ,cAAavkB,aAAY4jB,WACnE,CAOAz7C,gBAAgBg3B,GACd,MAAM,YAAColB,EAAW,iBAAE5mB,EAAgB,WAAEmO,GAAc3M,EAG9CjgC,EAAOk+B,GADAsmB,GAA0BI,UAGvC,OAAO,IAAIlsB,IAAcx0B,IAAI,CAC3BgZ,KAAM,CACJ,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQid,EAAY3b,UAAU,EAAOC,YAAY,GAClD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CACEvB,OAAQqN,GACR/L,UAAU,EACVC,YAAY,GAEd,CAACvB,OAAQy0B,GAAiBnzB,UAAU,EAAOC,YAAY,GACvD,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IAEzD9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAMAiJ,iBAAiBg3B,GACf,MAAM,YACJolB,EAAW,iBACX5mB,EAAgB,oBAChBuC,EAAmB,uBACnB0kB,EAAsB,gBACtBC,GACE1lB,EAGEjgC,EAAOk+B,GADAsmB,GAA0BG,UACT,CAC5BiB,cAAe95B,GAASkV,EAAoBlV,YAC5C45B,uBAAwBA,EAAuB52B,QAG3C5R,EAAO,CACX,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IASzD,OAPIy0B,GACFzoC,EAAKpkB,KAAK,CACR62B,OAAQg2B,EACR10B,UAAU,EACVC,YAAY,KAGT,IAAIwH,IAAcx0B,IAAI,CAC3BgZ,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAMAiJ,yBAAyBg3B,GACvB,MAAM,YACJolB,EAAW,cACXQ,EAAa,cACbC,EAAa,eACbC,EAAc,oBACd/kB,EAAmB,uBACnB0kB,EAAsB,gBACtBC,GACE1lB,EAGEjgC,EAAOk+B,GADAsmB,GAA0BS,kBACT,CAC5BW,cAAe95B,GAASkV,EAAoBlV,YAC5C45B,uBAAwBA,EAAuB52B,MAC/Cg3B,cAAeA,EACfC,eAAgBj6B,GAASi6B,EAAej6B,cAGpC5O,EAAO,CACX,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQk2B,EAAe50B,UAAU,EAAMC,YAAY,GACpD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,IAS7D,OAPIy0B,GACFzoC,EAAKpkB,KAAK,CACR62B,OAAQg2B,EACR10B,UAAU,EACVC,YAAY,KAGT,IAAIwH,IAAcx0B,IAAI,CAC3BgZ,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,wBAAwBg3B,GACtB,MAAM,YAAColB,EAAW,iBAAE5mB,EAAgB,iBAAEunB,EAAgB,SAAE9lB,GAAYD,EAE9DjgC,EAAOk+B,GADAsmB,GAA0BK,MACT,CAAC3kB,aAC/B,OAAO,IAAI1H,GAAuB,CAChCtb,KAAM,CACJ,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQq2B,EAAkB/0B,UAAU,EAAOC,YAAY,GACxD,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IAEzD9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,aAAag3B,GACX,MAAMvK,EAAc,IAAIgD,GAUxB,OATAhD,EAAYxxB,IACV87B,GAAcW,cAAc,CAC1BP,WAAYH,EAAOxB,iBACnB4B,iBAAkBJ,EAAO+lB,iBACzB9lB,SAAU,EACVC,MAAO7/B,KAAK6/B,MACZ/S,UAAW9sB,KAAK8sB,aAGbsI,EAAYxxB,IAAI5D,KAAK2lD,iBAAiBhmB,GAC/C,CAMAh3B,qBAAqBg3B,GACnB,MAAM,YACJolB,EAAW,iBACX5mB,EAAgB,iBAChBunB,EAAgB,WAChB1lB,EAAU,KACVhY,EAAI,SACJ4X,GACED,EACEvK,EAAc,IAAIgD,GAUxB,OATAhD,EAAYxxB,IACV87B,GAAc0B,SAAS,CACrBlB,cAAewlB,EACf1lB,aACAhY,OACA6X,MAAO7/B,KAAK6/B,MACZ/S,UAAW9sB,KAAK8sB,aAGbsI,EAAYxxB,IACjB5D,KAAK2lD,iBAAiB,CACpBZ,cACA5mB,mBACAunB,mBACA9lB,aAGN,CAKAj3B,aAAag3B,GACX,MAAM,YAAColB,EAAW,kBAAEa,EAAiB,iBAAEznB,GAAoBwB,EAErDjgC,EAAOk+B,GADAsmB,GAA0BQ,OAGvC,OAAO,IAAItsB,IAAcx0B,IAAI,CAC3BgZ,KAAM,CACJ,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQu2B,EAAmBj1B,UAAU,EAAOC,YAAY,GACzD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CACEvB,OAAQqN,GACR/L,UAAU,EACVC,YAAY,GAEd,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IAEzD9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,gBAAgBg3B,GACd,MAAM,YAAColB,EAAW,iBAAE5mB,EAAgB,SAAE8B,EAAQ,SAAEL,EAAQ,gBAAEylB,GACxD1lB,EAEIjgC,EAAOk+B,GADAsmB,GAA0BM,SACT,CAAC5kB,aAEzBhjB,EAAO,CACX,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQ4Q,EAAUtP,UAAU,EAAOC,YAAY,GAChD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CACEvB,OAAQqN,GACR/L,UAAU,EACVC,YAAY,GAEd,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IASzD,OAPIy0B,GACFzoC,EAAKpkB,KAAK,CACR62B,OAAQg2B,EACR10B,UAAU,EACVC,YAAY,KAGT,IAAIwH,IAAcx0B,IAAI,CAC3BgZ,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,kBAAkBg3B,GAChB,MAAM,YAAColB,EAAW,iBAAE5mB,GAAoBwB,EAElCjgC,EAAOk+B,GADAsmB,GAA0BO,YAGvC,OAAO,IAAIrsB,IAAcx0B,IAAI,CAC3BgZ,KAAM,CACJ,CAACyS,OAAQ01B,EAAap0B,UAAU,EAAOC,YAAY,GACnD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IAEzD9D,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,EA3VWolD,GASJh4B,UAAuB,IAAIZ,GAChC,+CAVS44B,GAoBJjlB,MAAgB,IC5TzB,MAAMgmB,GAA2B7xD,OAAO0T,OAIrC,CACDo+C,kBAAmB,CACjBt3B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAAmE,CACzEA,GAAAA,GAAiB,enC5KC,WAAmC,IAAlC/7B,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,WAC1C,OAAOw6B,GAAAA,GAQL,CACE7Y,GAAU,cACVA,GAAU,mBACVA,GAAU,wBACV6Y,GAAAA,GAAgB,eAElB/7B,EAEJ,CmC4JMwyD,MAGJ1B,UAAW,CACT71B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA2D,CACjEA,GAAAA,GAAiB,eACjB7Y,GAAiB,iBACjB6Y,GAAAA,GAAiB,4BAGrBk1B,SAAU,CACRh2B,MAAO,EACPj5B,OAAQ+5B,GAAAA,GAA0D,CAChEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,eAGtBq1B,kBAAmB,CACjBn2B,MAAO,GACPj5B,OAAQ+5B,GAAAA,GAAmE,CACzEA,GAAAA,GAAiB,enC5KkB,WAEpC,IADH/7B,EAAgBuB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,4BAEnB,OAAOw6B,GAAAA,GACL,CACEA,GAAAA,GAAiB,yBACjB7Y,GAAU,yCACV8Y,GAAW,kCACX9Y,GAAU,kBAEZljB,EAEJ,CmCiKMyyD,QAgBiChyD,OAAO0T,OAAO,CACnDu+C,MAAO,CACLz3B,MAAO,GAETq2B,WAAY,CACVr2B,MAAO,KAOJ,MAAM03B,GAIX7yD,cAAe,CAqBfsV,yBACEg3B,GAEA,MAAM,WAAC2M,EAAU,WAAEC,EAAU,SAAEwZ,GAAYpmB,EAErCjgC,EAAOk+B,GADAioB,GAAyBC,kBACR,CAC5BC,SAAU,CACRxZ,WAAY/gB,GAASu6B,EAASxZ,WAAW/gB,YACzC26B,gBAAiB36B,GAASu6B,EAASI,gBAAgB36B,YACnD46B,qBAAsB56B,GACpBu6B,EAASK,qBAAqB56B,YAEhCgc,WAAYue,EAASve,cAGnB/G,EAAkB,CACtB7jB,KAAM,CACJ,CAACyS,OAAQid,EAAY3b,UAAU,EAAOC,YAAY,GAClD,CAACvB,OAAQoN,GAAoB9L,UAAU,EAAOC,YAAY,GAC1D,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CAACvB,OAAQkd,EAAY5b,UAAU,EAAMC,YAAY,IAEnD9D,UAAW9sB,KAAK8sB,UAChBptB,QAEF,OAAO,IAAIw4B,GAAuBuI,EACpC,CAKA93B,qBAAqBg3B,GACnB,MAAMvK,EAAc,IAAIgD,GAWxB,OAVAhD,EAAYxxB,IACV87B,GAAcW,cAAc,CAC1BP,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAO2M,WACzB1M,SAAUD,EAAOC,SACjBC,MAAO7/B,KAAK6/B,MACZ/S,UAAW9sB,KAAK8sB,aAIbsI,EAAYxxB,IACjB5D,KAAKqmD,kBAAkB,CACrB/Z,WAAY3M,EAAO2M,WACnBC,WAAY5M,EAAOomB,SAASxZ,WAC5BwZ,SAAUpmB,EAAOomB,WAGvB,CAKAp9C,iBAAiBg3B,GACf,MAAM,WACJ2M,EAAU,iBACVnO,EAAgB,oBAChBuC,EAAmB,sBACnB4lB,GACE3mB,EAGEjgC,EAAOk+B,GADAioB,GAAyBxB,UACR,CAC5BiB,cAAe95B,GAASkV,EAAoBlV,YAC5C86B,sBAAuBA,EAAsB93B,QAGzC5R,EAAO,CACX,CAACyS,OAAQid,EAAY3b,UAAU,EAAOC,YAAY,GAClD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CAACvB,OAAQ8O,EAAkBxN,UAAU,EAAMC,YAAY,IAGzD,OAAO,IAAIwH,IAAcx0B,IAAI,CAC3BgZ,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAMAiJ,yBAAyBg3B,GACvB,MAAM,qCACJ4mB,EAAoC,sCACpCC,EAAqC,+BACrCC,EAA8B,oBAC9B/lB,EAAmB,sBACnB4lB,EAAqB,WACrBha,GACE3M,EAGEjgC,EAAOk+B,GADAioB,GAAyBlB,kBACR,CAC5BqB,0BAA2B,CACzBQ,sCAAuCh7B,GACrCg7B,EAAsCh7B,YAExCi7B,+BAAgCA,EAChCnB,cAAe95B,GAASkV,EAAoBlV,YAC5C86B,sBAAuBA,EAAsB93B,SAI3C5R,EAAO,CACX,CAACyS,OAAQid,EAAY3b,UAAU,EAAOC,YAAY,GAClD,CAACvB,OAAQkN,GAAqB5L,UAAU,EAAOC,YAAY,GAC3D,CACEvB,OAAQk3B,EACR51B,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAIwH,IAAcx0B,IAAI,CAC3BgZ,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAKAiJ,gBAAgBg3B,GACd,MAAM,WAAC2M,EAAU,2BAAEoa,EAA0B,SAAE9mB,EAAQ,SAAEK,GAAYN,EAE/DjgC,EAAOk+B,GADAioB,GAAyBrB,SACR,CAAC5kB,aAEzBhjB,EAAO,CACX,CAACyS,OAAQid,EAAY3b,UAAU,EAAOC,YAAY,GAClD,CAACvB,OAAQ4Q,EAAUtP,UAAU,EAAOC,YAAY,GAChD,CAACvB,OAAQq3B,EAA4B/1B,UAAU,EAAMC,YAAY,IAGnE,OAAO,IAAIwH,IAAcx0B,IAAI,CAC3BgZ,OACAkQ,UAAW9sB,KAAK8sB,UAChBptB,QAEJ,CAUAiJ,oBACEg3B,EACAgnB,EACAC,GAEA,GAAIjnB,EAAOC,SAAW+mB,EAA4BC,EAChD,MAAM,IAAIjyD,MACR,4DAGJ,OAAOuxD,GAAYW,SAASlnB,EAC9B,EA9LWumB,GASJp5B,UAAuB,IAAIZ,GAChC,+CAVSg6B,GAoBJrmB,MAAgB,KCrWS,IAAI3T,GACpC,+CAyBiBlS,GAAK,CACtBzlB,KAAMkoB,KACNqqC,QAASzqC,GAASI,MAClBsqC,QAAS1qC,GAASI,MAClBuqC,gBAAiB3qC,GAASI,QCnCG,IAAIyP,GACjC,+CAoEwBoD,GAAAA,GAAqC,CAC7D7Y,GAAiB,cACjBA,GAAiB,wBACjB6Y,GAAAA,GAAgB,cAChBA,GAAAA,KACAA,GAAAA,GACEA,GAAAA,GAAoB,CAClBA,GAAAA,GAAkB,QAClBA,GAAAA,GAAiB,uBAEnBA,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,SAEFA,GAAAA,GAAgB,iBAChBA,GAAAA,GAAkB,YAClBA,GAAAA,KACAA,GAAAA,GACEA,GAAAA,GAAoB,CAClBA,GAAAA,GAAkB,SAClB7Y,GAAiB,qBAEnB6Y,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,oBAEFA,GAAAA,GACE,CACEA,GAAAA,GACEA,GAAAA,GAAoB,CAClB7Y,GAAiB,oBACjB6Y,GAAAA,GAAkB,+BAClBA,GAAAA,GAAkB,iBAEpB,GACA,OAEFA,GAAAA,GAAkB,OAClBA,GAAAA,GAAgB,YAElB,eAEFA,GAAAA,KACAA,GAAAA,GACEA,GAAAA,GAAoB,CAClBA,GAAAA,GAAkB,SAClBA,GAAAA,GAAkB,WAClBA,GAAAA,GAAkB,iBAEpBA,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,gBAEFA,GAAAA,GACE,CAACA,GAAAA,GAAkB,QAASA,GAAAA,GAAkB,cAC9C,iDCtHJ,MAAM23B,EAASx0D,EAAQ,MACjBy0D,EAAUz0D,EAAQ,OAClB00D,EACe,oBAAXhtC,QAAkD,oBAAlBA,OAAY,IAChDA,OAAY,IAAE,8BACd,KAENzc,EAAQ,GAAS3K,EAEjB2K,EAAQ,GAAoB,GAE5B,MAAM0pD,EAAe,WAwDrB,SAASC,EAAcl0D,GACrB,GAAIA,EAASi0D,EACX,MAAM,IAAIvzD,WAAW,cAAgBV,EAAS,kCAGhD,MAAMysB,EAAM,IAAIhtB,WAAWO,GAE3B,OADAa,OAAOszD,eAAe1nC,EAAK7sB,EAAOmB,WAC3B0rB,CACT,CAYA,SAAS7sB,EAAQ0jD,EAAK8Q,EAAkBp0D,GAEtC,GAAmB,kBAARsjD,EAAkB,CAC3B,GAAgC,kBAArB8Q,EACT,MAAM,IAAI10D,UACR,sEAGJ,OAAO20D,EAAY/Q,EACrB,CACA,OAAOzjD,EAAKyjD,EAAK8Q,EAAkBp0D,EACrC,CAIA,SAASH,EAAM4I,EAAO2rD,EAAkBp0D,GACtC,GAAqB,kBAAVyI,EACT,OAqHJ,SAAqB6gB,EAAQu6B,GACH,kBAAbA,GAAsC,KAAbA,IAClCA,EAAW,QAGb,IAAKjkD,EAAO00D,WAAWzQ,GACrB,MAAM,IAAInkD,UAAU,qBAAuBmkD,GAG7C,MAAM7jD,EAAwC,EAA/BkM,EAAWod,EAAQu6B,GAClC,IAAIp3B,EAAMynC,EAAal0D,GAEvB,MAAMu0D,EAAS9nC,EAAI3iB,MAAMwf,EAAQu6B,GAE7B0Q,IAAWv0D,IAIbysB,EAAMA,EAAI7iB,MAAM,EAAG2qD,IAGrB,OAAO9nC,CACT,CA3IW+nC,CAAW/rD,EAAO2rD,GAG3B,GAAIK,YAAYC,OAAOjsD,GACrB,OAkJJ,SAAwBksD,GACtB,GAAIC,EAAWD,EAAWl1D,YAAa,CACrC,MAAM0K,EAAO,IAAI1K,WAAWk1D,GAC5B,OAAOE,EAAgB1qD,EAAKrK,OAAQqK,EAAKpK,WAAYoK,EAAK+B,WAC5D,CACA,OAAO4oD,EAAcH,EACvB,CAxJWI,CAActsD,GAGvB,GAAa,MAATA,EACF,MAAM,IAAI/I,UACR,yHACiD+I,GAIrD,GAAImsD,EAAWnsD,EAAOgsD,cACjBhsD,GAASmsD,EAAWnsD,EAAM3I,OAAQ20D,aACrC,OAAOI,EAAgBpsD,EAAO2rD,EAAkBp0D,GAGlD,GAAiC,qBAAtBg1D,oBACNJ,EAAWnsD,EAAOusD,oBAClBvsD,GAASmsD,EAAWnsD,EAAM3I,OAAQk1D,oBACrC,OAAOH,EAAgBpsD,EAAO2rD,EAAkBp0D,GAGlD,GAAqB,kBAAVyI,EACT,MAAM,IAAI/I,UACR,yEAIJ,MAAMu1D,EAAUxsD,EAAMwsD,SAAWxsD,EAAMwsD,UACvC,GAAe,MAAXA,GAAmBA,IAAYxsD,EACjC,OAAO7I,EAAOC,KAAKo1D,EAASb,EAAkBp0D,GAGhD,MAAMR,EAkJR,SAAqBovC,GACnB,GAAIhvC,EAAOs1D,SAAStmB,GAAM,CACxB,MAAMhhC,EAA4B,EAAtBunD,EAAQvmB,EAAI5uC,QAClBysB,EAAMynC,EAAatmD,GAEzB,OAAmB,IAAf6e,EAAIzsB,QAIR4uC,EAAIzkC,KAAKsiB,EAAK,EAAG,EAAG7e,GAHX6e,CAKX,CAEA,QAAmB7qB,IAAfgtC,EAAI5uC,OACN,MAA0B,kBAAf4uC,EAAI5uC,QAAuBo1D,EAAYxmB,EAAI5uC,QAC7Ck0D,EAAa,GAEfY,EAAclmB,GAGvB,GAAiB,WAAbA,EAAI/nB,MAAqBjhB,MAAMC,QAAQ+oC,EAAIriC,MAC7C,OAAOuoD,EAAclmB,EAAIriC,KAE7B,CAzKY8oD,CAAW5sD,GACrB,GAAIjJ,EAAG,OAAOA,EAEd,GAAsB,qBAAXwnB,QAAgD,MAAtBA,OAAOsuC,aACH,oBAA9B7sD,EAAMue,OAAOsuC,aACtB,OAAO11D,EAAOC,KAAK4I,EAAMue,OAAOsuC,aAAa,UAAWlB,EAAkBp0D,GAG5E,MAAM,IAAIN,UACR,yHACiD+I,EAErD,CAmBA,SAAS8sD,EAAYx4B,GACnB,GAAoB,kBAATA,EACT,MAAM,IAAIr9B,UAAU,0CACf,GAAIq9B,EAAO,EAChB,MAAM,IAAIr8B,WAAW,cAAgBq8B,EAAO,iCAEhD,CA0BA,SAASs3B,EAAat3B,GAEpB,OADAw4B,EAAWx4B,GACJm3B,EAAan3B,EAAO,EAAI,EAAoB,EAAhBo4B,EAAQp4B,GAC7C,CAuCA,SAAS+3B,EAAeh1C,GACtB,MAAM9f,EAAS8f,EAAM9f,OAAS,EAAI,EAA4B,EAAxBm1D,EAAQr1C,EAAM9f,QAC9CysB,EAAMynC,EAAal0D,GACzB,IAAK,IAAIoF,EAAI,EAAGA,EAAIpF,EAAQoF,GAAK,EAC/BqnB,EAAIrnB,GAAgB,IAAX0a,EAAM1a,GAEjB,OAAOqnB,CACT,CAUA,SAASooC,EAAiB/0C,EAAO/f,EAAYC,GAC3C,GAAID,EAAa,GAAK+f,EAAM5T,WAAanM,EACvC,MAAM,IAAIW,WAAW,wCAGvB,GAAIof,EAAM5T,WAAanM,GAAcC,GAAU,GAC7C,MAAM,IAAIU,WAAW,wCAGvB,IAAI+rB,EAYJ,OAVEA,OADiB7qB,IAAf7B,QAAuC6B,IAAX5B,EACxB,IAAIP,WAAWqgB,QACDle,IAAX5B,EACH,IAAIP,WAAWqgB,EAAO/f,GAEtB,IAAIN,WAAWqgB,EAAO/f,EAAYC,GAI1Ca,OAAOszD,eAAe1nC,EAAK7sB,EAAOmB,WAE3B0rB,CACT,CA2BA,SAAS0oC,EAASn1D,GAGhB,GAAIA,GAAUi0D,EACZ,MAAM,IAAIvzD,WAAW,0DACauzD,EAAalqD,SAAS,IAAM,UAEhE,OAAgB,EAAT/J,CACT,CAsGA,SAASkM,EAAYod,EAAQu6B,GAC3B,GAAIjkD,EAAOs1D,SAAS5rC,GAClB,OAAOA,EAAOtpB,OAEhB,GAAIy0D,YAAYC,OAAOprC,IAAWsrC,EAAWtrC,EAAQmrC,aACnD,OAAOnrC,EAAOpd,WAEhB,GAAsB,kBAAXod,EACT,MAAM,IAAI5pB,UACR,kGAC0B4pB,GAI9B,MAAM1b,EAAM0b,EAAOtpB,OACbw1D,EAAa7zD,UAAU3B,OAAS,IAAsB,IAAjB2B,UAAU,GACrD,IAAK6zD,GAAqB,IAAR5nD,EAAW,OAAO,EAGpC,IAAI6nD,GAAc,EAClB,OACE,OAAQ5R,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOj2C,EACT,IAAK,OACL,IAAK,QACH,OAAOlB,EAAY4c,GAAQtpB,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAAN4N,EACT,IAAK,MACH,OAAOA,IAAQ,EACjB,IAAK,SACH,OAAO8nD,EAAcpsC,GAAQtpB,OAC/B,QACE,GAAIy1D,EACF,OAAOD,GAAa,EAAI9oD,EAAY4c,GAAQtpB,OAE9C6jD,GAAY,GAAKA,GAAU8R,cAC3BF,GAAc,EAGtB,CAGA,SAASG,EAAc/R,EAAUr6C,EAAOqsD,GACtC,IAAIJ,GAAc,EAclB,SALc7zD,IAAV4H,GAAuBA,EAAQ,KACjCA,EAAQ,GAINA,EAAQqD,KAAK7M,OACf,MAAO,GAOT,SAJY4B,IAARi0D,GAAqBA,EAAMhpD,KAAK7M,UAClC61D,EAAMhpD,KAAK7M,QAGT61D,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTrsD,KAAW,GAGT,MAAO,GAKT,IAFKq6C,IAAUA,EAAW,UAGxB,OAAQA,GACN,IAAK,MACH,OAAOiS,EAASjpD,KAAMrD,EAAOqsD,GAE/B,IAAK,OACL,IAAK,QACH,OAAOE,EAAUlpD,KAAMrD,EAAOqsD,GAEhC,IAAK,QACH,OAAOG,EAAWnpD,KAAMrD,EAAOqsD,GAEjC,IAAK,SACL,IAAK,SACH,OAAOI,EAAYppD,KAAMrD,EAAOqsD,GAElC,IAAK,SACH,OAAOK,EAAYrpD,KAAMrD,EAAOqsD,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOM,EAAatpD,KAAMrD,EAAOqsD,GAEnC,QACE,GAAIJ,EAAa,MAAM,IAAI/1D,UAAU,qBAAuBmkD,GAC5DA,GAAYA,EAAW,IAAI8R,cAC3BF,GAAc,EAGtB,CAUA,SAASW,EAAM52D,EAAGiL,EAAGgW,GACnB,MAAMrb,EAAI5F,EAAEiL,GACZjL,EAAEiL,GAAKjL,EAAEihB,GACTjhB,EAAEihB,GAAKrb,CACT,CA2IA,SAASixD,EAAsBv2D,EAAQolB,EAAKnlB,EAAY8jD,EAAUyS,GAEhE,GAAsB,IAAlBx2D,EAAOE,OAAc,OAAQ,EAmBjC,GAhB0B,kBAAfD,GACT8jD,EAAW9jD,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAc,aACvBA,GAAc,YAGZq1D,EADJr1D,GAAcA,KAGZA,EAAau2D,EAAM,EAAKx2D,EAAOE,OAAS,GAItCD,EAAa,IAAGA,EAAaD,EAAOE,OAASD,GAC7CA,GAAcD,EAAOE,OAAQ,CAC/B,GAAIs2D,EAAK,OAAQ,EACZv2D,EAAaD,EAAOE,OAAS,CACpC,MAAO,GAAID,EAAa,EAAG,CACzB,IAAIu2D,EACC,OAAQ,EADJv2D,EAAa,CAExB,CAQA,GALmB,kBAARmlB,IACTA,EAAMtlB,EAAOC,KAAKqlB,EAAK2+B,IAIrBjkD,EAAOs1D,SAAShwC,GAElB,OAAmB,IAAfA,EAAIllB,QACE,EAEHu2D,EAAaz2D,EAAQolB,EAAKnlB,EAAY8jD,EAAUyS,GAClD,GAAmB,kBAARpxC,EAEhB,OADAA,GAAY,IACgC,oBAAjCzlB,WAAWsB,UAAU+lC,QAC1BwvB,EACK72D,WAAWsB,UAAU+lC,QAAQn/B,KAAK7H,EAAQolB,EAAKnlB,GAE/CN,WAAWsB,UAAUy1D,YAAY7uD,KAAK7H,EAAQolB,EAAKnlB,GAGvDw2D,EAAaz2D,EAAQ,CAAColB,GAAMnlB,EAAY8jD,EAAUyS,GAG3D,MAAM,IAAI52D,UAAU,uCACtB,CAEA,SAAS62D,EAAcvqD,EAAKkZ,EAAKnlB,EAAY8jD,EAAUyS,GACrD,IA0BIlxD,EA1BAqxD,EAAY,EACZC,EAAY1qD,EAAIhM,OAChB22D,EAAYzxC,EAAIllB,OAEpB,QAAiB4B,IAAbiiD,IAEe,UADjBA,EAAW55C,OAAO45C,GAAU8R,gBACY,UAAb9R,GACV,YAAbA,GAAuC,aAAbA,GAAyB,CACrD,GAAI73C,EAAIhM,OAAS,GAAKklB,EAAIllB,OAAS,EACjC,OAAQ,EAEVy2D,EAAY,EACZC,GAAa,EACbC,GAAa,EACb52D,GAAc,CAChB,CAGF,SAAS62D,EAAMnqC,EAAKrnB,GAClB,OAAkB,IAAdqxD,EACKhqC,EAAIrnB,GAEJqnB,EAAIoqC,aAAazxD,EAAIqxD,EAEhC,CAGA,GAAIH,EAAK,CACP,IAAIQ,GAAc,EAClB,IAAK1xD,EAAIrF,EAAYqF,EAAIsxD,EAAWtxD,IAClC,GAAIwxD,EAAK5qD,EAAK5G,KAAOwxD,EAAK1xC,GAAqB,IAAhB4xC,EAAoB,EAAI1xD,EAAI0xD,IAEzD,IADoB,IAAhBA,IAAmBA,EAAa1xD,GAChCA,EAAI0xD,EAAa,IAAMH,EAAW,OAAOG,EAAaL,OAEtC,IAAhBK,IAAmB1xD,GAAKA,EAAI0xD,GAChCA,GAAc,CAGpB,MAEE,IADI/2D,EAAa42D,EAAYD,IAAW32D,EAAa22D,EAAYC,GAC5DvxD,EAAIrF,EAAYqF,GAAK,EAAGA,IAAK,CAChC,IAAI2xD,GAAQ,EACZ,IAAK,IAAIh3C,EAAI,EAAGA,EAAI42C,EAAW52C,IAC7B,GAAI62C,EAAK5qD,EAAK5G,EAAI2a,KAAO62C,EAAK1xC,EAAKnF,GAAI,CACrCg3C,GAAQ,EACR,KACF,CAEF,GAAIA,EAAO,OAAO3xD,CACpB,CAGF,OAAQ,CACV,CAcA,SAAS4xD,EAAUvqC,EAAKnD,EAAQ7oB,EAAQT,GACtCS,EAASJ,OAAOI,IAAW,EAC3B,MAAMw2D,EAAYxqC,EAAIzsB,OAASS,EAC1BT,GAGHA,EAASK,OAAOL,IACHi3D,IACXj3D,EAASi3D,GAJXj3D,EAASi3D,EAQX,MAAMC,EAAS5tC,EAAOtpB,OAKtB,IAAIoF,EACJ,IAJIpF,EAASk3D,EAAS,IACpBl3D,EAASk3D,EAAS,GAGf9xD,EAAI,EAAGA,EAAIpF,IAAUoF,EAAG,CAC3B,MAAM0xC,EAAS52B,SAASoJ,EAAOgnC,OAAW,EAAJlrD,EAAO,GAAI,IACjD,GAAIgwD,EAAYte,GAAS,OAAO1xC,EAChCqnB,EAAIhsB,EAAS2E,GAAK0xC,CACpB,CACA,OAAO1xC,CACT,CAEA,SAAS+xD,EAAW1qC,EAAKnD,EAAQ7oB,EAAQT,GACvC,OAAOo3D,EAAW1qD,EAAY4c,EAAQmD,EAAIzsB,OAASS,GAASgsB,EAAKhsB,EAAQT,EAC3E,CAEA,SAASq3D,EAAY5qC,EAAKnD,EAAQ7oB,EAAQT,GACxC,OAAOo3D,EAypCT,SAAuB5qD,GACrB,MAAM21B,EAAY,GAClB,IAAK,IAAI/8B,EAAI,EAAGA,EAAIoH,EAAIxM,SAAUoF,EAEhC+8B,EAAU98B,KAAyB,IAApBmH,EAAIirB,WAAWryB,IAEhC,OAAO+8B,CACT,CAhqCoBm1B,CAAahuC,GAASmD,EAAKhsB,EAAQT,EACvD,CAEA,SAASu3D,EAAa9qC,EAAKnD,EAAQ7oB,EAAQT,GACzC,OAAOo3D,EAAW1B,EAAcpsC,GAASmD,EAAKhsB,EAAQT,EACxD,CAEA,SAASw3D,EAAW/qC,EAAKnD,EAAQ7oB,EAAQT,GACvC,OAAOo3D,EA0pCT,SAAyB5qD,EAAKirD,GAC5B,IAAIj8C,EAAGk8C,EAAIr2D,EACX,MAAM8gC,EAAY,GAClB,IAAK,IAAI/8B,EAAI,EAAGA,EAAIoH,EAAIxM,WACjBy3D,GAAS,GAAK,KADaryD,EAGhCoW,EAAIhP,EAAIirB,WAAWryB,GACnBsyD,EAAKl8C,GAAK,EACVna,EAAKma,EAAI,IACT2mB,EAAU98B,KAAKhE,GACf8gC,EAAU98B,KAAKqyD,GAGjB,OAAOv1B,CACT,CAxqCoBw1B,CAAeruC,EAAQmD,EAAIzsB,OAASS,GAASgsB,EAAKhsB,EAAQT,EAC9E,CA8EA,SAASk2D,EAAazpC,EAAKjjB,EAAOqsD,GAChC,OAAc,IAAVrsD,GAAeqsD,IAAQppC,EAAIzsB,OACtB8zD,EAAO8D,cAAcnrC,GAErBqnC,EAAO8D,cAAcnrC,EAAI7iB,MAAMJ,EAAOqsD,GAEjD,CAEA,SAASE,EAAWtpC,EAAKjjB,EAAOqsD,GAC9BA,EAAM9zD,KAAK6J,IAAI6gB,EAAIzsB,OAAQ61D,GAC3B,MAAM3mD,EAAM,GAEZ,IAAI9J,EAAIoE,EACR,KAAOpE,EAAIywD,GAAK,CACd,MAAMgC,EAAYprC,EAAIrnB,GACtB,IAAI0yD,EAAY,KACZC,EAAoBF,EAAY,IAChC,EACCA,EAAY,IACT,EACCA,EAAY,IACT,EACA,EAEZ,GAAIzyD,EAAI2yD,GAAoBlC,EAAK,CAC/B,IAAImC,EAAYC,EAAWC,EAAYC,EAEvC,OAAQJ,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAEd,MACF,KAAK,EACHG,EAAavrC,EAAIrnB,EAAI,GACO,OAAV,IAAb4yD,KACHG,GAA6B,GAAZN,IAAqB,EAAoB,GAAbG,EACzCG,EAAgB,MAClBL,EAAYK,IAGhB,MACF,KAAK,EACHH,EAAavrC,EAAIrnB,EAAI,GACrB6yD,EAAYxrC,EAAIrnB,EAAI,GACQ,OAAV,IAAb4yD,IAAsD,OAAV,IAAZC,KACnCE,GAA6B,GAAZN,IAAoB,IAAoB,GAAbG,IAAsB,EAAmB,GAAZC,EACrEE,EAAgB,OAAUA,EAAgB,OAAUA,EAAgB,SACtEL,EAAYK,IAGhB,MACF,KAAK,EACHH,EAAavrC,EAAIrnB,EAAI,GACrB6yD,EAAYxrC,EAAIrnB,EAAI,GACpB8yD,EAAazrC,EAAIrnB,EAAI,GACO,OAAV,IAAb4yD,IAAsD,OAAV,IAAZC,IAAsD,OAAV,IAAbC,KAClEC,GAA6B,GAAZN,IAAoB,IAAqB,GAAbG,IAAsB,IAAmB,GAAZC,IAAqB,EAAoB,GAAbC,EAClGC,EAAgB,OAAUA,EAAgB,UAC5CL,EAAYK,IAItB,CAEkB,OAAdL,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACb5oD,EAAI7J,KAAKyyD,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvB5oD,EAAI7J,KAAKyyD,GACT1yD,GAAK2yD,CACP,CAEA,OAQF,SAAgCK,GAC9B,MAAMxqD,EAAMwqD,EAAWp4D,OACvB,GAAI4N,GAAOyqD,EACT,OAAOpuD,OAAOquD,aAAaC,MAAMtuD,OAAQmuD,GAI3C,IAAIlpD,EAAM,GACN9J,EAAI,EACR,KAAOA,EAAIwI,GACTsB,GAAOjF,OAAOquD,aAAaC,MACzBtuD,OACAmuD,EAAWxuD,MAAMxE,EAAGA,GAAKizD,IAG7B,OAAOnpD,CACT,CAxBSspD,CAAsBtpD,EAC/B,CA39BAtP,EAAO64D,oBAUP,WAEE,IACE,MAAMzsD,EAAM,IAAIvM,WAAW,GACrBi5D,EAAQ,CAAEC,IAAK,WAAc,OAAO,EAAG,GAG7C,OAFA93D,OAAOszD,eAAeuE,EAAOj5D,WAAWsB,WACxCF,OAAOszD,eAAenoD,EAAK0sD,GACN,KAAd1sD,EAAI2sD,KACb,CAAE,MAAO3yD,GACP,OAAO,CACT,CACF,CArB6B4yD,GAExBh5D,EAAO64D,qBAA0C,qBAAZzyB,SACb,oBAAlBA,QAAQ3Q,OACjB2Q,QAAQ3Q,MACN,iJAkBJx0B,OAAO65B,eAAe96B,EAAOmB,UAAW,SAAU,CAChD83D,YAAY,EACZ5pD,IAAK,WACH,GAAKrP,EAAOs1D,SAASroD,MACrB,OAAOA,KAAK/M,MACd,IAGFe,OAAO65B,eAAe96B,EAAOmB,UAAW,SAAU,CAChD83D,YAAY,EACZ5pD,IAAK,WACH,GAAKrP,EAAOs1D,SAASroD,MACrB,OAAOA,KAAK9M,UACd,IAoCFH,EAAOk5D,SAAW,KA8DlBl5D,EAAOC,KAAO,SAAU4I,EAAO2rD,EAAkBp0D,GAC/C,OAAOH,EAAK4I,EAAO2rD,EAAkBp0D,EACvC,EAIAa,OAAOszD,eAAev0D,EAAOmB,UAAWtB,WAAWsB,WACnDF,OAAOszD,eAAev0D,EAAQH,YA8B9BG,EAAO88B,MAAQ,SAAUK,EAAM3uB,EAAMy1C,GACnC,OArBF,SAAgB9mB,EAAM3uB,EAAMy1C,GAE1B,OADA0R,EAAWx4B,GACPA,GAAQ,EACHm3B,EAAan3B,QAETn7B,IAATwM,EAIyB,kBAAby1C,EACVqQ,EAAan3B,GAAM3uB,KAAKA,EAAMy1C,GAC9BqQ,EAAan3B,GAAM3uB,KAAKA,GAEvB8lD,EAAan3B,EACtB,CAOSL,CAAMK,EAAM3uB,EAAMy1C,EAC3B,EAUAjkD,EAAOy0D,YAAc,SAAUt3B,GAC7B,OAAOs3B,EAAYt3B,EACrB,EAIAn9B,EAAOm5D,gBAAkB,SAAUh8B,GACjC,OAAOs3B,EAAYt3B,EACrB,EA6GAn9B,EAAOs1D,SAAW,SAAmB11D,GACnC,OAAY,MAALA,IAA6B,IAAhBA,EAAEw5D,WACpBx5D,IAAMI,EAAOmB,SACjB,EAEAnB,EAAOq5D,QAAU,SAAkBzkD,EAAGhV,GAGpC,GAFIo1D,EAAWpgD,EAAG/U,cAAa+U,EAAI5U,EAAOC,KAAK2U,EAAGA,EAAE/T,OAAQ+T,EAAEtI,aAC1D0oD,EAAWp1D,EAAGC,cAAaD,EAAII,EAAOC,KAAKL,EAAGA,EAAEiB,OAAQjB,EAAE0M,cACzDtM,EAAOs1D,SAAS1gD,KAAO5U,EAAOs1D,SAAS11D,GAC1C,MAAM,IAAIE,UACR,yEAIJ,GAAI8U,IAAMhV,EAAG,OAAO,EAEpB,IAAI4V,EAAIZ,EAAExU,OACNqV,EAAI7V,EAAEQ,OAEV,IAAK,IAAIoF,EAAI,EAAGwI,EAAM7L,KAAK6J,IAAIwJ,EAAGC,GAAIjQ,EAAIwI,IAAOxI,EAC/C,GAAIoP,EAAEpP,KAAO5F,EAAE4F,GAAI,CACjBgQ,EAAIZ,EAAEpP,GACNiQ,EAAI7V,EAAE4F,GACN,KACF,CAGF,OAAIgQ,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,CACT,EAEAxV,EAAO00D,WAAa,SAAqBzQ,GACvC,OAAQ55C,OAAO45C,GAAU8R,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EACT,QACE,OAAO,EAEb,EAEA/1D,EAAOs6B,OAAS,SAAiBg/B,EAAMl5D,GACrC,IAAK4F,MAAMC,QAAQqzD,GACjB,MAAM,IAAIx5D,UAAU,+CAGtB,GAAoB,IAAhBw5D,EAAKl5D,OACP,OAAOJ,EAAO88B,MAAM,GAGtB,IAAIt3B,EACJ,QAAexD,IAAX5B,EAEF,IADAA,EAAS,EACJoF,EAAI,EAAGA,EAAI8zD,EAAKl5D,SAAUoF,EAC7BpF,GAAUk5D,EAAK9zD,GAAGpF,OAItB,MAAMF,EAASF,EAAOy0D,YAAYr0D,GAClC,IAAI0N,EAAM,EACV,IAAKtI,EAAI,EAAGA,EAAI8zD,EAAKl5D,SAAUoF,EAAG,CAChC,IAAIqnB,EAAMysC,EAAK9zD,GACf,GAAIwvD,EAAWnoC,EAAKhtB,YACdiO,EAAM+e,EAAIzsB,OAASF,EAAOE,QACvBJ,EAAOs1D,SAASzoC,KAAMA,EAAM7sB,EAAOC,KAAK4sB,IAC7CA,EAAItiB,KAAKrK,EAAQ4N,IAEjBjO,WAAWsB,UAAU+M,IAAInG,KACvB7H,EACA2sB,EACA/e,OAGC,KAAK9N,EAAOs1D,SAASzoC,GAC1B,MAAM,IAAI/sB,UAAU,+CAEpB+sB,EAAItiB,KAAKrK,EAAQ4N,EACnB,CACAA,GAAO+e,EAAIzsB,MACb,CACA,OAAOF,CACT,EAiDAF,EAAOsM,WAAaA,EA8EpBtM,EAAOmB,UAAUi4D,WAAY,EAQ7Bp5D,EAAOmB,UAAUo4D,OAAS,WACxB,MAAMvrD,EAAMf,KAAK7M,OACjB,GAAI4N,EAAM,IAAM,EACd,MAAM,IAAIlN,WAAW,6CAEvB,IAAK,IAAI0E,EAAI,EAAGA,EAAIwI,EAAKxI,GAAK,EAC5BgxD,EAAKvpD,KAAMzH,EAAGA,EAAI,GAEpB,OAAOyH,IACT,EAEAjN,EAAOmB,UAAUq4D,OAAS,WACxB,MAAMxrD,EAAMf,KAAK7M,OACjB,GAAI4N,EAAM,IAAM,EACd,MAAM,IAAIlN,WAAW,6CAEvB,IAAK,IAAI0E,EAAI,EAAGA,EAAIwI,EAAKxI,GAAK,EAC5BgxD,EAAKvpD,KAAMzH,EAAGA,EAAI,GAClBgxD,EAAKvpD,KAAMzH,EAAI,EAAGA,EAAI,GAExB,OAAOyH,IACT,EAEAjN,EAAOmB,UAAUs4D,OAAS,WACxB,MAAMzrD,EAAMf,KAAK7M,OACjB,GAAI4N,EAAM,IAAM,EACd,MAAM,IAAIlN,WAAW,6CAEvB,IAAK,IAAI0E,EAAI,EAAGA,EAAIwI,EAAKxI,GAAK,EAC5BgxD,EAAKvpD,KAAMzH,EAAGA,EAAI,GAClBgxD,EAAKvpD,KAAMzH,EAAI,EAAGA,EAAI,GACtBgxD,EAAKvpD,KAAMzH,EAAI,EAAGA,EAAI,GACtBgxD,EAAKvpD,KAAMzH,EAAI,EAAGA,EAAI,GAExB,OAAOyH,IACT,EAEAjN,EAAOmB,UAAUgJ,SAAW,WAC1B,MAAM/J,EAAS6M,KAAK7M,OACpB,OAAe,IAAXA,EAAqB,GACA,IAArB2B,UAAU3B,OAAqB+1D,EAAUlpD,KAAM,EAAG7M,GAC/C41D,EAAa2C,MAAM1rD,KAAMlL,UAClC,EAEA/B,EAAOmB,UAAUu4D,eAAiB15D,EAAOmB,UAAUgJ,SAEnDnK,EAAOmB,UAAU4U,OAAS,SAAiBnW,GACzC,IAAKI,EAAOs1D,SAAS11D,GAAI,MAAM,IAAIE,UAAU,6BAC7C,OAAImN,OAASrN,GACsB,IAA5BI,EAAOq5D,QAAQpsD,KAAMrN,EAC9B,EAEAI,EAAOmB,UAAUw4D,QAAU,WACzB,IAAI/sD,EAAM,GACV,MAAM8V,EAAM/X,EAAQ,GAGpB,OAFAiC,EAAMK,KAAK9C,SAAS,MAAO,EAAGuY,GAAKk3C,QAAQ,UAAW,OAAOC,OACzD5sD,KAAK7M,OAASsiB,IAAK9V,GAAO,SACvB,WAAaA,EAAM,GAC5B,EACIwnD,IACFp0D,EAAOmB,UAAUizD,GAAuBp0D,EAAOmB,UAAUw4D,SAG3D35D,EAAOmB,UAAUk4D,QAAU,SAAkBS,EAAQlwD,EAAOqsD,EAAK8D,EAAWC,GAI1E,GAHIhF,EAAW8E,EAAQj6D,cACrBi6D,EAAS95D,EAAOC,KAAK65D,EAAQA,EAAOj5D,OAAQi5D,EAAOxtD,cAEhDtM,EAAOs1D,SAASwE,GACnB,MAAM,IAAIh6D,UACR,wFAC2Bg6D,GAiB/B,QAbc93D,IAAV4H,IACFA,EAAQ,QAEE5H,IAARi0D,IACFA,EAAM6D,EAASA,EAAO15D,OAAS,QAEf4B,IAAd+3D,IACFA,EAAY,QAEE/3D,IAAZg4D,IACFA,EAAU/sD,KAAK7M,QAGbwJ,EAAQ,GAAKqsD,EAAM6D,EAAO15D,QAAU25D,EAAY,GAAKC,EAAU/sD,KAAK7M,OACtE,MAAM,IAAIU,WAAW,sBAGvB,GAAIi5D,GAAaC,GAAWpwD,GAASqsD,EACnC,OAAO,EAET,GAAI8D,GAAaC,EACf,OAAQ,EAEV,GAAIpwD,GAASqsD,EACX,OAAO,EAQT,GAAIhpD,OAAS6sD,EAAQ,OAAO,EAE5B,IAAItkD,GAJJwkD,KAAa,IADbD,KAAe,GAMXtkD,GAPJwgD,KAAS,IADTrsD,KAAW,GASX,MAAMoE,EAAM7L,KAAK6J,IAAIwJ,EAAGC,GAElBwkD,EAAWhtD,KAAKjD,MAAM+vD,EAAWC,GACjCE,EAAaJ,EAAO9vD,MAAMJ,EAAOqsD,GAEvC,IAAK,IAAIzwD,EAAI,EAAGA,EAAIwI,IAAOxI,EACzB,GAAIy0D,EAASz0D,KAAO00D,EAAW10D,GAAI,CACjCgQ,EAAIykD,EAASz0D,GACbiQ,EAAIykD,EAAW10D,GACf,KACF,CAGF,OAAIgQ,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,CACT,EA2HAxV,EAAOmB,UAAUgK,SAAW,SAAmBma,EAAKnlB,EAAY8jD,GAC9D,OAAoD,IAA7Ch3C,KAAKi6B,QAAQ5hB,EAAKnlB,EAAY8jD,EACvC,EAEAjkD,EAAOmB,UAAU+lC,QAAU,SAAkB5hB,EAAKnlB,EAAY8jD,GAC5D,OAAOwS,EAAqBxpD,KAAMqY,EAAKnlB,EAAY8jD,GAAU,EAC/D,EAEAjkD,EAAOmB,UAAUy1D,YAAc,SAAsBtxC,EAAKnlB,EAAY8jD,GACpE,OAAOwS,EAAqBxpD,KAAMqY,EAAKnlB,EAAY8jD,GAAU,EAC/D,EA4CAjkD,EAAOmB,UAAU+I,MAAQ,SAAgBwf,EAAQ7oB,EAAQT,EAAQ6jD,GAE/D,QAAejiD,IAAXnB,EACFojD,EAAW,OACX7jD,EAAS6M,KAAK7M,OACdS,EAAS,OAEJ,QAAemB,IAAX5B,GAA0C,kBAAXS,EACxCojD,EAAWpjD,EACXT,EAAS6M,KAAK7M,OACdS,EAAS,MAEJ,KAAIuuC,SAASvuC,GAUlB,MAAM,IAAIe,MACR,2EAVFf,KAAoB,EAChBuuC,SAAShvC,IACXA,KAAoB,OACH4B,IAAbiiD,IAAwBA,EAAW,UAEvCA,EAAW7jD,EACXA,OAAS4B,EAMb,CAEA,MAAMq1D,EAAYpqD,KAAK7M,OAASS,EAGhC,SAFemB,IAAX5B,GAAwBA,EAASi3D,KAAWj3D,EAASi3D,GAEpD3tC,EAAOtpB,OAAS,IAAMA,EAAS,GAAKS,EAAS,IAAOA,EAASoM,KAAK7M,OACrE,MAAM,IAAIU,WAAW,0CAGlBmjD,IAAUA,EAAW,QAE1B,IAAI4R,GAAc,EAClB,OACE,OAAQ5R,GACN,IAAK,MACH,OAAOmT,EAASnqD,KAAMyc,EAAQ7oB,EAAQT,GAExC,IAAK,OACL,IAAK,QACH,OAAOm3D,EAAUtqD,KAAMyc,EAAQ7oB,EAAQT,GAEzC,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOq3D,EAAWxqD,KAAMyc,EAAQ7oB,EAAQT,GAE1C,IAAK,SAEH,OAAOu3D,EAAY1qD,KAAMyc,EAAQ7oB,EAAQT,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOw3D,EAAU3qD,KAAMyc,EAAQ7oB,EAAQT,GAEzC,QACE,GAAIy1D,EAAa,MAAM,IAAI/1D,UAAU,qBAAuBmkD,GAC5DA,GAAY,GAAKA,GAAU8R,cAC3BF,GAAc,EAGtB,EAEA71D,EAAOmB,UAAUw4B,OAAS,WACxB,MAAO,CACL1S,KAAM,SACNta,KAAM3G,MAAM7E,UAAU6I,MAAMjC,KAAKkF,KAAKktD,MAAQltD,KAAM,GAExD,EAyFA,MAAMwrD,EAAuB,KAoB7B,SAASrC,EAAYvpC,EAAKjjB,EAAOqsD,GAC/B,IAAImE,EAAM,GACVnE,EAAM9zD,KAAK6J,IAAI6gB,EAAIzsB,OAAQ61D,GAE3B,IAAK,IAAIzwD,EAAIoE,EAAOpE,EAAIywD,IAAOzwD,EAC7B40D,GAAO/vD,OAAOquD,aAAsB,IAAT7rC,EAAIrnB,IAEjC,OAAO40D,CACT,CAEA,SAAS/D,EAAaxpC,EAAKjjB,EAAOqsD,GAChC,IAAImE,EAAM,GACVnE,EAAM9zD,KAAK6J,IAAI6gB,EAAIzsB,OAAQ61D,GAE3B,IAAK,IAAIzwD,EAAIoE,EAAOpE,EAAIywD,IAAOzwD,EAC7B40D,GAAO/vD,OAAOquD,aAAa7rC,EAAIrnB,IAEjC,OAAO40D,CACT,CAEA,SAASlE,EAAUrpC,EAAKjjB,EAAOqsD,GAC7B,MAAMjoD,EAAM6e,EAAIzsB,SAEXwJ,GAASA,EAAQ,KAAGA,EAAQ,KAC5BqsD,GAAOA,EAAM,GAAKA,EAAMjoD,KAAKioD,EAAMjoD,GAExC,IAAIjC,EAAM,GACV,IAAK,IAAIvG,EAAIoE,EAAOpE,EAAIywD,IAAOzwD,EAC7BuG,GAAOsuD,EAAoBxtC,EAAIrnB,IAEjC,OAAOuG,CACT,CAEA,SAASwqD,EAAc1pC,EAAKjjB,EAAOqsD,GACjC,MAAMlrD,EAAQ8hB,EAAI7iB,MAAMJ,EAAOqsD,GAC/B,IAAI3mD,EAAM,GAEV,IAAK,IAAI9J,EAAI,EAAGA,EAAIuF,EAAM3K,OAAS,EAAGoF,GAAK,EACzC8J,GAAOjF,OAAOquD,aAAa3tD,EAAMvF,GAAqB,IAAfuF,EAAMvF,EAAI,IAEnD,OAAO8J,CACT,CAiCA,SAASgrD,EAAaz5D,EAAQ05D,EAAKn6D,GACjC,GAAKS,EAAS,IAAO,GAAKA,EAAS,EAAG,MAAM,IAAIC,WAAW,sBAC3D,GAAID,EAAS05D,EAAMn6D,EAAQ,MAAM,IAAIU,WAAW,wCAClD,CAyQA,SAAS05D,EAAU3tC,EAAKhkB,EAAOhI,EAAQ05D,EAAK73C,EAAK1W,GAC/C,IAAKhM,EAAOs1D,SAASzoC,GAAM,MAAM,IAAI/sB,UAAU,+CAC/C,GAAI+I,EAAQ6Z,GAAO7Z,EAAQmD,EAAK,MAAM,IAAIlL,WAAW,qCACrD,GAAID,EAAS05D,EAAM1tC,EAAIzsB,OAAQ,MAAM,IAAIU,WAAW,qBACtD,CA+FA,SAAS25D,EAAgB5tC,EAAKhkB,EAAOhI,EAAQmL,EAAK0W,GAChDg4C,EAAW7xD,EAAOmD,EAAK0W,EAAKmK,EAAKhsB,EAAQ,GAEzC,IAAIY,EAAKhB,OAAOoI,EAAQ8F,OAAO,aAC/Bke,EAAIhsB,KAAYY,EAChBA,IAAW,EACXorB,EAAIhsB,KAAYY,EAChBA,IAAW,EACXorB,EAAIhsB,KAAYY,EAChBA,IAAW,EACXorB,EAAIhsB,KAAYY,EAChB,IAAIq2D,EAAKr3D,OAAOoI,GAAS8F,OAAO,IAAMA,OAAO,aAQ7C,OAPAke,EAAIhsB,KAAYi3D,EAChBA,IAAW,EACXjrC,EAAIhsB,KAAYi3D,EAChBA,IAAW,EACXjrC,EAAIhsB,KAAYi3D,EAChBA,IAAW,EACXjrC,EAAIhsB,KAAYi3D,EACTj3D,CACT,CAEA,SAAS85D,EAAgB9tC,EAAKhkB,EAAOhI,EAAQmL,EAAK0W,GAChDg4C,EAAW7xD,EAAOmD,EAAK0W,EAAKmK,EAAKhsB,EAAQ,GAEzC,IAAIY,EAAKhB,OAAOoI,EAAQ8F,OAAO,aAC/Bke,EAAIhsB,EAAS,GAAKY,EAClBA,IAAW,EACXorB,EAAIhsB,EAAS,GAAKY,EAClBA,IAAW,EACXorB,EAAIhsB,EAAS,GAAKY,EAClBA,IAAW,EACXorB,EAAIhsB,EAAS,GAAKY,EAClB,IAAIq2D,EAAKr3D,OAAOoI,GAAS8F,OAAO,IAAMA,OAAO,aAQ7C,OAPAke,EAAIhsB,EAAS,GAAKi3D,EAClBA,IAAW,EACXjrC,EAAIhsB,EAAS,GAAKi3D,EAClBA,IAAW,EACXjrC,EAAIhsB,EAAS,GAAKi3D,EAClBA,IAAW,EACXjrC,EAAIhsB,GAAUi3D,EACPj3D,EAAS,CAClB,CAkHA,SAAS+5D,EAAc/tC,EAAKhkB,EAAOhI,EAAQ05D,EAAK73C,EAAK1W,GACnD,GAAInL,EAAS05D,EAAM1tC,EAAIzsB,OAAQ,MAAM,IAAIU,WAAW,sBACpD,GAAID,EAAS,EAAG,MAAM,IAAIC,WAAW,qBACvC,CAEA,SAAS+5D,EAAYhuC,EAAKhkB,EAAOhI,EAAQi6D,EAAcC,GAOrD,OANAlyD,GAASA,EACThI,KAAoB,EACfk6D,GACHH,EAAa/tC,EAAKhkB,EAAOhI,EAAQ,GAEnCszD,EAAQjqD,MAAM2iB,EAAKhkB,EAAOhI,EAAQi6D,EAAc,GAAI,GAC7Cj6D,EAAS,CAClB,CAUA,SAASm6D,EAAanuC,EAAKhkB,EAAOhI,EAAQi6D,EAAcC,GAOtD,OANAlyD,GAASA,EACThI,KAAoB,EACfk6D,GACHH,EAAa/tC,EAAKhkB,EAAOhI,EAAQ,GAEnCszD,EAAQjqD,MAAM2iB,EAAKhkB,EAAOhI,EAAQi6D,EAAc,GAAI,GAC7Cj6D,EAAS,CAClB,CAzkBAb,EAAOmB,UAAU6I,MAAQ,SAAgBJ,EAAOqsD,GAC9C,MAAMjoD,EAAMf,KAAK7M,QACjBwJ,IAAUA,GAGE,GACVA,GAASoE,GACG,IAAGpE,EAAQ,GACdA,EAAQoE,IACjBpE,EAAQoE,IANVioD,OAAcj0D,IAARi0D,EAAoBjoD,IAAQioD,GASxB,GACRA,GAAOjoD,GACG,IAAGioD,EAAM,GACVA,EAAMjoD,IACfioD,EAAMjoD,GAGJioD,EAAMrsD,IAAOqsD,EAAMrsD,GAEvB,MAAMqxD,EAAShuD,KAAKkB,SAASvE,EAAOqsD,GAIpC,OAFAh1D,OAAOszD,eAAe0G,EAAQj7D,EAAOmB,WAE9B85D,CACT,EAUAj7D,EAAOmB,UAAU+5D,WACjBl7D,EAAOmB,UAAUwB,WAAa,SAAqB9B,EAAQyL,EAAYyuD,GACrEl6D,KAAoB,EACpByL,KAA4B,EACvByuD,GAAUT,EAAYz5D,EAAQyL,EAAYW,KAAK7M,QAEpD,IAAIklB,EAAMrY,KAAKpM,GACXs6D,EAAM,EACN31D,EAAI,EACR,OAASA,EAAI8G,IAAe6uD,GAAO,MACjC71C,GAAOrY,KAAKpM,EAAS2E,GAAK21D,EAG5B,OAAO71C,CACT,EAEAtlB,EAAOmB,UAAUi6D,WACjBp7D,EAAOmB,UAAU0B,WAAa,SAAqBhC,EAAQyL,EAAYyuD,GACrEl6D,KAAoB,EACpByL,KAA4B,EACvByuD,GACHT,EAAYz5D,EAAQyL,EAAYW,KAAK7M,QAGvC,IAAIklB,EAAMrY,KAAKpM,IAAWyL,GACtB6uD,EAAM,EACV,KAAO7uD,EAAa,IAAM6uD,GAAO,MAC/B71C,GAAOrY,KAAKpM,IAAWyL,GAAc6uD,EAGvC,OAAO71C,CACT,EAEAtlB,EAAOmB,UAAUk6D,UACjBr7D,EAAOmB,UAAUm6D,UAAY,SAAoBz6D,EAAQk6D,GAGvD,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACpC6M,KAAKpM,EACd,EAEAb,EAAOmB,UAAUo6D,aACjBv7D,EAAOmB,UAAUq6D,aAAe,SAAuB36D,EAAQk6D,GAG7D,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACpC6M,KAAKpM,GAAWoM,KAAKpM,EAAS,IAAM,CAC7C,EAEAb,EAAOmB,UAAUs6D,aACjBz7D,EAAOmB,UAAU81D,aAAe,SAAuBp2D,EAAQk6D,GAG7D,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACnC6M,KAAKpM,IAAW,EAAKoM,KAAKpM,EAAS,EAC7C,EAEAb,EAAOmB,UAAUu6D,aACjB17D,EAAOmB,UAAUyC,aAAe,SAAuB/C,EAAQk6D,GAI7D,OAHAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,SAElC6M,KAAKpM,GACToM,KAAKpM,EAAS,IAAM,EACpBoM,KAAKpM,EAAS,IAAM,IACD,SAAnBoM,KAAKpM,EAAS,EACrB,EAEAb,EAAOmB,UAAUw6D,aACjB37D,EAAOmB,UAAU6C,aAAe,SAAuBnD,EAAQk6D,GAI7D,OAHAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QAEpB,SAAf6M,KAAKpM,IACToM,KAAKpM,EAAS,IAAM,GACrBoM,KAAKpM,EAAS,IAAM,EACrBoM,KAAKpM,EAAS,GAClB,EAEAb,EAAOmB,UAAUy6D,gBAAkBC,GAAmB,SAA0Bh7D,GAE9Ei7D,EADAj7D,KAAoB,EACG,UACvB,MAAMmpB,EAAQ/c,KAAKpM,GACbk7D,EAAO9uD,KAAKpM,EAAS,QACbmB,IAAVgoB,QAAgChoB,IAAT+5D,GACzBC,EAAYn7D,EAAQoM,KAAK7M,OAAS,GAGpC,MAAMqB,EAAKuoB,EACQ,IAAjB/c,OAAOpM,GACU,MAAjBoM,OAAOpM,GACPoM,OAAOpM,GAAU,GAAK,GAElBi3D,EAAK7qD,OAAOpM,GACC,IAAjBoM,OAAOpM,GACU,MAAjBoM,OAAOpM,GACPk7D,EAAO,GAAK,GAEd,OAAOptD,OAAOlN,IAAOkN,OAAOmpD,IAAOnpD,OAAO,IAC5C,IAEA3O,EAAOmB,UAAU86D,gBAAkBJ,GAAmB,SAA0Bh7D,GAE9Ei7D,EADAj7D,KAAoB,EACG,UACvB,MAAMmpB,EAAQ/c,KAAKpM,GACbk7D,EAAO9uD,KAAKpM,EAAS,QACbmB,IAAVgoB,QAAgChoB,IAAT+5D,GACzBC,EAAYn7D,EAAQoM,KAAK7M,OAAS,GAGpC,MAAM03D,EAAK9tC,EAAQ,GAAK,GACL,MAAjB/c,OAAOpM,GACU,IAAjBoM,OAAOpM,GACPoM,OAAOpM,GAEHY,EAAKwL,OAAOpM,GAAU,GAAK,GACd,MAAjBoM,OAAOpM,GACU,IAAjBoM,OAAOpM,GACPk7D,EAEF,OAAQptD,OAAOmpD,IAAOnpD,OAAO,KAAOA,OAAOlN,EAC7C,IAEAzB,EAAOmB,UAAU6B,UAAY,SAAoBnC,EAAQyL,EAAYyuD,GACnEl6D,KAAoB,EACpByL,KAA4B,EACvByuD,GAAUT,EAAYz5D,EAAQyL,EAAYW,KAAK7M,QAEpD,IAAIklB,EAAMrY,KAAKpM,GACXs6D,EAAM,EACN31D,EAAI,EACR,OAASA,EAAI8G,IAAe6uD,GAAO,MACjC71C,GAAOrY,KAAKpM,EAAS2E,GAAK21D,EAM5B,OAJAA,GAAO,IAEH71C,GAAO61C,IAAK71C,GAAOnjB,KAAKmB,IAAI,EAAG,EAAIgJ,IAEhCgZ,CACT,EAEAtlB,EAAOmB,UAAUgC,UAAY,SAAoBtC,EAAQyL,EAAYyuD,GACnEl6D,KAAoB,EACpByL,KAA4B,EACvByuD,GAAUT,EAAYz5D,EAAQyL,EAAYW,KAAK7M,QAEpD,IAAIoF,EAAI8G,EACJ6uD,EAAM,EACN71C,EAAMrY,KAAKpM,IAAW2E,GAC1B,KAAOA,EAAI,IAAM21D,GAAO,MACtB71C,GAAOrY,KAAKpM,IAAW2E,GAAK21D,EAM9B,OAJAA,GAAO,IAEH71C,GAAO61C,IAAK71C,GAAOnjB,KAAKmB,IAAI,EAAG,EAAIgJ,IAEhCgZ,CACT,EAEAtlB,EAAOmB,UAAU+6D,SAAW,SAAmBr7D,EAAQk6D,GAGrD,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACtB,IAAf6M,KAAKpM,IAC0B,GAA5B,IAAOoM,KAAKpM,GAAU,GADKoM,KAAKpM,EAE3C,EAEAb,EAAOmB,UAAUg7D,YAAc,SAAsBt7D,EAAQk6D,GAC3Dl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QAC3C,MAAMklB,EAAMrY,KAAKpM,GAAWoM,KAAKpM,EAAS,IAAM,EAChD,OAAc,MAANykB,EAAsB,WAANA,EAAmBA,CAC7C,EAEAtlB,EAAOmB,UAAUi7D,YAAc,SAAsBv7D,EAAQk6D,GAC3Dl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QAC3C,MAAMklB,EAAMrY,KAAKpM,EAAS,GAAMoM,KAAKpM,IAAW,EAChD,OAAc,MAANykB,EAAsB,WAANA,EAAmBA,CAC7C,EAEAtlB,EAAOmB,UAAUgD,YAAc,SAAsBtD,EAAQk6D,GAI3D,OAHAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QAEnC6M,KAAKpM,GACVoM,KAAKpM,EAAS,IAAM,EACpBoM,KAAKpM,EAAS,IAAM,GACpBoM,KAAKpM,EAAS,IAAM,EACzB,EAEAb,EAAOmB,UAAUmD,YAAc,SAAsBzD,EAAQk6D,GAI3D,OAHAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QAEnC6M,KAAKpM,IAAW,GACrBoM,KAAKpM,EAAS,IAAM,GACpBoM,KAAKpM,EAAS,IAAM,EACpBoM,KAAKpM,EAAS,EACnB,EAEAb,EAAOmB,UAAUk7D,eAAiBR,GAAmB,SAAyBh7D,GAE5Ei7D,EADAj7D,KAAoB,EACG,UACvB,MAAMmpB,EAAQ/c,KAAKpM,GACbk7D,EAAO9uD,KAAKpM,EAAS,QACbmB,IAAVgoB,QAAgChoB,IAAT+5D,GACzBC,EAAYn7D,EAAQoM,KAAK7M,OAAS,GAGpC,MAAMklB,EAAMrY,KAAKpM,EAAS,GACL,IAAnBoM,KAAKpM,EAAS,GACK,MAAnBoM,KAAKpM,EAAS,IACbk7D,GAAQ,IAEX,OAAQptD,OAAO2W,IAAQ3W,OAAO,KAC5BA,OAAOqb,EACU,IAAjB/c,OAAOpM,GACU,MAAjBoM,OAAOpM,GACPoM,OAAOpM,GAAU,GAAK,GAC1B,IAEAb,EAAOmB,UAAUm7D,eAAiBT,GAAmB,SAAyBh7D,GAE5Ei7D,EADAj7D,KAAoB,EACG,UACvB,MAAMmpB,EAAQ/c,KAAKpM,GACbk7D,EAAO9uD,KAAKpM,EAAS,QACbmB,IAAVgoB,QAAgChoB,IAAT+5D,GACzBC,EAAYn7D,EAAQoM,KAAK7M,OAAS,GAGpC,MAAMklB,GAAO0E,GAAS,IACH,MAAjB/c,OAAOpM,GACU,IAAjBoM,OAAOpM,GACPoM,OAAOpM,GAET,OAAQ8N,OAAO2W,IAAQ3W,OAAO,KAC5BA,OAAO1B,OAAOpM,GAAU,GAAK,GACZ,MAAjBoM,OAAOpM,GACU,IAAjBoM,OAAOpM,GACPk7D,EACJ,IAEA/7D,EAAOmB,UAAUsD,YAAc,SAAsB5D,EAAQk6D,GAG3D,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACpC+zD,EAAQ6C,KAAK/pD,KAAMpM,GAAQ,EAAM,GAAI,EAC9C,EAEAb,EAAOmB,UAAUyD,YAAc,SAAsB/D,EAAQk6D,GAG3D,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACpC+zD,EAAQ6C,KAAK/pD,KAAMpM,GAAQ,EAAO,GAAI,EAC/C,EAEAb,EAAOmB,UAAU4D,aAAe,SAAuBlE,EAAQk6D,GAG7D,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACpC+zD,EAAQ6C,KAAK/pD,KAAMpM,GAAQ,EAAM,GAAI,EAC9C,EAEAb,EAAOmB,UAAU+D,aAAe,SAAuBrE,EAAQk6D,GAG7D,OAFAl6D,KAAoB,EACfk6D,GAAUT,EAAYz5D,EAAQ,EAAGoM,KAAK7M,QACpC+zD,EAAQ6C,KAAK/pD,KAAMpM,GAAQ,EAAO,GAAI,EAC/C,EAQAb,EAAOmB,UAAUo7D,YACjBv8D,EAAOmB,UAAUyB,YAAc,SAAsBiG,EAAOhI,EAAQyL,EAAYyuD,GAI9E,GAHAlyD,GAASA,EACThI,KAAoB,EACpByL,KAA4B,GACvByuD,EAAU,CAEbP,EAASvtD,KAAMpE,EAAOhI,EAAQyL,EADbnK,KAAKmB,IAAI,EAAG,EAAIgJ,GAAc,EACK,EACtD,CAEA,IAAI6uD,EAAM,EACN31D,EAAI,EAER,IADAyH,KAAKpM,GAAkB,IAARgI,IACNrD,EAAI8G,IAAe6uD,GAAO,MACjCluD,KAAKpM,EAAS2E,GAAMqD,EAAQsyD,EAAO,IAGrC,OAAOt6D,EAASyL,CAClB,EAEAtM,EAAOmB,UAAUq7D,YACjBx8D,EAAOmB,UAAU2B,YAAc,SAAsB+F,EAAOhI,EAAQyL,EAAYyuD,GAI9E,GAHAlyD,GAASA,EACThI,KAAoB,EACpByL,KAA4B,GACvByuD,EAAU,CAEbP,EAASvtD,KAAMpE,EAAOhI,EAAQyL,EADbnK,KAAKmB,IAAI,EAAG,EAAIgJ,GAAc,EACK,EACtD,CAEA,IAAI9G,EAAI8G,EAAa,EACjB6uD,EAAM,EAEV,IADAluD,KAAKpM,EAAS2E,GAAa,IAARqD,IACVrD,GAAK,IAAM21D,GAAO,MACzBluD,KAAKpM,EAAS2E,GAAMqD,EAAQsyD,EAAO,IAGrC,OAAOt6D,EAASyL,CAClB,EAEAtM,EAAOmB,UAAUs7D,WACjBz8D,EAAOmB,UAAUu7D,WAAa,SAAqB7zD,EAAOhI,EAAQk6D,GAKhE,OAJAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,IAAM,GACtDoM,KAAKpM,GAAmB,IAARgI,EACThI,EAAS,CAClB,EAEAb,EAAOmB,UAAUw7D,cACjB38D,EAAOmB,UAAUy7D,cAAgB,SAAwB/zD,EAAOhI,EAAQk6D,GAMtE,OALAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,MAAQ,GACxDoM,KAAKpM,GAAmB,IAARgI,EAChBoE,KAAKpM,EAAS,GAAMgI,IAAU,EACvBhI,EAAS,CAClB,EAEAb,EAAOmB,UAAU07D,cACjB78D,EAAOmB,UAAU27D,cAAgB,SAAwBj0D,EAAOhI,EAAQk6D,GAMtE,OALAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,MAAQ,GACxDoM,KAAKpM,GAAWgI,IAAU,EAC1BoE,KAAKpM,EAAS,GAAc,IAARgI,EACbhI,EAAS,CAClB,EAEAb,EAAOmB,UAAU47D,cACjB/8D,EAAOmB,UAAU2C,cAAgB,SAAwB+E,EAAOhI,EAAQk6D,GAQtE,OAPAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,WAAY,GAC5DoM,KAAKpM,EAAS,GAAMgI,IAAU,GAC9BoE,KAAKpM,EAAS,GAAMgI,IAAU,GAC9BoE,KAAKpM,EAAS,GAAMgI,IAAU,EAC9BoE,KAAKpM,GAAmB,IAARgI,EACThI,EAAS,CAClB,EAEAb,EAAOmB,UAAU67D,cACjBh9D,EAAOmB,UAAU8C,cAAgB,SAAwB4E,EAAOhI,EAAQk6D,GAQtE,OAPAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,WAAY,GAC5DoM,KAAKpM,GAAWgI,IAAU,GAC1BoE,KAAKpM,EAAS,GAAMgI,IAAU,GAC9BoE,KAAKpM,EAAS,GAAMgI,IAAU,EAC9BoE,KAAKpM,EAAS,GAAc,IAARgI,EACbhI,EAAS,CAClB,EA8CAb,EAAOmB,UAAU87D,iBAAmBpB,GAAmB,SAA2BhzD,GAChF,OAAO4xD,EAAextD,KAAMpE,EADiE9G,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACrD4M,OAAO,GAAIA,OAAO,sBAC/D,IAEA3O,EAAOmB,UAAU+7D,iBAAmBrB,GAAmB,SAA2BhzD,GAChF,OAAO8xD,EAAe1tD,KAAMpE,EADiE9G,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACrD4M,OAAO,GAAIA,OAAO,sBAC/D,IAEA3O,EAAOmB,UAAU8B,WAAa,SAAqB4F,EAAOhI,EAAQyL,EAAYyuD,GAG5E,GAFAlyD,GAASA,EACThI,KAAoB,GACfk6D,EAAU,CACb,MAAMtT,EAAQtlD,KAAKmB,IAAI,EAAI,EAAIgJ,EAAc,GAE7CkuD,EAASvtD,KAAMpE,EAAOhI,EAAQyL,EAAYm7C,EAAQ,GAAIA,EACxD,CAEA,IAAIjiD,EAAI,EACJ21D,EAAM,EACNgC,EAAM,EAEV,IADAlwD,KAAKpM,GAAkB,IAARgI,IACNrD,EAAI8G,IAAe6uD,GAAO,MAC7BtyD,EAAQ,GAAa,IAARs0D,GAAsC,IAAzBlwD,KAAKpM,EAAS2E,EAAI,KAC9C23D,EAAM,GAERlwD,KAAKpM,EAAS2E,IAAOqD,EAAQsyD,GAAQ,GAAKgC,EAAM,IAGlD,OAAOt8D,EAASyL,CAClB,EAEAtM,EAAOmB,UAAUiC,WAAa,SAAqByF,EAAOhI,EAAQyL,EAAYyuD,GAG5E,GAFAlyD,GAASA,EACThI,KAAoB,GACfk6D,EAAU,CACb,MAAMtT,EAAQtlD,KAAKmB,IAAI,EAAI,EAAIgJ,EAAc,GAE7CkuD,EAASvtD,KAAMpE,EAAOhI,EAAQyL,EAAYm7C,EAAQ,GAAIA,EACxD,CAEA,IAAIjiD,EAAI8G,EAAa,EACjB6uD,EAAM,EACNgC,EAAM,EAEV,IADAlwD,KAAKpM,EAAS2E,GAAa,IAARqD,IACVrD,GAAK,IAAM21D,GAAO,MACrBtyD,EAAQ,GAAa,IAARs0D,GAAsC,IAAzBlwD,KAAKpM,EAAS2E,EAAI,KAC9C23D,EAAM,GAERlwD,KAAKpM,EAAS2E,IAAOqD,EAAQsyD,GAAQ,GAAKgC,EAAM,IAGlD,OAAOt8D,EAASyL,CAClB,EAEAtM,EAAOmB,UAAUi8D,UAAY,SAAoBv0D,EAAOhI,EAAQk6D,GAM9D,OALAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,KAAO,KACnDgI,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtCoE,KAAKpM,GAAmB,IAARgI,EACThI,EAAS,CAClB,EAEAb,EAAOmB,UAAUk8D,aAAe,SAAuBx0D,EAAOhI,EAAQk6D,GAMpE,OALAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,OAAS,OACzDoM,KAAKpM,GAAmB,IAARgI,EAChBoE,KAAKpM,EAAS,GAAMgI,IAAU,EACvBhI,EAAS,CAClB,EAEAb,EAAOmB,UAAUm8D,aAAe,SAAuBz0D,EAAOhI,EAAQk6D,GAMpE,OALAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,OAAS,OACzDoM,KAAKpM,GAAWgI,IAAU,EAC1BoE,KAAKpM,EAAS,GAAc,IAARgI,EACbhI,EAAS,CAClB,EAEAb,EAAOmB,UAAUiD,aAAe,SAAuByE,EAAOhI,EAAQk6D,GAQpE,OAPAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,YAAa,YAC7DoM,KAAKpM,GAAmB,IAARgI,EAChBoE,KAAKpM,EAAS,GAAMgI,IAAU,EAC9BoE,KAAKpM,EAAS,GAAMgI,IAAU,GAC9BoE,KAAKpM,EAAS,GAAMgI,IAAU,GACvBhI,EAAS,CAClB,EAEAb,EAAOmB,UAAUoD,aAAe,SAAuBsE,EAAOhI,EAAQk6D,GASpE,OARAlyD,GAASA,EACThI,KAAoB,EACfk6D,GAAUP,EAASvtD,KAAMpE,EAAOhI,EAAQ,EAAG,YAAa,YACzDgI,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAC5CoE,KAAKpM,GAAWgI,IAAU,GAC1BoE,KAAKpM,EAAS,GAAMgI,IAAU,GAC9BoE,KAAKpM,EAAS,GAAMgI,IAAU,EAC9BoE,KAAKpM,EAAS,GAAc,IAARgI,EACbhI,EAAS,CAClB,EAEAb,EAAOmB,UAAUo8D,gBAAkB1B,GAAmB,SAA0BhzD,GAC9E,OAAO4xD,EAAextD,KAAMpE,EAD+D9G,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAClD4M,OAAO,sBAAuBA,OAAO,sBACnF,IAEA3O,EAAOmB,UAAUq8D,gBAAkB3B,GAAmB,SAA0BhzD,GAC9E,OAAO8xD,EAAe1tD,KAAMpE,EAD+D9G,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAClD4M,OAAO,sBAAuBA,OAAO,sBACnF,IAiBA3O,EAAOmB,UAAUuD,aAAe,SAAuBmE,EAAOhI,EAAQk6D,GACpE,OAAOF,EAAW5tD,KAAMpE,EAAOhI,GAAQ,EAAMk6D,EAC/C,EAEA/6D,EAAOmB,UAAU0D,aAAe,SAAuBgE,EAAOhI,EAAQk6D,GACpE,OAAOF,EAAW5tD,KAAMpE,EAAOhI,GAAQ,EAAOk6D,EAChD,EAYA/6D,EAAOmB,UAAU6D,cAAgB,SAAwB6D,EAAOhI,EAAQk6D,GACtE,OAAOC,EAAY/tD,KAAMpE,EAAOhI,GAAQ,EAAMk6D,EAChD,EAEA/6D,EAAOmB,UAAUgE,cAAgB,SAAwB0D,EAAOhI,EAAQk6D,GACtE,OAAOC,EAAY/tD,KAAMpE,EAAOhI,GAAQ,EAAOk6D,EACjD,EAGA/6D,EAAOmB,UAAUoJ,KAAO,SAAeuvD,EAAQ2D,EAAa7zD,EAAOqsD,GACjE,IAAKj2D,EAAOs1D,SAASwE,GAAS,MAAM,IAAIh6D,UAAU,+BAQlD,GAPK8J,IAAOA,EAAQ,GACfqsD,GAAe,IAARA,IAAWA,EAAMhpD,KAAK7M,QAC9Bq9D,GAAe3D,EAAO15D,SAAQq9D,EAAc3D,EAAO15D,QAClDq9D,IAAaA,EAAc,GAC5BxH,EAAM,GAAKA,EAAMrsD,IAAOqsD,EAAMrsD,GAG9BqsD,IAAQrsD,EAAO,OAAO,EAC1B,GAAsB,IAAlBkwD,EAAO15D,QAAgC,IAAhB6M,KAAK7M,OAAc,OAAO,EAGrD,GAAIq9D,EAAc,EAChB,MAAM,IAAI38D,WAAW,6BAEvB,GAAI8I,EAAQ,GAAKA,GAASqD,KAAK7M,OAAQ,MAAM,IAAIU,WAAW,sBAC5D,GAAIm1D,EAAM,EAAG,MAAM,IAAIn1D,WAAW,2BAG9Bm1D,EAAMhpD,KAAK7M,SAAQ61D,EAAMhpD,KAAK7M,QAC9B05D,EAAO15D,OAASq9D,EAAcxH,EAAMrsD,IACtCqsD,EAAM6D,EAAO15D,OAASq9D,EAAc7zD,GAGtC,MAAMoE,EAAMioD,EAAMrsD,EAalB,OAXIqD,OAAS6sD,GAAqD,oBAApCj6D,WAAWsB,UAAUu8D,WAEjDzwD,KAAKywD,WAAWD,EAAa7zD,EAAOqsD,GAEpCp2D,WAAWsB,UAAU+M,IAAInG,KACvB+xD,EACA7sD,KAAKkB,SAASvE,EAAOqsD,GACrBwH,GAIGzvD,CACT,EAMAhO,EAAOmB,UAAUqN,KAAO,SAAe8W,EAAK1b,EAAOqsD,EAAKhS,GAEtD,GAAmB,kBAAR3+B,EAAkB,CAS3B,GARqB,kBAAV1b,GACTq6C,EAAWr6C,EACXA,EAAQ,EACRqsD,EAAMhpD,KAAK7M,QACa,kBAAR61D,IAChBhS,EAAWgS,EACXA,EAAMhpD,KAAK7M,aAEI4B,IAAbiiD,GAA8C,kBAAbA,EACnC,MAAM,IAAInkD,UAAU,6BAEtB,GAAwB,kBAAbmkD,IAA0BjkD,EAAO00D,WAAWzQ,GACrD,MAAM,IAAInkD,UAAU,qBAAuBmkD,GAE7C,GAAmB,IAAf3+B,EAAIllB,OAAc,CACpB,MAAMuwC,EAAOrrB,EAAIuS,WAAW,IACV,SAAbosB,GAAuBtT,EAAO,KAClB,WAAbsT,KAEF3+B,EAAMqrB,EAEV,CACF,KAA0B,kBAARrrB,EAChBA,GAAY,IACY,mBAARA,IAChBA,EAAM7kB,OAAO6kB,IAIf,GAAI1b,EAAQ,GAAKqD,KAAK7M,OAASwJ,GAASqD,KAAK7M,OAAS61D,EACpD,MAAM,IAAIn1D,WAAW,sBAGvB,GAAIm1D,GAAOrsD,EACT,OAAOqD,KAQT,IAAIzH,EACJ,GANAoE,KAAkB,EAClBqsD,OAAcj0D,IAARi0D,EAAoBhpD,KAAK7M,OAAS61D,IAAQ,EAE3C3wC,IAAKA,EAAM,GAGG,kBAARA,EACT,IAAK9f,EAAIoE,EAAOpE,EAAIywD,IAAOzwD,EACzByH,KAAKzH,GAAK8f,MAEP,CACL,MAAMva,EAAQ/K,EAAOs1D,SAAShwC,GAC1BA,EACAtlB,EAAOC,KAAKqlB,EAAK2+B,GACfj2C,EAAMjD,EAAM3K,OAClB,GAAY,IAAR4N,EACF,MAAM,IAAIlO,UAAU,cAAgBwlB,EAClC,qCAEJ,IAAK9f,EAAI,EAAGA,EAAIywD,EAAMrsD,IAASpE,EAC7ByH,KAAKzH,EAAIoE,GAASmB,EAAMvF,EAAIwI,EAEhC,CAEA,OAAOf,IACT,EAMA,MAAM0wD,EAAS,CAAC,EAChB,SAAS3lD,EAAG4lD,EAAKC,EAAYC,GAC3BH,EAAOC,GAAO,cAAwBE,EACpCx9D,cACEuN,QAEA5M,OAAO65B,eAAe7tB,KAAM,UAAW,CACrCpE,MAAOg1D,EAAWlF,MAAM1rD,KAAMlL,WAC9Bw5B,UAAU,EACVlW,cAAc,IAIhBpY,KAAKzL,KAAQ,GAAEyL,KAAKzL,SAASo8D,KAG7B3wD,KAAK8wD,aAEE9wD,KAAKzL,IACd,CAEImvC,WACF,OAAOitB,CACT,CAEIjtB,SAAM9nC,GACR5H,OAAO65B,eAAe7tB,KAAM,OAAQ,CAClCoY,cAAc,EACd4zC,YAAY,EACZpwD,QACA0yB,UAAU,GAEd,CAEApxB,WACE,MAAQ,GAAE8C,KAAKzL,SAASo8D,OAAS3wD,KAAKK,SACxC,EAEJ,CA+BA,SAAS0wD,EAAuB14C,GAC9B,IAAIhW,EAAM,GACN9J,EAAI8f,EAAIllB,OACZ,MAAMwJ,EAAmB,MAAX0b,EAAI,GAAa,EAAI,EACnC,KAAO9f,GAAKoE,EAAQ,EAAGpE,GAAK,EAC1B8J,EAAO,IAAGgW,EAAItb,MAAMxE,EAAI,EAAGA,KAAK8J,IAElC,MAAQ,GAAEgW,EAAItb,MAAM,EAAGxE,KAAK8J,GAC9B,CAYA,SAASorD,EAAY7xD,EAAOmD,EAAK0W,EAAKmK,EAAKhsB,EAAQyL,GACjD,GAAIzD,EAAQ6Z,GAAO7Z,EAAQmD,EAAK,CAC9B,MAAMnB,EAAmB,kBAARmB,EAAmB,IAAM,GAC1C,IAAI8pC,EAWJ,MARIA,EAFAxpC,EAAa,EACH,IAARN,GAAaA,IAAQ2C,OAAO,GACrB,OAAM9D,YAAYA,QAA2B,GAAlByB,EAAa,KAASzB,IAEjD,SAAQA,QAA2B,GAAlByB,EAAa,GAAS,IAAIzB,iBACtB,GAAlByB,EAAa,GAAS,IAAIzB,IAG/B,MAAKmB,IAAMnB,YAAY6X,IAAM7X,IAElC,IAAI8yD,EAAOM,iBAAiB,QAASnoB,EAAOjtC,EACpD,EAtBF,SAAsBgkB,EAAKhsB,EAAQyL,GACjCwvD,EAAej7D,EAAQ,eACHmB,IAAhB6qB,EAAIhsB,SAAsDmB,IAA7B6qB,EAAIhsB,EAASyL,IAC5C0vD,EAAYn7D,EAAQgsB,EAAIzsB,QAAUkM,EAAa,GAEnD,CAkBE4xD,CAAYrxC,EAAKhsB,EAAQyL,EAC3B,CAEA,SAASwvD,EAAgBjzD,EAAOrH,GAC9B,GAAqB,kBAAVqH,EACT,MAAM,IAAI80D,EAAOQ,qBAAqB38D,EAAM,SAAUqH,EAE1D,CAEA,SAASmzD,EAAanzD,EAAOzI,EAAQ6mB,GACnC,GAAI9kB,KAAKC,MAAMyG,KAAWA,EAExB,MADAizD,EAAejzD,EAAOoe,GAChB,IAAI02C,EAAOM,iBAAiBh3C,GAAQ,SAAU,aAAcpe,GAGpE,GAAIzI,EAAS,EACX,MAAM,IAAIu9D,EAAOS,yBAGnB,MAAM,IAAIT,EAAOM,iBAAiBh3C,GAAQ,SACP,MAAKA,EAAO,EAAI,YAAY7mB,IAC7ByI,EACpC,CAvFAmP,EAAE,4BACA,SAAUxW,GACR,OAAIA,EACM,GAAEA,gCAGL,gDACT,GAAGV,YACLkX,EAAE,wBACA,SAAUxW,EAAMmzD,GACd,MAAQ,QAAOnzD,4DAA+DmzD,GAChF,GAAG70D,WACLkY,EAAE,oBACA,SAAUpL,EAAKkpC,EAAOrtB,GACpB,IAAI5E,EAAO,iBAAgBjX,sBACvByxD,EAAW51C,EAWf,OAVIhoB,OAAOC,UAAU+nB,IAAUtmB,KAAK4X,IAAI0O,GAAS,GAAK,GACpD41C,EAAWL,EAAsB3zD,OAAOoe,IACd,kBAAVA,IAChB41C,EAAWh0D,OAAOoe,IACdA,EAAQ9Z,OAAO,IAAMA,OAAO,KAAO8Z,IAAU9Z,OAAO,IAAMA,OAAO,QACnE0vD,EAAWL,EAAsBK,IAEnCA,GAAY,KAEdx6C,GAAQ,eAAciyB,eAAmBuoB,IAClCx6C,CACT,GAAG/iB,YAiEL,MAAMw9D,EAAoB,oBAgB1B,SAASxxD,EAAa4c,EAAQmuC,GAE5B,IAAIK,EADJL,EAAQA,GAASzV,IAEjB,MAAMhiD,EAASspB,EAAOtpB,OACtB,IAAIm+D,EAAgB,KACpB,MAAMxzD,EAAQ,GAEd,IAAK,IAAIvF,EAAI,EAAGA,EAAIpF,IAAUoF,EAAG,CAI/B,GAHA0yD,EAAYxuC,EAAOmO,WAAWryB,GAG1B0yD,EAAY,OAAUA,EAAY,MAAQ,CAE5C,IAAKqG,EAAe,CAElB,GAAIrG,EAAY,MAAQ,EAEjBL,GAAS,IAAM,GAAG9sD,EAAMtF,KAAK,IAAM,IAAM,KAC9C,QACF,CAAO,GAAID,EAAI,IAAMpF,EAAQ,EAEtBy3D,GAAS,IAAM,GAAG9sD,EAAMtF,KAAK,IAAM,IAAM,KAC9C,QACF,CAGA84D,EAAgBrG,EAEhB,QACF,CAGA,GAAIA,EAAY,MAAQ,EACjBL,GAAS,IAAM,GAAG9sD,EAAMtF,KAAK,IAAM,IAAM,KAC9C84D,EAAgBrG,EAChB,QACF,CAGAA,EAAkE,OAArDqG,EAAgB,OAAU,GAAKrG,EAAY,MAC1D,MAAWqG,IAEJ1G,GAAS,IAAM,GAAG9sD,EAAMtF,KAAK,IAAM,IAAM,KAMhD,GAHA84D,EAAgB,KAGZrG,EAAY,IAAM,CACpB,IAAKL,GAAS,GAAK,EAAG,MACtB9sD,EAAMtF,KAAKyyD,EACb,MAAO,GAAIA,EAAY,KAAO,CAC5B,IAAKL,GAAS,GAAK,EAAG,MACtB9sD,EAAMtF,KACJyyD,GAAa,EAAM,IACP,GAAZA,EAAmB,IAEvB,MAAO,GAAIA,EAAY,MAAS,CAC9B,IAAKL,GAAS,GAAK,EAAG,MACtB9sD,EAAMtF,KACJyyD,GAAa,GAAM,IACnBA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAEvB,KAAO,MAAIA,EAAY,SASrB,MAAM,IAAIt2D,MAAM,sBARhB,IAAKi2D,GAAS,GAAK,EAAG,MACtB9sD,EAAMtF,KACJyyD,GAAa,GAAO,IACpBA,GAAa,GAAM,GAAO,IAC1BA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAIvB,CACF,CAEA,OAAOntD,CACT,CA2BA,SAAS+qD,EAAelpD,GACtB,OAAOsnD,EAAOsK,YAxHhB,SAAsB5xD,GAMpB,IAFAA,GAFAA,EAAMA,EAAI/I,MAAM,KAAK,IAEXg2D,OAAOD,QAAQ0E,EAAmB,KAEpCl+D,OAAS,EAAG,MAAO,GAE3B,KAAOwM,EAAIxM,OAAS,IAAM,GACxBwM,GAAY,IAEd,OAAOA,CACT,CA4G4B6xD,CAAY7xD,GACxC,CAEA,SAAS4qD,EAAYl1D,EAAKo8D,EAAK79D,EAAQT,GACrC,IAAIoF,EACJ,IAAKA,EAAI,EAAGA,EAAIpF,KACToF,EAAI3E,GAAU69D,EAAIt+D,QAAYoF,GAAKlD,EAAIlC,UADpBoF,EAExBk5D,EAAIl5D,EAAI3E,GAAUyB,EAAIkD,GAExB,OAAOA,CACT,CAKA,SAASwvD,EAAYhmB,EAAK/nB,GACxB,OAAO+nB,aAAe/nB,GACZ,MAAP+nB,GAAkC,MAAnBA,EAAI1uC,aAA+C,MAAxB0uC,EAAI1uC,YAAYkB,MACzDwtC,EAAI1uC,YAAYkB,OAASylB,EAAKzlB,IACpC,CACA,SAASg0D,EAAaxmB,GAEpB,OAAOA,IAAQA,CACjB,CAIA,MAAMqrB,EAAuB,WAC3B,MAAMsE,EAAW,mBACXC,EAAQ,IAAI54D,MAAM,KACxB,IAAK,IAAIR,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAMq5D,EAAU,GAAJr5D,EACZ,IAAK,IAAI2a,EAAI,EAAGA,EAAI,KAAMA,EACxBy+C,EAAMC,EAAM1+C,GAAKw+C,EAASn5D,GAAKm5D,EAASx+C,EAE5C,CACA,OAAOy+C,CACT,CAV6B,GAa7B,SAAS/C,EAAoBiD,GAC3B,MAAyB,qBAAXnwD,OAAyBowD,EAAyBD,CAClE,CAEA,SAASC,IACP,MAAM,IAAIn9D,MAAM,uBAClB,qWCrjEM,SAAUo9D,EAAwBC,GACtC,MAAO,CAACC,EAA2B5vD,EAA2BqZ,EAA8BstC,IACvE,mBAAfiJ,EAAI/d,QACN7xC,EAAIuQ,OAASo/C,EACNhJ,KAEFttC,GAEX,CAEM,SAAUw2C,EAA+BC,GAC7C,MAAO,CACLF,EACA5vD,EACAqZ,EACAstC,IAEmB,2BAAfiJ,EAAI/d,QACN7xC,EAAIuQ,OAASu/C,EACNnJ,KAEFttC,GAEX,CAEM,SAAU02C,EAAuBD,GACrC,MAAM,QAAEH,GAAYG,EAEpB,OAAOE,EAAAA,EAAAA,IAAgB,CAACN,EAAwBC,GAAUE,EAA+BC,IAC3F,CClBgB,SAAAG,EAA8FjhC,GAAA,IAAlE,YAAEkhC,GAAgElhC,EAC5G,OAAOmhC,EAAAA,EAAAA,KAAsBp8C,MAAO49B,EAASnN,EAAUnrB,KACrD,MAAM,OAAEw4B,GAAWF,EACnB,GAAe,gBAAXE,EAA0B,OAAOx4B,IAErC,IAAK62C,EAAa,MAAM,IAAI59D,MAAM,oDAElC,MAAMi/B,QAAiB2+B,EAAYve,GACnCnN,EAASj0B,OAASghB,CACF,GAEpB,CAEgB,SAAA6+B,EAIflhC,GAAA,IAJ+C,gBAC9CmhC,GAGDnhC,EACC,OAAOihC,EAAAA,EAAAA,KAAsBp8C,MAAO49B,EAASnN,EAAUnrB,KACrD,MAAM,OAAEw4B,GAAWF,EACnB,GAAe,oBAAXE,EAA8B,OAAOx4B,IAEzC,IAAKg3C,EAAiB,MAAM,IAAI/9D,MAAM,wDAEtC,MAAMi/B,QAAiB8+B,EAAgB1e,GACvCnN,EAASj0B,OAASghB,CACF,GAEpB,CAEgB,SAAA++B,EACdC,EACAC,GAEA,OAAOL,EAAAA,EAAAA,KAAkCp8C,MAAO49B,EAASnN,EAAUnrB,KACjE,MAAM,OAAEw4B,GAAWF,EACnB,GAAIE,IAAW0e,EAAc,OAAOl3C,IAEpC,IAAKm3C,EAAS,MAAM,IAAIl+D,MAAM,sBAAsBi+D,kBAEpD,MAAMhgD,QAAeigD,EAAQ7e,GAE7BnN,EAASj0B,OAASA,CACF,GAEpB,CAEM,SAAUkgD,EAAuBC,GACrC,MAAM,YAAER,EAAW,gBAAEG,EAAe,gBAAEM,EAAe,uBAAEC,EAAsB,oBAAEC,EAAmB,YAAEC,EAAW,cAAEC,EAAa,aAAEC,GAC9HN,EAEF,OAAOV,EAAAA,EAAAA,IAAgB,CACrBI,EAAgC,CAAEC,oBAClCJ,EAA4B,CAAEC,gBAC9BI,EACE,kBACAK,GAEFL,EACE,yBACAM,GAEFN,EACE,sBACAO,GAEFP,EAAiE,cAAeQ,GAChFR,EAA0C,mBAAoBS,GAC9DT,EAA0C,cAAeS,GACzDT,EAA0C,kBAAmBU,IAEjE,skBC9EM,MAAgBC,UAAgCC,EAAAA,GACpDlgE,YAAwFg+B,GAAA,IAA5E,OAAE8J,EAAM,MAAEh5B,GAAkEkvB,EACtFzwB,MAAM,CAAEu6B,OAAQ,CAAEq4B,YAAWC,EAAAA,EAAA,GAAOt4B,EAAOq4B,aAAW,IAAEE,eAAgBC,EAAAA,iBAAAA,UAA6BxxD,SACvG,CAEOiU,kBAAkBqe,GACvB,OAAOgJ,QAAQC,SACjB,CAEOtnB,oBAAoBw9C,GACzB,MAAMC,EAAS,IAAIC,EAAAA,GAGbC,EAAmBjB,EADA9yD,KAAKg0D,oBAAoBJ,IAElDC,EAAOr7D,KAAKu7D,GAEZ,MAAME,EAAmB7B,EAAuBpyD,KAAKm7B,OAAOq4B,aAC5DK,EAAOr7D,KAAKy7D,GAEZ,MAAMC,EAAwBl0D,KAAKm0D,yBAAyBP,GACxDM,GACFL,EAAOr7D,KAAK07D,GAGd,MAAME,GAAWC,EAAAA,EAAAA,IAAmBR,GACpC7zD,KAAKs0D,0BAA0BF,SACzBp0D,KAAKu0D,eACb,CAEUn+C,sBACR,MAAM,YAAEo9C,GAAgBxzD,KAAKm7B,OAI7B,OAHAn7B,KAAKM,OAAO,CACV0xD,QAASwB,EAAYxB,UAEhBwB,EAAYxB,SAAW,EAChC,CAEUmC,yBAAyB1/B,GAEnC,ECxCK,MAAM+/B,EAA2BZ,IACM,CAC1ClB,gBAAiBt8C,SACRw9C,EAAiBn9C,UAAY,CAAC6V,IAAAA,OAAYsnC,EAAiBn9C,UAAUhX,YAAc,GAE5F8yD,YAAan8C,SAAaw9C,EAAiBn9C,UAAY,CAAC6V,IAAAA,OAAYsnC,EAAiBn9C,UAAUhX,YAAc,GAC7G2zD,cAAeh9C,UACb,MAAMq+C,EAAAA,UAAAA,IAAAA,oBAAkC,EAE1CpB,aAAcj9C,UACZ,MAAMq+C,EAAAA,UAAAA,IAAAA,oBAAkC,EAE1CzB,gBAAiB58C,eACWw9C,EAAiBZ,gBAAgBf,EAAItyB,OAAOt/B,SAGxE8yD,YAAa/8C,gBACWw9C,EAAiBT,YAAYlB,EAAItyB,OAAOt/B,QAAS4xD,EAAItyB,OAAO+0B,UACnEhwC,UAEjBwuC,oBAAqB98C,UAA2H,IAAAu+C,EAAAC,EAC9I,GAAe,QAAXD,EAAC1C,EAAItyB,cAAM,IAAAg1B,IAAVA,EAAYt0D,SAAsB,QAAVu0D,EAAA3C,EAAItyB,cAAM,IAAAi1B,IAAVA,EAAYv0D,QAAQlN,OAC/C,MAAMshE,EAAAA,UAAAA,IAAAA,cAA4B,WAGpC,aAD0Bb,EAAiBV,oBAAoBjB,EAAItyB,OAAOt/B,QACxD,EAEpB4yD,uBAAwB78C,UAEf,CAAEsO,iBADWkvC,EAAiBX,uBAAuBhB,EAAItyB,OAAOt/B,UAC7CqkB,4OChC1B,SAAUmwC,EAAsCT,GACpD,OAAO5B,EAAAA,EAAAA,KAAsBp8C,MAAO67C,EAA6B5vD,EAA4ByyD,KAC3F,MAAMliD,QAAewhD,EAASpgB,6WAAO+gB,CAAC,CAAC,EAClC9C,IAEL5vD,EAAIuQ,OAASA,CAAM,GAEvB,CCHM,MAAOoiD,UAAgC1B,EACjCU,oBAAoBJ,GAC5B,OAAOY,EAAwBZ,EACjC,CAEUO,yBAAyBP,GACjC,OAAOiB,EAAsCjB,EAC/C,ECNF,MAAMqB,EAAuB7/B,QACuBrgC,IAAjDqgC,EAAqC1B,SAAyB0B,aAAuByG,EAAAA,GCLlF,MAAOq5B,UAAmC5B,EACpCU,oBAAoBJ,GAC5B,MDK4BuB,EAACvB,EAAkCwB,KACrB,CAC1C1C,gBAAiBt8C,UACf,MAAM,KAAE1W,SAAek0D,EAAiBpV,UACxC,MAAO,CAAC9+C,EAAK+W,UAAU,EAEzB87C,YAAan8C,UACX,MAAM,KAAE1W,SAAek0D,EAAiBpV,UACxC,MAAO,CAAC9+C,EAAK+W,UAAU,EAEzB28C,cAAeh9C,UACb,MAAMq+C,EAAAA,UAAAA,IAAAA,oBAAkC,EAE1CpB,aAAcj9C,UACZ,MAAMq+C,EAAAA,UAAAA,IAAAA,oBAAkC,EAE1CzB,gBAAiB58C,UACf,MAAMi/C,EAAYpD,EAAItyB,OAAOt/B,QAC7B,IAAKg1D,EAAW,MAAMZ,EAAAA,UAAAA,IAAAA,eAA6B,CAAEp0D,QAAS,gCAE9D,MAAMA,EAAU40D,EAAoBI,GAC/BA,EAAmCh1D,QAAQqrB,YAC3C2pC,EAA0Bj7B,oBACzB,KAAE16B,SAAek0D,EAAiBZ,gBAAgB1mC,IAAAA,OAAYjsB,IACpE,IAAKX,EAAK+W,YAAc/W,EAAKglB,UAAW,MAAM,IAAI/vB,MAAM,uCAExD,MAAM8hB,EAAY,IAAIyV,EAAAA,GAAUxsB,EAAK+W,WAC/BiO,EAAY4H,IAAAA,OAAY5sB,EAAKglB,WAEnC,OADA2wC,EAAUv6B,aAAarkB,EAAW1jB,EAAOC,KAAK0xB,IACvC2wC,CAAS,EAElBlC,YAAa/8C,UACX,MAAMywB,QAAiB+sB,EAAiBT,YAAYlB,EAAItyB,OAAOt/B,SAC/D,OAAOisB,IAAAA,OAAYua,EAASnnC,KAAKglB,UAAU,EAE7CuuC,uBAAwB78C,UACtB,MAAMg+C,EAAWgB,IACjB,IAAKhB,EAAU,MAAMK,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,8BAA+BqjC,KAAM,OAC/F,MAAM2xB,EAAYpD,EAAItyB,OAAOt/B,QAC7B,IAAKg1D,EAAW,MAAMZ,EAAAA,UAAAA,IAAAA,eAA6B,CAAEp0D,QAAS,gCAE9D,MAAMA,EAAU40D,EAAoBI,GAC/BA,EAAmCh1D,QAAQqrB,YAC3C2pC,EAA0Bj7B,oBACzB,KAAE16B,SAAek0D,EAAiBZ,gBAAgB1mC,IAAAA,OAAYjsB,IACpE,IAAKX,EAAK+W,YAAc/W,EAAKglB,UAAW,MAAM,IAAI/vB,MAAM,uCACxD,MAAM8hB,EAAY,IAAIyV,EAAAA,GAAUxsB,EAAK+W,WAC/BiO,EAAY4H,IAAAA,OAAY5sB,EAAKglB,WACnC2wC,EAAUv6B,aAAarkB,EAAW1jB,EAAOC,KAAK0xB,IAC9C,MAAM8uC,QAAqBY,EAASpgB,QAA2B,CAAEE,OAAQ,yBAA0BvU,OAAQ,KACrG21B,EAAO,IAAI1kB,EAAAA,GAAW4iB,EAAY+B,WAExC,MAAO,CAAE7wC,gBADS4wC,EAAK/X,mBAAmB8X,EAAU3pC,aAC3B,EAE3BwnC,oBAAqB98C,UAA2H,IAAAu+C,EAAAC,EAAAY,EAC9I,GAAe,QAAXb,EAAC1C,EAAItyB,cAAM,IAAAg1B,IAAVA,EAAYt0D,SAAsB,QAAVu0D,EAAA3C,EAAItyB,cAAM,IAAAi1B,IAAVA,EAAYv0D,QAAQlN,OAC/C,MAAMshE,EAAAA,UAAAA,IAAAA,cAA4B,WAGpC,MAAMgB,EAAUxD,EAAItyB,OAAOt/B,SACrB,OAAElN,GAAWsiE,EAEbC,EAAa,GAEnB,IAAK,IAAIn9D,EAAI,EAAGA,EAAIpF,EAAQoF,IAAK,CAC/B,MAAM4V,EAAOsnD,EAAQl9D,GACf8H,EAAU40D,EAAoB9mD,GAASA,EAA8B9N,QAAQqrB,YAAevd,EAAqBisB,mBACvHs7B,EAAWl9D,KAAK8zB,IAAAA,OAAYjsB,GAC7B,CACD,MAAM,IAAEuW,EAAG,KAAElX,SAAek0D,EAAiBV,oBAAoBwC,GAEjE,IAAKh2D,EAAK+W,YAA4B,QAAf++C,EAAA91D,EAAK24B,kBAAU,IAAAm9B,OAAA,EAAfA,EAAiBriE,UAAWA,EAAQ,MAAM,IAAIwB,MAAMiiB,GAE3E,MAAMH,EAAY,IAAIyV,EAAAA,GAAUxsB,EAAK+W,WAErC,IAAK,IAAIle,EAAI,EAAGA,EAAIpF,EAAQoF,IAAK,CAC/B,MAAMmsB,EAAY4H,IAAAA,OAAY5sB,EAAK24B,WAAW9/B,IAC9Ck9D,EAAQl9D,GAAGuiC,aAAarkB,EAAW1jB,EAAOC,KAAK0xB,GAChD,CAED,OAAO+wC,CAAO,ICrFTN,CAAiBvB,EAAkB5zD,KAAKo1D,uBAAuB76D,KAAKyF,MAC7E,ECHI,MAAO21D,UAAiCrC,EAClCU,oBAAoBJ,GAC5B,MCE+BgC,EAAChC,EAAkCwB,KACpE,MAAMS,EAA2BrB,EAAwBZ,GAazD,OAZAiC,EAAyB5C,uBAAyB78C,UAGhD,MAAMg+C,EAAWgB,IACjB,IAAKhB,EAAU,MAAMK,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,8BAA+BqjC,KAAM,OAE/F,MAAMtO,QAAoBw+B,EAAiBZ,gBAAgBf,EAAItyB,OAAOt/B,SAChEmzD,QAAqBY,EAASpgB,QAA2B,CAAEE,OAAQ,yBAA0BvU,OAAQ,KACrG21B,EAAO,IAAI1kB,EAAAA,GAAW4iB,EAAY+B,WAExC,MAAO,CAAE7wC,gBADS4wC,EAAK/X,mBAAmBnoB,EAAY1J,aAC7B,EAEpBmqC,CAAwB,EDhBtBD,CAAoBhC,EAAkB5zD,KAAKo1D,uBAAuB76D,KAAKyF,MAChF,ukBEGI,MAAO81D,UAA8BvC,EAAAA,GACzClgE,YAAwFg+B,GAAA,IAA5E,OAAE8J,EAAM,MAAEh5B,GAAkEkvB,EACtFzwB,MAAM,CAAEu6B,OAAQ,CAAEq4B,YAAWuC,EAAAA,EAAA,GAAO56B,EAAOq4B,aAAW,IAAEE,eAAgBC,EAAAA,iBAAAA,UAA6BxxD,SACvG,CAEOiU,kBAAkBqe,GACvB,OAAOgJ,QAAQC,SACjB,CAEOtnB,oBAAoBw9C,GACzB5zD,KAAKg2D,6BAA6BpC,SAC5B5zD,KAAKi2D,YAAYrC,EACzB,CAEUx9C,sBACR,IAAKpW,KAAKo0D,SAAU,MAAMK,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,2CAA4CqjC,KAAM,OACjH,MAAM,QAAEsuB,GAAYhyD,KAAKm7B,OAAOq4B,YAE1B0C,QAAyBl2D,KAAKo0D,SAASpgB,QAAyB,CACpEE,OAAQ,mBAGJiiB,GAAsBC,EAAAA,EAAAA,aAAYF,EAAiBh5D,YAAcg5D,EAAwB,KAAA7iD,SAAS6iD,EAAkB,IAAIh5D,SAAS,MACvI,GAAI80D,IAAYmE,EACd,MAAME,EAAAA,0BAAAA,mBAAiF,oCAAAF,gBAAkCnE,KAK3H,OAHAhyD,KAAKM,OAAO,CAAE0xD,QAASmE,IACvBn2D,KAAKo0D,SAASkC,KAAK,UAAW,CAAEtE,QAAShyD,KAAKmC,MAAM6vD,UACpDhyD,KAAKo0D,SAASkC,KAAK,eAAgBt2D,KAAKmC,MAAM6vD,SACvChyD,KAAKmC,MAAM6vD,OACpB,CAEQ57C,kBAAkBw9C,GACxB,MAAMb,ECtCuBa,KACa,CAC1ClB,gBAAiBt8C,eACQw9C,EAAiB5f,QAAkB,CACxDE,OAAQ,yBACRvU,OAAQ,CAAC,IAKb4yB,YAAan8C,eACYw9C,EAAiB5f,QAAkB,CACxDE,OAAQ,yBACRvU,OAAQ,CAAC,IAKbyzB,cAAeh9C,UACb,MAAMq+C,EAAAA,UAAAA,IAAAA,oBAAkC,EAE1CpB,aAAcj9C,UACZ,MAAMq+C,EAAAA,UAAAA,IAAAA,oBAAkC,EAE1CtB,YAAa/8C,UAAyE,IAAAu+C,EACpF,GAAK,QAADA,EAAC1C,EAAItyB,cAAJ,IAAAg1B,IAAAA,EAAYt0D,QACf,MAAMo0D,EAAAA,UAAAA,IAAAA,cAA4B,WAGpC,aADsBb,EAAiBT,YAAYlB,EAAItyB,OAAOt/B,QAChD,EAGhB2yD,gBAAiB58C,UAAuH,IAAAw+C,EACtI,GAAK,QAADA,EAAC3C,EAAItyB,cAAJ,IAAAi1B,IAAAA,EAAYv0D,QACf,MAAMo0D,EAAAA,UAAAA,IAAAA,cAA4B,WAEpC,MAAMY,EAAYpD,EAAItyB,OAAOt/B,QAE7B,aADuBuzD,EAAiBZ,gBAAgBqC,EACzC,EAGjBpC,uBAAwB78C,UAA2G,IAAAmgD,EACjI,GAAK,QAADA,EAACtE,EAAItyB,cAAJ,IAAA42B,IAAAA,EAAYl2D,QACf,MAAMo0D,EAAAA,UAAAA,IAAAA,cAA4B,WAEpC,MAAMY,EAAYpD,EAAItyB,OAAOt/B,QAE7B,MAAO,CAAEqkB,gBADckvC,EAAiB32B,gBAAgBo4B,GAC1B,EAGhCnC,oBAAqB98C,UAA2H,IAAAogD,EAAAC,EAC9I,GAAe,QAAXD,EAACvE,EAAItyB,cAAM,IAAA62B,IAAVA,EAAYn2D,SAAsB,QAAVo2D,EAAAxE,EAAItyB,cAAM,IAAA82B,IAAVA,EAAYp2D,QAAQlN,OAC/C,MAAMshE,EAAAA,UAAAA,IAAAA,cAA4B,WAEpC,MAAMjzB,EAAeywB,EAAItyB,OAAOt/B,QAEhC,aADuBuzD,EAAiBV,oBAAoB1xB,EAC7C,IDlBQk1B,CAAiB9C,GACpCG,EAAmBjB,EAAuBC,GAC1CmB,EAAwBW,EAAsCjB,GAC9DC,EAAS,IAAIC,EAAAA,GACnBD,EAAOr7D,KAAKu7D,GACZF,EAAOr7D,KAAK07D,GACZ,MAAME,GAAWC,EAAAA,EAAAA,IAAmBR,GACpC7zD,KAAKs0D,0BAA0BF,SACzBp0D,KAAKu0D,eACb,CAEQn+C,mCAAmCw9C,GACzCA,EAAiBxe,GAAG,mBAAmBh/B,UACrCpW,KAAKo0D,SAASkC,KAAK,kBAAmB1iC,EAAS,IAEjDggC,EAAiBxe,GAAG,gBAAgBh/B,UAClC,MAAM+/C,GAAsBC,EAAAA,EAAAA,aAAYpE,GAAWA,EAAU,KAAK3+C,SAAS2+C,EAAS,IAAI90D,SAAS,MAEjG8C,KAAK22D,UAAU,CACbnD,YAAkBuC,EAAAA,EAAA,GAAA/1D,KAAKm7B,OAAOq4B,aAAW,IAAExB,QAASmE,YAEhDn2D,KAAK42D,cAAchD,EAAiB,GAE9C,ukBE5CI,MAAOiD,UAAiCtD,EAAAA,GAC5ClgE,YAAiGg+B,GAAA,IAArF,OAAE8J,EAAM,MAAEh5B,GAA2EkvB,EAC/FzwB,MAAM,CAAEu6B,OAAQ,CAAEq4B,YAAWsD,EAAAA,EAAA,GAAO37B,EAAOq4B,aAAW,IAAEE,eAAgBC,EAAAA,iBAAAA,UAA6BxxD,SACvG,CAWOiU,eACL,IAAKpW,KAAKmC,MAAM8P,WACd,MAAMwiD,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,4EAA6EqjC,KAAM,OAEhI,aADM1jC,KAAK42D,cAAc52D,KAAKmC,MAAM8P,YAC7BjS,KAAK+2D,qBAAqB/iB,QAA2B,CAAEE,OAAQ,gBACxE,CAEO99B,oBAAoB0sC,GACzB,MAAMiQ,QCnCH38C,eAMNib,GAAA,IANyC,QACxCyxB,EAAO,uBACPsS,GAID/jC,EAIC,GAAuB,kBAAZyxB,EAAsB,MAAMuT,EAAAA,0BAAAA,cAAwC,4BAC/E,MAAMW,EAHG5W,EAAAA,GAAAA,cAAsBrtD,EAAOC,KAAK8vD,EAAS,QAwEpD,MApE4C,CAC1C4P,gBAAiBt8C,SACR,CAAC4gD,EAAQvgD,UAAUgW,YAE5B8lC,YAAan8C,SAAY,CAAC4gD,EAAQvgD,UAAUgW,YAE5C2mC,cAAeh9C,SAAY0sC,EAC3BuQ,aAAcj9C,SAAYkW,IAAAA,OAAY0qC,EAAQ1rC,WAE9C0nC,gBAAiB58C,UAAuH,IAAAu+C,EACtI,GAAK,QAADA,EAAC1C,EAAItyB,cAAJ,IAAAg1B,IAAAA,EAAYt0D,QACf,MAAMo0D,EAAAA,UAAAA,IAAAA,cAA4B,WAEpC,MAAMr/B,EAAc68B,EAAItyB,OAAOt/B,QAM/B,YALsDtL,IAAjDqgC,EAAqC1B,SAAyB0B,aAAuByG,EAAAA,GACvFzG,EAAqCle,KAAK,CAAC8/C,IAE5C5hC,EAAYwF,YAAYo8B,GAEnB5hC,CAAW,EAGpB+9B,YAAa/8C,UAAyE,IAAAw+C,EACpF,GAAK,QAADA,EAAC3C,EAAItyB,cAAJ,IAAAi1B,IAAAA,EAAYv0D,QACf,MAAMo0D,EAAAA,UAAAA,IAAAA,cAA4B,WAGpC,OADkBwC,IAAAA,KAAAA,SAAmBhF,EAAItyB,OAAOt/B,QAAS22D,EAAQ1rC,UACjD,EAGlB2nC,uBAAwB78C,UAA2G,IAAAmgD,EACjI,GAAK,QAADA,EAACtE,EAAItyB,cAAJ,IAAA42B,IAAAA,EAAYl2D,QACf,MAAMo0D,EAAAA,UAAAA,IAAAA,cAA4B,WAEpC,MAAMsC,EAAuB3B,IAC7B,IAAK2B,EAAsB,MAAMtC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,8BAA+BqjC,KAAM,OAE3G,MAAMtO,EAAc68B,EAAItyB,OAAOt/B,QAU/B,YATsDtL,IAAjDqgC,EAAqC1B,SAAyB0B,aAAuByG,EAAAA,GACvFzG,EAAqCle,KAAK,CAAC8/C,IAE5C5hC,EAAYwF,YAAYo8B,GAMnB,CAAEtyC,gBAJSqyC,EAAqB/iB,QAAgB,CACrDE,OAAQ,kBACRvU,OAAQ,CAAC5sC,EAAOC,KAAKoiC,EAAY1J,aAAaxuB,SAAS,UAAW,CAAE85C,SAAU,aAEvD,EAG3Bkc,oBAAqB98C,UAA2H,IAAAogD,EAAAC,EAAAS,EAC9I,GAAe,QAAXV,EAACvE,EAAItyB,cAAM,IAAA62B,IAAVA,EAAYn2D,SAAsB,QAAVo2D,EAAAxE,EAAItyB,cAAM,IAAA82B,IAAVA,EAAYp2D,QAAQlN,OAC/C,MAAMshE,EAAAA,UAAAA,IAAAA,cAA4B,WAGpC,MAAM0C,EAAiB,QAAVD,EAAAjF,EAAItyB,cAAM,IAAAu3B,OAAA,EAAVA,EAAY72D,QACzB,IAAK,MAAM+2D,KAAMD,GAAQ,GAAI,CAC3B,MAAM/hC,EAAcgiC,OACkCriE,IAAjDqgC,EAAqC1B,SAAyB0B,aAAuByG,EAAAA,GACvFzG,EAAqCle,KAAK,CAAC8/C,IAE5C5hC,EAAYwF,YAAYo8B,EAE3B,CACD,OAAOG,CAAI,EAKjB,CD9CmCnD,CAAoB,CAAElR,UAASsS,uBAAwBp1D,KAAKo1D,uBAAuB76D,KAAKyF,QAEjH+zD,EAAmBjB,EAAuBC,GAE1Cc,EAAS,IAAIC,EAAAA,IACb,kBAAEuD,GZfN,SAA8BlF,GAIlC,MAAM,UAAEoD,GAAcpD,EAChBnhB,GAAkBsmB,EAAAA,EAAAA,IAAsB,CAAE/B,cAEhD,MAAO,CAAE8B,mBADiBhF,EAAAA,EAAAA,IAAgB,CAACD,EAAuBD,GAAiBnhB,IACvDA,kBAC9B,CYOkCumB,CAAoBv3D,KAAKm7B,OAAOq4B,aAC9DK,EAAOr7D,KAAKwH,KAAKw3D,4BACjB3D,EAAOr7D,KAAKwH,KAAKy3D,wBACjB5D,EAAOr7D,KAAKu7D,GACZF,EAAOr7D,KAAK6+D,GAEZ,MAAMjD,GAAWC,EAAAA,EAAAA,IAAmBR,GAEpC7zD,KAAKs0D,0BAA0BF,SAEzBp0D,KAAKu0D,eACb,CAEOn+C,oBAAoBupB,GACzB,IAAK3/B,KAAK+2D,qBAAsB,MAAMtC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,8BAA+BqjC,KAAM,aACtF1jC,KAAK+2D,qBAAqB/iB,QAAyB,CAAEE,OAAQ,uBACnEvU,EAAO1tB,mBACnBjS,KAAK42D,cAAcj3B,EAAO1tB,YAChCjS,KAAK+2D,qBAAqBT,KAAK,kBAAmB,CAChD1iC,eAAgB5zB,KAAK+2D,qBAAqB/iB,QAA2B,CAAEE,OAAQ,sBAGrF,CAEO99B,kBAAkBupB,GACvB,IAAK3/B,KAAK+2D,qBAAsB,MAAMtC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,8BAA+BqjC,KAAM,OAChH,MAAM8vB,EAAcxzD,KAAK03D,eAAe/3B,EAAOqyB,SAC/ChyD,KAAKM,OAAO,CACV0xD,QAAS,YAEXhyD,KAAK22D,UAAU,CAAEnD,gBACjB,MAAM1Q,QAAgB9iD,KAAK+2D,qBAAqB/iB,QAAyB,CAAEE,OAAQ,2BAC7El0C,KAAK42D,cAAc9T,EAC3B,CAEU1sC,sBACR,IAAKpW,KAAK+2D,qBAAsB,MAAMtC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEp0D,QAAS,8BAA+BqjC,KAAM,OAChH,MAAMi0B,QAAe33D,KAAK+2D,qBAAqB/iB,QAAyB,CACtEE,OAAQ,YACRvU,OAAQ,MAEJ,YAAE6zB,GAAgBxzD,KAAKm7B,OAC7B,GAAe,OAAXw8B,EACF,MAAMtB,EAAAA,0BAAAA,mBAAmG,sDAAA7C,EAAY+B,aAMvH,OALAv1D,KAAKM,OAAO,CAAE0xD,QAASwB,EAAYxB,UAC/BhyD,KAAKmC,MAAM6vD,UAAYwB,EAAYxB,UACrChyD,KAAKo0D,SAASkC,KAAK,eAAgBt2D,KAAKmC,MAAM6vD,SAC9ChyD,KAAKo0D,SAASkC,KAAK,UAAW,CAAEtE,QAAShyD,KAAKmC,MAAM6vD,WAE/ChyD,KAAKmC,MAAM6vD,OACpB,CAEQwF,2BA2BN,gBX1BsG/lC,GAAA,IAA9D,kBAAEmmC,EAAiB,kBAAEC,GAAyCpmC,EACxG,OAAO4gC,EAAAA,EAAAA,IAAgB,CACrBM,EAA2D,iBAAkBiF,GAC7EjF,EAAuD,oBAAqBkF,IAEhF,CWoBkCC,CAzBoB,CAChDF,kBAAmBxhD,UACjB,IAAK67C,EAAItyB,OAAQ,MAAM80B,EAAAA,UAAAA,IAAAA,cAA4B,0BACnD,MAAM,QAAEzC,EAAO,UAAE+F,EAAS,QAAEC,EAAO,kBAAEC,EAAiB,eAAEC,GAAmBjG,EAAItyB,OAE/E,IAAKqyB,EAAS,MAAMyC,EAAAA,UAAAA,IAAAA,cAA4B,kCAChD,IAAKuD,GAA8B,IAAnBA,EAAQ7kE,OAAc,MAAMshE,EAAAA,UAAAA,IAAAA,cAA4B,kCACxE,IAAKyD,EAAgB,MAAMzD,EAAAA,UAAAA,IAAAA,cAA4B,yCACvDz0D,KAAKm4D,SAAS,CACZzE,eAAgBC,EAAAA,iBAAAA,OAChB3B,UACAoG,QAAQ,OAAAF,QAAc,IAAdA,OAAc,EAAdA,EAAgBG,SAAU,MAClCC,YAAY,OAAAJ,QAAc,IAAdA,OAAc,EAAdA,EAAgB3jE,OAAQ,SACpCgkE,YAAaR,EACbxC,UAAWyC,EAAQ,GACnBQ,eAAe,OAAAP,QAAA,IAAAA,OAAA,EAAAA,EAAoB,KAAM,GACzCruB,UAAwB,OAAdsuB,QAAA,IAAAA,OAAA,EAAAA,EAAgBtuB,WAAY,GACtC,EAEJiuB,kBAAmBzhD,UACjB,IAAK67C,EAAItyB,OAAQ,MAAM80B,EAAAA,UAAAA,IAAAA,cAA4B,0BACnD,IAAKxC,EAAItyB,OAAOqyB,QAAS,MAAMyC,EAAAA,UAAAA,IAAAA,cAA4B,yBACrDz0D,KAAKy4D,YAAYxG,EAAItyB,OAAO,GAKxC,CAEQ83B,uBASN,OX5BY,SAA8D9lC,GAAA,IAAtC,iBAAE+mC,GAAoC/mC,EAC5E,OAAO0gC,EAAAA,EAAAA,IAAgB,CAACM,EAA0D,gBAAiB+F,IACrG,CW0BWC,CARmC,CACxCD,iBAAkBtiD,UAChB,IAAK67C,EAAItyB,OAAQ,MAAM80B,EAAAA,UAAAA,IAAAA,cAA4B,0BACnD,IAAKxC,EAAItyB,OAAO1tB,WAAY,MAAMwiD,EAAAA,UAAAA,IAAAA,cAA4B,sBAC9D,MAAM,WAAExiD,GAAeggD,EAAItyB,aACrB3/B,KAAK44D,cAAc,CAAE3mD,cAAa,GAI9C,UAvHW4kD,EAAyB,uBAKAzgD,UAIlC,MAAMyiD,EAAkB,IAAIhC,EAAyB,CAAE17B,OAAQ,CAAEq4B,YAAa7zB,EAAO6zB,eAErF,aADMqF,EAAgBjC,cAAcj3B,EAAOmjB,SACpC+V,CAAe,UE9BbC,EAGXzlE,YAAY+gE,IAAkC2E,EAAAA,EAAAA,GAAA,wBAC5C/4D,KAAKo0D,SAAWA,CAClB,CAEOh+C,wBAKL,aAJuBpW,KAAKo0D,SAASpgB,QAAkB,CACrDE,OAAQ,kBACRvU,OAAQ,CAAC,GAGb,CAEOvpB,6BAA0Egf,GAC/E,MAAM,UAAE1Q,SAAoB1kB,KAAKo0D,SAASpgB,QAA+B,CACvEE,OAAQ,yBACRvU,OAAQ,CACNt/B,QAAS+0B,KAGb,MAAO,CAAE1Q,YACX,CAEOtO,sBAAmEgf,GAOxE,aANgCp1B,KAAKo0D,SAASpgB,QAAQ,CACpDE,OAAQ,kBACRvU,OAAQ,CACNt/B,QAAS+0B,IAIf,CAEOhf,0BAAuEorB,GAO5E,aANiCxhC,KAAKo0D,SAASpgB,QAAQ,CACrDE,OAAQ,sBACRvU,OAAQ,CACNt/B,QAASmhC,IAIf,CAEOprB,kBAAkB1W,GAOvB,aANuBM,KAAKo0D,SAASpgB,QAAoB,CACvDE,OAAQ,cACRvU,OAAQ,CACNt/B,QAASX,IAIf,CAEO0W,cAAiBid,GAEtB,aADqBrzB,KAAKo0D,SAASpgB,QAAW3gB,EAEhD,iCCvDF,IAAI2lC,EAAUvmE,EAAAA,OAAAA,OA+GdwmE,EAAOv7D,QA9GP,SAAew7D,GACb,GAAIA,EAAS/lE,QAAU,IAAO,MAAM,IAAIN,UAAU,qBAElD,IADA,IAAIsmE,EAAW,IAAIvmE,WAAW,KACrBsgB,EAAI,EAAGA,EAAIimD,EAAShmE,OAAQ+f,IACnCimD,EAASjmD,GAAK,IAEhB,IAAK,IAAI3a,EAAI,EAAGA,EAAI2gE,EAAS/lE,OAAQoF,IAAK,CACxC,IAAIgQ,EAAI2wD,EAASE,OAAO7gE,GACpB8gE,EAAK9wD,EAAEqiB,WAAW,GACtB,GAAqB,MAAjBuuC,EAASE,GAAe,MAAM,IAAIxmE,UAAU0V,EAAI,iBACpD4wD,EAASE,GAAM9gE,CACjB,CACA,IAAI0T,EAAOitD,EAAS/lE,OAChBmmE,EAASJ,EAASE,OAAO,GACzBG,EAASrkE,KAAKs/C,IAAIvoC,GAAQ/W,KAAKs/C,IAAI,KACnCglB,EAAUtkE,KAAKs/C,IAAI,KAAOt/C,KAAKs/C,IAAIvoC,GAyCvC,SAASwtD,EAAchsB,GACrB,GAAsB,kBAAXA,EAAuB,MAAM,IAAI56C,UAAU,mBACtD,GAAsB,IAAlB46C,EAAOt6C,OAAgB,OAAO6lE,EAAQnpC,MAAM,GAKhD,IAJA,IAAI6pC,EAAM,EAENC,EAAS,EACTxmE,EAAS,EACNs6C,EAAOisB,KAASJ,GACrBK,IACAD,IAMF,IAHA,IAAIxpC,GAAUud,EAAOt6C,OAASumE,GAAOH,EAAU,IAAO,EAClDK,EAAO,IAAIhnE,WAAWs9B,GAEnBud,EAAOisB,IAAM,CAElB,IAAIG,EAAQV,EAAS1rB,EAAO7iB,WAAW8uC,IAEvC,GAAc,MAAVG,EAAiB,OAErB,IADA,IAAIthE,EAAI,EACCuhE,EAAM5pC,EAAO,GAAc,IAAV2pC,GAAethE,EAAIpF,KAAqB,IAAT2mE,EAAaA,IAAOvhE,IAC3EshE,GAAU5tD,EAAO2tD,EAAKE,KAAU,EAChCF,EAAKE,GAAQD,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAc,IAAVA,EAAe,MAAM,IAAIllE,MAAM,kBACnCxB,EAASoF,EACTmhE,GACF,CAGA,IADA,IAAIK,EAAM7pC,EAAO/8B,EACV4mE,IAAQ7pC,GAAsB,IAAd0pC,EAAKG,IAC1BA,IAEF,IAAIC,EAAMhB,EAAQxR,YAAYmS,GAAUzpC,EAAO6pC,IAC/CC,EAAIz4D,KAAK,EAAM,EAAGo4D,GAElB,IADA,IAAIzmD,EAAIymD,EACDI,IAAQ7pC,GACb8pC,EAAI9mD,KAAO0mD,EAAKG,KAElB,OAAOC,CACT,CAMA,MAAO,CACL5kE,OAzFF,SAAiBq4C,GAEf,IADI10C,MAAMC,QAAQy0C,IAAWA,aAAkB76C,cAAc66C,EAASurB,EAAQhmE,KAAKy6C,KAC9EurB,EAAQ3Q,SAAS5a,GAAW,MAAM,IAAI56C,UAAU,mBACrD,GAAsB,IAAlB46C,EAAOt6C,OAAgB,MAAO,GAMlC,IAJA,IAAIwmE,EAAS,EACTxmE,EAAS,EACT8mE,EAAS,EACTC,EAAOzsB,EAAOt6C,OACX8mE,IAAWC,GAA2B,IAAnBzsB,EAAOwsB,IAC/BA,IACAN,IAMF,IAHA,IAAIzpC,GAASgqC,EAAOD,GAAUT,EAAU,IAAO,EAC3CW,EAAM,IAAIvnE,WAAWs9B,GAElB+pC,IAAWC,GAAM,CAItB,IAHA,IAAIL,EAAQpsB,EAAOwsB,GAEf1hE,EAAI,EACC6hE,EAAMlqC,EAAO,GAAc,IAAV2pC,GAAethE,EAAIpF,KAAqB,IAATinE,EAAaA,IAAO7hE,IAC3EshE,GAAU,IAAMM,EAAIC,KAAU,EAC9BD,EAAIC,GAAQP,EAAQ5tD,IAAU,EAC9B4tD,EAASA,EAAQ5tD,IAAU,EAE7B,GAAc,IAAV4tD,EAAe,MAAM,IAAIllE,MAAM,kBACnCxB,EAASoF,EACT0hE,GACF,CAGA,IADA,IAAII,EAAMnqC,EAAO/8B,EACVknE,IAAQnqC,GAAqB,IAAbiqC,EAAIE,IACzBA,IAIF,IADA,IAAI16D,EAAM25D,EAAOgB,OAAOX,GACjBU,EAAMnqC,IAAQmqC,EAAO16D,GAAOu5D,EAASE,OAAOe,EAAIE,IACvD,OAAO16D,CACT,EAmDE85D,aAAcA,EACdzkE,OARF,SAAiBynB,GACf,IAAIxpB,EAASwmE,EAAah9C,GAC1B,GAAIxpB,EAAU,OAAOA,EACrB,MAAM,IAAI0B,MAAM,WAAasX,EAAO,aACtC,EAMF,sDChGAvO,EAAQ,GAZR,SAAoBkiB,GAChB,CACI,MAAM26C,EAAWxnE,EAAOC,KAAK4sB,GAC7B26C,EAAS/mD,UACT,MAAMjE,EAAMgrD,EAASr9D,SAAS,OAC9B,OAAmB,IAAfqS,EAAIpc,OACGuO,OAAO,GAEXA,OAAQ,KAAI6N,IACvB,CAEJ,EAkCA7R,EAAQ,GAVR,SAAoB4L,EAAKkxD,GACrB,CACI,MAAMjrD,EAAMjG,EAAIpM,SAAS,IACnBjK,EAASF,EAAOC,KAAKuc,EAAI/P,SAAiB,EAARg7D,EAAW,KAAKz9D,MAAM,EAAW,EAARy9D,GAAY,OAE7E,OADAvnE,EAAOugB,UACAvgB,CACX,CAGJ,4DCpDIwnE,EAAmBz6D,MAAQA,KAAKy6D,kBAAqBzmE,OAAOC,OAAU,SAASymE,EAAG9mD,EAAGkD,EAAG4J,QAC7E3rB,IAAP2rB,IAAkBA,EAAK5J,GAC3B9iB,OAAO65B,eAAe6sC,EAAGh6C,EAAI,CAAEsrC,YAAY,EAAM5pD,IAAK,WAAa,OAAOwR,EAAEkD,EAAI,GACpF,EAAM,SAAS4jD,EAAG9mD,EAAGkD,EAAG4J,QACT3rB,IAAP2rB,IAAkBA,EAAK5J,GAC3B4jD,EAAEh6C,GAAM9M,EAAEkD,EACd,GACI6jD,EAAsB36D,MAAQA,KAAK26D,qBAAwB3mE,OAAOC,OAAU,SAASymE,EAAG/hE,GACxF3E,OAAO65B,eAAe6sC,EAAG,UAAW,CAAE1O,YAAY,EAAMpwD,MAAOjD,GACnE,EAAK,SAAS+hE,EAAG/hE,GACb+hE,EAAW,QAAI/hE,CACnB,GACIiiE,EAAc56D,MAAQA,KAAK46D,YAAe,SAAUC,EAAYhO,EAAQj3C,EAAKklD,GAC7E,IAA2HlzD,EAAvH+G,EAAI7Z,UAAU3B,OAAQsb,EAAIE,EAAI,EAAIk+C,EAAkB,OAATiO,EAAgBA,EAAO9mE,OAAO+mE,yBAAyBlO,EAAQj3C,GAAOklD,EACrH,GAAuB,kBAAZE,SAAoD,oBAArBA,QAAQC,SAAyBxsD,EAAIusD,QAAQC,SAASJ,EAAYhO,EAAQj3C,EAAKklD,QACpH,IAAK,IAAIviE,EAAIsiE,EAAW1nE,OAAS,EAAGoF,GAAK,EAAGA,KAASqP,EAAIizD,EAAWtiE,MAAIkW,GAAKE,EAAI,EAAI/G,EAAE6G,GAAKE,EAAI,EAAI/G,EAAEilD,EAAQj3C,EAAKnH,GAAK7G,EAAEilD,EAAQj3C,KAASnH,GAChJ,OAAOE,EAAI,GAAKF,GAAKza,OAAO65B,eAAeg/B,EAAQj3C,EAAKnH,GAAIA,CAChE,EACIysD,EAAgBl7D,MAAQA,KAAKk7D,cAAiB,SAAUlyD,GACxD,GAAIA,GAAOA,EAAImyD,WAAY,OAAOnyD,EAClC,IAAI4J,EAAS,CAAC,EACd,GAAW,MAAP5J,EAAa,IAAK,IAAI8N,KAAK9N,EAAe,YAAN8N,GAAmB9iB,OAAO6G,eAAeC,KAAKkO,EAAK8N,IAAI2jD,EAAgB7nD,EAAQ5J,EAAK8N,GAE5H,OADA6jD,EAAmB/nD,EAAQ5J,GACpB4J,CACX,EACIwoD,EAAmBp7D,MAAQA,KAAKo7D,iBAAoB,SAAUpyD,GAC9D,OAAQA,GAAOA,EAAImyD,WAAcnyD,EAAM,CAAE,QAAWA,EACxD,EACAhV,OAAO65B,eAAenwB,EAAS,aAAc,CAAE9B,OAAO,IACtD8B,EAAQmuB,qBAAuBnuB,EAAQkuB,YAAcluB,EAAQguB,UAAYhuB,EAAQ29D,aAAe39D,EAAQ49D,aAAe59D,EAAQ69D,WAAa79D,EAAQ89D,WAAa99D,EAAQ+9D,gBAAa,EACtL,MAAMC,EAAUN,EAAgB3oE,EAAQ,QAClCkpE,EAASP,EAAgB3oE,EAAQ,QAEjCukD,EAAWkkB,EAAazoE,EAAQ,QAEhCmpE,EAAc,IAD+B,oBAAhBC,YAA6B7kB,EAAS6kB,YAAcA,aAC3C,QAAS,CAAEC,OAAO,IAO9Dp+D,EAAQ+9D,WANR,SAAoB7/D,GAIhB,MAHqB,kBAAVA,IACPA,EAAQ7I,EAAOC,KAAK4I,EAAO,SAExB+/D,EAAOluC,QAAQr4B,OAAOrC,EAAOC,KAAK4I,GAC7C,EAKA8B,EAAQ89D,WAHR,SAAoB5/D,GAChB,OAAO7I,EAAOC,KAAK2oE,EAAOluC,QAAQz4B,OAAO4G,GAC7C,EAEA,MAAMmgE,EAAiB,KACvB,MAAMR,UAAmB5mE,MACrBtB,YAAYgN,GACRO,MAAMP,GACNL,KAAKg8D,UAAY,GACjBh8D,KAAKi8D,gBAAkB57D,CAC3B,CACA67D,eAAeC,GACXn8D,KAAKg8D,UAAUvkC,OAAO,EAAG,EAAG0kC,GAE5Bn8D,KAAKK,QAAUL,KAAKi8D,gBAAkB,KAAOj8D,KAAKg8D,UAAU1iD,KAAK,IACrE,EAEJ5b,EAAQ69D,WAAaA,EAErB,MAAMD,EACFjoE,cACI2M,KAAK4f,IAAM7sB,EAAO88B,MAAMksC,GACxB/7D,KAAK7M,OAAS,CAClB,CACAipE,cACQp8D,KAAK4f,IAAIzsB,OAAS,GAAK6M,KAAK7M,SAC5B6M,KAAK4f,IAAM7sB,EAAOs6B,OAAO,CAACrtB,KAAK4f,IAAK7sB,EAAO88B,MAAMksC,KAEzD,CACAM,QAAQzgE,GACJoE,KAAKo8D,cACLp8D,KAAK4f,IAAI6vC,WAAW7zD,EAAOoE,KAAK7M,QAChC6M,KAAK7M,QAAU,CACnB,CACAmpE,SAAS1gE,GACLoE,KAAKo8D,cACLp8D,KAAK4f,IAAI+vC,cAAc/zD,EAAOoE,KAAK7M,QACnC6M,KAAK7M,QAAU,CACnB,CACAopE,SAAS3gE,GACLoE,KAAKo8D,cACLp8D,KAAK4f,IAAI/oB,cAAc+E,EAAOoE,KAAK7M,QACnC6M,KAAK7M,QAAU,CACnB,CACAqpE,SAAS5gE,GACLoE,KAAKo8D,cACLp8D,KAAKy8D,YAAY1pE,EAAOC,KAAK,IAAI0oE,EAAQjuC,QAAQ7xB,GAAO8gE,QAAQ,KAAM,IAC1E,CACAC,UAAU/gE,GACNoE,KAAKo8D,cACLp8D,KAAKy8D,YAAY1pE,EAAOC,KAAK,IAAI0oE,EAAQjuC,QAAQ7xB,GAAO8gE,QAAQ,KAAM,KAC1E,CACAE,UAAUhhE,GACNoE,KAAKo8D,cACLp8D,KAAKy8D,YAAY1pE,EAAOC,KAAK,IAAI0oE,EAAQjuC,QAAQ7xB,GAAO8gE,QAAQ,KAAM,KAC1E,CACAG,UAAUjhE,GACNoE,KAAKo8D,cACLp8D,KAAKy8D,YAAY1pE,EAAOC,KAAK,IAAI0oE,EAAQjuC,QAAQ7xB,GAAO8gE,QAAQ,KAAM,KAC1E,CACAD,YAAYxpE,GAER+M,KAAK4f,IAAM7sB,EAAOs6B,OAAO,CACrBt6B,EAAOC,KAAKgN,KAAK4f,IAAI1e,SAAS,EAAGlB,KAAK7M,SACtCF,EACAF,EAAO88B,MAAMksC,KAEjB/7D,KAAK7M,QAAUF,EAAOE,MAC1B,CACA2pE,YAAYn9D,GACRK,KAAKo8D,cACL,MAAMzpE,EAAII,EAAOC,KAAK2M,EAAK,QAC3BK,KAAKu8D,SAAS5pE,EAAEQ,QAChB6M,KAAKy8D,YAAY9pE,EACrB,CACAoqE,gBAAgB9pD,GACZjT,KAAKy8D,YAAY1pE,EAAOC,KAAKigB,GACjC,CACA+pD,WAAW/pD,EAAO4+C,GACd7xD,KAAKo8D,cACLp8D,KAAKu8D,SAAStpD,EAAM9f,QACpB,IAAK,MAAMg9B,KAAQld,EACfjT,KAAKo8D,cACLvK,EAAG1hC,EAEX,CACAusC,UACI,OAAO18D,KAAK4f,IAAI1e,SAAS,EAAGlB,KAAK7M,OACrC,EAGJ,SAAS8pE,EAAmBpQ,EAAQqQ,EAAaC,GAC7C,MAAMC,EAAiBD,EAAmBvhE,MAC1CuhE,EAAmBvhE,MAAQ,WACvB,IAAI,QAAAmC,EAAAjJ,UAAA3B,OADgCkgC,EAAI,IAAAt6B,MAAAgF,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJo1B,EAAIp1B,GAAAnJ,UAAAmJ,GAEpC,OAAOm/D,EAAe1R,MAAM1rD,KAAMqzB,EACtC,CACA,MAAOl6B,GACH,GAAIA,aAAatF,WAAY,CACzB,MAAM6vC,EAAOvqC,EAAEuqC,KACf,GAAI,CAAC,2BAA4B,oBAAoBzJ,QAAQyJ,IAAS,EAClE,MAAM,IAAI63B,EAAW,+CAE7B,CACA,MAAMpiE,CACV,CACJ,CACJ,CAjBAuE,EAAQ49D,aAAeA,EAkBvB,MAAMD,EACFhoE,YAAYusB,GACR5f,KAAK4f,IAAMA,EACX5f,KAAKpM,OAAS,CAClB,CACAypE,SACI,MAAMzhE,EAAQoE,KAAK4f,IAAIyuC,UAAUruD,KAAKpM,QAEtC,OADAoM,KAAKpM,QAAU,EACRgI,CACX,CACA0hE,UACI,MAAM1hE,EAAQoE,KAAK4f,IAAI2uC,aAAavuD,KAAKpM,QAEzC,OADAoM,KAAKpM,QAAU,EACRgI,CACX,CACA2hE,UACI,MAAM3hE,EAAQoE,KAAK4f,IAAIjpB,aAAaqJ,KAAKpM,QAEzC,OADAoM,KAAKpM,QAAU,EACRgI,CACX,CACA4hE,UACI,MAAM59C,EAAM5f,KAAKy9D,WAAW,GAC5B,OAAO,IAAI/B,EAAQjuC,QAAQ7N,EAAK,KACpC,CACA89C,WACI,MAAM99C,EAAM5f,KAAKy9D,WAAW,IAC5B,OAAO,IAAI/B,EAAQjuC,QAAQ7N,EAAK,KACpC,CACA+9C,WACI,MAAM/9C,EAAM5f,KAAKy9D,WAAW,IAC5B,OAAO,IAAI/B,EAAQjuC,QAAQ7N,EAAK,KACpC,CACAg+C,WACI,MAAMh+C,EAAM5f,KAAKy9D,WAAW,IAC5B,OAAO,IAAI/B,EAAQjuC,QAAQ7N,EAAK,KACpC,CACA69C,WAAW18D,GACP,GAAIf,KAAKpM,OAASmN,EAAMf,KAAK4f,IAAIzsB,OAC7B,MAAM,IAAIooE,EAAY,0BAAyBx6D,yBAEnD,MAAM6R,EAAS5S,KAAK4f,IAAI7iB,MAAMiD,KAAKpM,OAAQoM,KAAKpM,OAASmN,GAEzD,OADAf,KAAKpM,QAAUmN,EACR6R,CACX,CACAirD,aACI,MAAM98D,EAAMf,KAAKu9D,UACX39C,EAAM5f,KAAKy9D,WAAW18D,GAC5B,IAEI,OAAO66D,EAAY5mE,OAAO4qB,EAC9B,CACA,MAAOzmB,GACH,MAAM,IAAIoiE,EAAY,gCAA+BpiE,IACzD,CACJ,CACA2kE,eAAe/8D,GACX,OAAO,IAAInO,WAAWoN,KAAKy9D,WAAW18D,GAC1C,CACAg9D,UAAUlM,GACN,MAAM9wD,EAAMf,KAAKu9D,UACX3qD,EAAS7Z,QACf,IAAK,IAAIR,EAAI,EAAGA,EAAIwI,IAAOxI,EACvBqa,EAAOpa,KAAKq5D,KAEhB,OAAOj/C,CACX,EAiCJ,SAASorD,EAAsBvhD,GAC3B,OAAOA,EAAO28C,OAAO,GAAG6E,cAAgBxhD,EAAO1f,MAAM,EACzD,CACA,SAASmhE,EAAexjD,EAAQyhD,EAAWvgE,EAAOuiE,EAAWC,GACzD,IAEI,GAAyB,kBAAdD,EACPC,EAAQ,QAAOJ,EAAsBG,MAAcviE,QAElD,GAAIuiE,aAAqBplE,MAC1B,GAA4B,kBAAjBolE,EAAU,GAAiB,CAClC,GAAIviE,EAAMzI,SAAWgrE,EAAU,GAC3B,MAAM,IAAI5C,EAAY,kCAAiC4C,EAAU,eAAeviE,EAAMzI,gBAE1FirE,EAAOrB,gBAAgBnhE,EAC3B,MACK,GAAyB,IAArBuiE,EAAUhrE,QAAwC,kBAAjBgrE,EAAU,GAAiB,CACjE,GAAIviE,EAAMzI,SAAWgrE,EAAU,GAC3B,MAAM,IAAI5C,EAAY,kCAAiC4C,EAAU,eAAeviE,EAAMzI,gBAE1F,IAAK,IAAIoF,EAAI,EAAGA,EAAI4lE,EAAU,GAAI5lE,IAC9B2lE,EAAexjD,EAAQ,KAAM9e,EAAMrD,GAAI4lE,EAAU,GAAIC,EAE7D,MAEIA,EAAOpB,WAAWphE,GAAQuS,IACtB+vD,EAAexjD,EAAQyhD,EAAWhuD,EAAMgwD,EAAU,GAAIC,EAAO,SAIpE,QAAuBrpE,IAAnBopE,EAAUzwC,KACf,OAAQywC,EAAUzwC,MACd,IAAK,SACa,OAAV9xB,QAA4B7G,IAAV6G,EAClBwiE,EAAO/B,QAAQ,IAGf+B,EAAO/B,QAAQ,GACf6B,EAAexjD,EAAQyhD,EAAWvgE,EAAOuiE,EAAUnkD,KAAMokD,IAE7D,MAEJ,IAAK,MACDA,EAAO7B,SAAS3gE,EAAMs0B,MACtBt0B,EAAMquB,SAAQ,CAAC5R,EAAKzC,KAChBsoD,EAAexjD,EAAQyhD,EAAWvmD,EAAKuoD,EAAUvoD,IAAKwoD,GACtDF,EAAexjD,EAAQyhD,EAAW9jD,EAAK8lD,EAAUviE,MAAOwiE,EAAO,IAEnE,MAEJ,QACI,MAAM,IAAI7C,EAAY,aAAY4C,uBAI1CE,EAAgB3jD,EAAQ9e,EAAOwiE,EAEvC,CACA,MAAO51C,GAIH,MAHIA,aAAiB+yC,GACjB/yC,EAAM0zC,eAAeC,GAEnB3zC,CACV,CACJ,CACA,SAAS61C,EAAgB3jD,EAAQqnB,EAAKq8B,GAClC,GAAkC,oBAAvBr8B,EAAIu8B,eAEX,YADAv8B,EAAIu8B,eAAeF,GAGvB,MAAMG,EAAe7jD,EAAOtY,IAAI2/B,EAAI1uC,aACpC,IAAKkrE,EACD,MAAM,IAAIhD,EAAY,SAAQx5B,EAAI1uC,YAAYkB,6BAElD,GAA0B,WAAtBgqE,EAAa7wC,KACb6wC,EAAa1lE,OAAOkM,KAAIssB,IAA4B,IAA1B8qC,EAAWgC,GAAU9sC,EAC3C6sC,EAAexjD,EAAQyhD,EAAWp6B,EAAIo6B,GAAYgC,EAAWC,EAAO,QAGvE,IAA0B,SAAtBG,EAAa7wC,KAYlB,MAAM,IAAI6tC,EAAY,2BAA0BgD,EAAa7wC,YAAYqU,EAAI1uC,YAAYkB,QAZtD,CACnC,MAAMA,EAAOwtC,EAAIw8B,EAAavuC,OAC9B,IAAK,IAAI13B,EAAM,EAAGA,EAAMimE,EAAalqE,OAAOlB,SAAUmF,EAAK,CACvD,MAAO6jE,EAAWgC,GAAaI,EAAalqE,OAAOiE,GACnD,GAAI6jE,IAAc5nE,EAAM,CACpB6pE,EAAO/B,QAAQ/jE,GACf4lE,EAAexjD,EAAQyhD,EAAWp6B,EAAIo6B,GAAYgC,EAAWC,GAC7D,KACJ,CACJ,CACJ,CAGA,CACJ,CASA,SAASI,EAAiB9jD,EAAQyhD,EAAWgC,EAAWM,GACpD,IACI,GAAyB,kBAAdN,EACP,OAAOM,EAAQ,OAAMT,EAAsBG,QAE/C,GAAIA,aAAqBplE,MAAO,CAC5B,GAA4B,kBAAjBolE,EAAU,GACjB,OAAOM,EAAOX,eAAeK,EAAU,IAEtC,GAA4B,kBAAjBA,EAAU,GAAiB,CACvC,MAAMh/D,EAAM,GACZ,IAAK,IAAI5G,EAAI,EAAGA,EAAI4lE,EAAU,GAAI5lE,IAC9B4G,EAAI3G,KAAKgmE,EAAiB9jD,EAAQ,KAAMyjD,EAAU,GAAIM,IAE1D,OAAOt/D,CACX,CAEI,OAAOs/D,EAAOV,WAAU,IAAMS,EAAiB9jD,EAAQyhD,EAAWgC,EAAU,GAAIM,IAExF,CACA,GAAuB,WAAnBN,EAAUzwC,KAAmB,CAE7B,OADe+wC,EAAOpB,SAEXmB,EAAiB9jD,EAAQyhD,EAAWgC,EAAUnkD,KAAMykD,QAE/D,CACJ,CACA,GAAuB,QAAnBN,EAAUzwC,KAAgB,CAC1B,IAAI3oB,EAAM,IAAIgW,IACd,MAAM5nB,EAASsrE,EAAOlB,UACtB,IAAK,IAAIhlE,EAAI,EAAGA,EAAIpF,EAAQoF,IAAK,CAC7B,MAAMqd,EAAM4oD,EAAiB9jD,EAAQyhD,EAAWgC,EAAUvoD,IAAK6oD,GACzDpmD,EAAMmmD,EAAiB9jD,EAAQyhD,EAAWgC,EAAUviE,MAAO6iE,GACjE15D,EAAI9D,IAAI2U,EAAKyC,EACjB,CACA,OAAOtT,CACX,CACA,OAAO25D,EAAkBhkD,EAAQyjD,EAAWM,EAChD,CACA,MAAOj2C,GAIH,MAHIA,aAAiB+yC,GACjB/yC,EAAM0zC,eAAeC,GAEnB3zC,CACV,CACJ,CACA,SAASk2C,EAAkBhkD,EAAQikD,EAAWF,GAC1C,GAA0C,oBAA/BE,EAAUC,iBACjB,OAAOD,EAAUC,iBAAiBH,GAEtC,MAAMF,EAAe7jD,EAAOtY,IAAIu8D,GAChC,IAAKJ,EACD,MAAM,IAAIhD,EAAY,SAAQoD,EAAUpqE,6BAE5C,GAA0B,WAAtBgqE,EAAa7wC,KAAmB,CAChC,MAAM9a,EAAS,CAAC,EAChB,IAAK,MAAOupD,EAAWgC,KAAczjD,EAAOtY,IAAIu8D,GAAW9lE,OACvD+Z,EAAOupD,GAAaqC,EAAiB9jD,EAAQyhD,EAAWgC,EAAWM,GAEvE,OAAO,IAAIE,EAAU/rD,EACzB,CACA,GAA0B,SAAtB2rD,EAAa7wC,KAAiB,CAC9B,MAAMp1B,EAAMmmE,EAAOpB,SACnB,GAAI/kE,GAAOimE,EAAalqE,OAAOlB,OAC3B,MAAM,IAAIooE,EAAY,eAAcjjE,qBAExC,MAAO6jE,EAAWgC,GAAaI,EAAalqE,OAAOiE,GAEnD,OAAO,IAAIqmE,EAAU,CAAE,CAACxC,GADLqC,EAAiB9jD,EAAQyhD,EAAWgC,EAAWM,IAEtE,CACA,MAAM,IAAIlD,EAAY,2BAA0BgD,EAAa7wC,YAAYixC,EAAUtrE,YAAYkB,OACnG,CA5MAqmE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,SAAU,MACrC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,UAAW,MACtC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,UAAW,MACtC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,UAAW,MACtC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,WAAY,MACvC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,WAAY,MACvC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,WAAY,MACvC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,aAAc,MACzC0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,iBAAkB,MAC7C0mE,EAAW,CACPqC,GACD5B,EAAannE,UAAW,YAAa,MACxCwJ,EAAQ29D,aAAeA,EAsGvB39D,EAAQguB,UALR,SAAmBhR,EAAQqnB,GACvB,MAAMq8B,EAAS,IADmBtpE,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGwmE,GAGrC,OADA+C,EAAgB3jD,EAAQqnB,EAAKq8B,GACtBA,EAAO1B,SAClB,EAmFAh/D,EAAQkuB,YARR,SAAqBlR,EAAQikD,EAAW1rE,GACpC,MAAMwrE,EAAS,IADmC3pE,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGumE,GAC3BpoE,GACpB2f,EAAS8rD,EAAkBhkD,EAAQikD,EAAWF,GACpD,GAAIA,EAAO7qE,OAASX,EAAOE,OACvB,MAAM,IAAIooE,EAAY,cAAatoE,EAAOE,OAASsrE,EAAO7qE,wCAE9D,OAAOgf,CACX,EAOAlV,EAAQmuB,qBAJR,SAA8BnR,EAAQikD,EAAW1rE,GAE7C,OAAOyrE,EAAkBhkD,EAAQikD,EADlB,IAD4C7pE,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGumE,GACpCpoE,GAE9B,mBCtbA,IAAI4rE,EAAQpsE,EAAQ,OAGpBwmE,EAAOv7D,QAAUmhE,EAFF,4FCCf,MAAMC,EAAOrsE,EAAAA,OAAAA,GACPssE,EAAkBtsE,EAAQ,OAc1BusE,EAAgB,SAASC,EAAY3kD,GACzC,KAAKta,gBAAgBg/D,GACnB,OAAO,IAAIA,EAAcC,EAAY3kD,GAGlCA,IACHA,EAAU,CAAC,GAGbta,KAAKsa,QAAU,CACb4kD,QAAoC,qBAApB5kD,EAAQ4kD,QAA0B5kD,EAAQ4kD,QAAU,KACpEC,SAAsC,qBAArB7kD,EAAQ6kD,SAA2B7kD,EAAQ6kD,SAAW,KACvEC,UAAwC,qBAAtB9kD,EAAQ8kD,UAA4B9kD,EAAQ8kD,UAAY,WAAa,OAAON,GAAQ,EACtGprC,QAAoC,qBAApBpZ,EAAQoZ,QAA0BpZ,EAAQoZ,QAAU,EACpE2rC,mBAA0D,mBAA/B/kD,EAAQ+kD,oBAAmC/kD,EAAQ+kD,oBAGhFr/D,KAAKi/D,WAAaA,CACpB,EAEAhG,EAAOv7D,QAAUshE,EAWjBA,EAAc9qE,UAAU8/C,QAAU,SAASE,EAAQvU,EAAQ4G,EAAI0N,GAC7D,MAAMh1C,EAAOe,KACb,IAAIg0C,EAAU,KAGd,MAAMsrB,EAAUvmE,MAAMC,QAAQk7C,IAA6B,oBAAXvU,EAEhD,GAA6B,IAAzB3/B,KAAKsa,QAAQoZ,SAAiB4rC,EAChC,MAAM,IAAIzsE,UAAU,0CAMtB,GAAGysE,IAFYA,GAAWprB,GAA4B,kBAAXA,GAAyC,oBAAXvU,EAGvEsU,EAAWtU,EACXqU,EAAUE,MACL,CACY,oBAAP3N,IACR0N,EAAW1N,EAEXA,OAAKxxC,GAGP,MAAMwqE,EAAkC,oBAAbtrB,EAE3B,IACED,EAAU+qB,EAAgB7qB,EAAQvU,EAAQ4G,EAAI,CAC5C64B,UAAWp/D,KAAKsa,QAAQ8kD,UACxB1rC,QAAS1zB,KAAKsa,QAAQoZ,QACtB2rC,mBAAoBr/D,KAAKsa,QAAQ+kD,oBAErC,CAAE,MAAM/xC,GACN,GAAGiyC,EACD,OAAOtrB,EAAS3mB,GAElB,MAAMA,CACR,CAGA,IAAIiyC,EACF,OAAOvrB,CAGX,CAEA,IAAI3zC,EACJ,IACEA,EAAUqZ,KAAKC,UAAUq6B,EAASh0C,KAAKsa,QAAQ6kD,SACjD,CAAE,MAAM7xC,GACN,OAAO2mB,EAAS3mB,EAClB,CAOA,OALAttB,KAAKi/D,WAAW5+D,GAAS,SAASitB,EAAKuZ,GACrC5nC,EAAKugE,eAAelyC,EAAKuZ,EAAUoN,EACrC,IAGOD,CACT,EASAgrB,EAAc9qE,UAAUsrE,eAAiB,SAASlyC,EAAKmyC,EAAcxrB,GACnE,GAAG3mB,EAED,YADA2mB,EAAS3mB,GAIX,IAAImyC,EAGF,OAAOxrB,IAGT,IAAIpN,EACJ,IACEA,EAAWntB,KAAKgmD,MAAMD,EAAcz/D,KAAKsa,QAAQ4kD,QACnD,CAAE,MAAM5xC,GACN,OAAO2mB,EAAS3mB,EAClB,CAEA,GAAuB,IAApB2mB,EAAS9gD,OAAc,CAIxB,GAAG4F,MAAMC,QAAQ6tC,GAAW,CAG1B,MAAM84B,EAAU,SAASt9D,GACvB,MAA4B,qBAAdA,EAAImmB,KACpB,EAEMo3C,EAAa,SAAUv9D,GAC3B,OAAQs9D,EAAQt9D,EAClB,EAEA,OAAO4xC,EAAS,KAAMpN,EAASzV,OAAOuuC,GAAU94B,EAASzV,OAAOwuC,GAElE,CAGE,OAAO3rB,EAAS,KAAMpN,EAASre,MAAOqe,EAASj0B,OAInD,CAEAqhC,EAAS,KAAMpN,EACjB,gCChKA,MAAMi4B,EAAOrsE,EAAAA,OAAAA,GA4DbwmE,EAAOv7D,QA7CiB,SAASw2C,EAAQvU,EAAQ4G,EAAIjsB,GACnD,GAAqB,kBAAX45B,EACR,MAAM,IAAIrhD,UAAUqhD,EAAS,qBAM/B,MAAMxgB,EAAqC,kBAH3CpZ,EAAUA,GAAW,CAAC,GAGSoZ,QAAuBpZ,EAAQoZ,QAAU,EACxE,GAAgB,IAAZA,GAA6B,IAAZA,EACnB,MAAM,IAAI7gC,UAAU6gC,EAAU,mBAGhC,MAAMsgB,EAAU,CACdE,OAAQA,GAOV,GAJe,IAAZxgB,IACDsgB,EAAQ1N,QAAU,OAGjB3G,EAAQ,CAET,GAAqB,kBAAXA,IAAwB5mC,MAAMC,QAAQ2mC,GAC9C,MAAM,IAAI9sC,UAAU8sC,EAAS,wCAE/BqU,EAAQrU,OAASA,CACnB,CAGA,GAAkB,qBAAR4G,EAAqB,CAC7B,MAAM64B,EAAyC,oBAAtB9kD,EAAQ8kD,UAA2B9kD,EAAQ8kD,UAAY,WAAa,OAAON,GAAQ,EAC5G9qB,EAAQzN,GAAK64B,EAAUprB,EAAS15B,EAClC,MAAuB,IAAZoZ,GAAwB,OAAP6S,EAEtBjsB,EAAQ+kD,qBACVrrB,EAAQzN,GAAK,MAGfyN,EAAQzN,GAAKA,EAGf,OAAOyN,CACT,sDCrDI6rB,EAAyBptE,EAAQ,OAKrCiL,EAAAA,OAAqB,EAErB,IAAIoiE,EAAeD,EAAuBptE,EAAQ,QAE9CstE,EAAqBF,EAAuBptE,EAAQ,QAEpDutE,EAAWH,EAAuBptE,EAAQ,QAE1CwtE,EAAmBJ,EAAuBptE,EAAQ,QAElDytE,EAAgBL,EAAuBptE,EAAQ,QAE/C0tE,EAAaN,EAAuBptE,EAAQ,QAE5C2tE,EAA8BP,EAAuBptE,EAAQ,QAE7D4tE,EAAmBR,EAAuBptE,EAAQ,QAElD6tE,EAAgB7tE,EAAQ,OAE5B,SAAS8tE,EAAaC,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZzF,UAA4BA,QAAQ0F,UAAW,OAAO,EAAO,GAAI1F,QAAQ0F,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhFxkE,QAAQlI,UAAUk0D,QAAQttD,KAAKkgE,QAAQ0F,UAAUtkE,QAAS,IAAI,WAAa,MAAY,CAAM,CAAE,MAAOjD,GAAK,OAAO,CAAO,CAAE,CAFvQ0nE,GAA6B,OAAO,WAAkC,IAAuDjuD,EAAnDkuD,GAAQ,EAAIT,EAA0B,SAAGG,GAAkB,GAAIC,EAA2B,CAAE,IAAIM,GAAY,EAAIV,EAA0B,SAAGrgE,MAAM3M,YAAauf,EAASooD,QAAQ0F,UAAUI,EAAOhsE,UAAWisE,EAAY,MAASnuD,EAASkuD,EAAMpV,MAAM1rD,KAAMlL,WAAc,OAAO,EAAIsrE,EAAqC,SAAGpgE,KAAM4S,EAAS,CAAG,CAI3d,IAAIouD,EAAsC,SAAUh+D,EAAG7J,GACrD,IAAIuP,EAAI,CAAC,EAET,IAAK,IAAIE,KAAK5F,EACRhP,OAAOE,UAAU2G,eAAeC,KAAKkI,EAAG4F,IAAMzP,EAAE8gC,QAAQrxB,GAAK,IAAGF,EAAEE,GAAK5F,EAAE4F,IAG/E,GAAS,MAAL5F,GAAqD,oBAAjChP,OAAOitE,sBAA2C,KAAI1oE,EAAI,EAAb,IAAgBqQ,EAAI5U,OAAOitE,sBAAsBj+D,GAAIzK,EAAIqQ,EAAEzV,OAAQoF,IAClIY,EAAE8gC,QAAQrxB,EAAErQ,IAAM,GAAKvE,OAAOE,UAAUgtE,qBAAqBpmE,KAAKkI,EAAG4F,EAAErQ,MAAKmQ,EAAEE,EAAErQ,IAAMyK,EAAE4F,EAAErQ,IADuB,CAGvH,OAAOmQ,CACT,EAGIy4D,EAA4B,SAAUC,IACxC,EAAIjB,EAAoB,SAAGgB,EAAcC,GAEzC,IAAIC,EAASd,EAAaY,GAW1B,SAASA,EAAaG,GACpB,IAAIC,EAEAr0C,EAAUp4B,UAAU3B,OAAS,QAAsB4B,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,sBAE9E0sE,EAAK1sE,UAAU3B,OAAS,QAAsB4B,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAE1EkvC,EAAsBlvC,UAAU3B,OAAS,EAAI2B,UAAU,QAAKC,GAChE,EAAIkrE,EAA0B,SAAGjgE,KAAMmhE,GAEvC,IAAIM,EAAiBD,EAAGp9B,YACpBA,OAAiC,IAAnBq9B,GAAmCA,EACjDC,EAAeF,EAAGl9B,UAClBA,OAA6B,IAAjBo9B,GAAiCA,EAC7CC,EAAwBH,EAAGj9B,mBAC3BA,OAA+C,IAA1Bo9B,EAAmC,IAAOA,EAC/DC,EAAoBJ,EAAGn9B,eACvBA,OAAuC,IAAtBu9B,EAA+B,EAAIA,EACpDC,EAAeb,EAAOQ,EAAI,CAAC,cAAe,YAAa,qBAAsB,mBA0BjF,OAxBAD,EAAQF,EAAOvmE,KAAKkF,OACdshE,iBAAmBA,EACzBC,EAAMO,MAAQ,CAAC,EACfP,EAAMQ,OAAS,EACfR,EAAMr0C,QAAUA,EAChBq0C,EAAMn9B,YAAcA,EACpBm9B,EAAMS,OAAQ,EACdT,EAAMj9B,UAAYA,EAClBi9B,EAAMU,wBAAqBltE,EAC3BwsE,EAAMh9B,mBAAqBA,EAC3Bg9B,EAAMl9B,eAAiBA,EACvBk9B,EAAMM,aAAeA,EACrBN,EAAMW,mBAAqB,EAE3BX,EAAMv9B,oBAAsBA,GAAuB,WACjD,QAASu9B,EAAMQ,MACjB,EAEIR,EAAMn9B,aAAam9B,EAAMY,SAASZ,EAAMr0C,QAASl5B,OAAOG,OAAO,CACjEiwC,YAAam9B,EAAMn9B,YACnBE,UAAWi9B,EAAMj9B,UACjBC,mBAAoBg9B,EAAMh9B,mBAC1BF,eAAgBk9B,EAAMl9B,gBACrBk9B,EAAMM,eACFN,CACT,CAiXA,OAzWA,EAAIrB,EAAuB,SAAGiB,EAAc,CAAC,CAC3CvrD,IAAK,UACLha,MAAO,WACDoE,KAAKykC,QAETzkC,KAAKmiE,SAASniE,KAAKktB,QAASl5B,OAAOG,OAAO,CACxCiwC,YAAapkC,KAAKokC,YAClBE,UAAWtkC,KAAKskC,UAChBC,mBAAoBvkC,KAAKukC,mBACzBF,eAAgBrkC,KAAKqkC,gBACpBrkC,KAAK6hE,cACV,GAWC,CACDjsD,IAAK,OACLha,MAAO,SAAcs4C,EAAQvU,EAAQyiC,EAASC,GAC5C,IAAIC,EAAStiE,KAOb,OALKqiE,GAAW,YAAa,EAAIrC,EAAkB,SAAGoC,KACpDC,EAAUD,EACVA,EAAU,MAGL,IAAI3kC,SAAQ,SAAUC,EAASkH,GACpC,IAAK09B,EAAON,MAAO,OAAOp9B,EAAO,IAAIjwC,MAAM,qBAE3C,IAAIotE,EAASO,EAAOt+B,oBAAoBkQ,EAAQvU,GAE5Ct/B,EAAU,CACZimC,QAAS,MACT4N,OAAQA,EACRvU,OAAQA,GAAU,KAClB4G,GAAIw7B,GAGNO,EAAO79B,OAAO89B,KAAK7oD,KAAKC,UAAUtZ,GAAUgiE,GAAS,SAAU75C,GAC7D,GAAIA,EAAO,OAAOoc,EAAOpc,GACzB85C,EAAOR,MAAMC,GAAU,CACrBS,QAAS,CAAC9kC,EAASkH,IAGjBw9B,IACFE,EAAOR,MAAMC,GAAQK,QAAUzkC,YAAW,kBACjC2kC,EAAOR,MAAMC,GACpBn9B,EAAO,IAAIjwC,MAAM,iBACnB,GAAGytE,GAEP,GACF,GACF,GAQC,CACDxsD,IAAK,QACLha,MAAO,WACL,IAAI6mE,GAAS,EAAI1C,EAA4B,SAAiBD,EAAsB,QAAE4C,MAAK,SAASC,EAAQhjC,GAC1G,IAAIijC,EACJ,OAAO9C,EAAsB,QAAE+C,MAAK,SAAkBC,GACpD,OACE,OAAQA,EAASC,KAAOD,EAASpnD,MAC/B,KAAK,EAEH,OADAonD,EAASpnD,KAAO,EACT1b,KAAKlF,KAAK,YAAa6kC,GAEhC,KAAK,EAGH,GAFAijC,EAAOE,EAASE,KAEN,CACRF,EAASpnD,KAAO,EAChB,KACF,CAEA,MAAM,IAAI/mB,MAAM,yBAElB,KAAK,EACH,OAAOmuE,EAASG,OAAO,SAAUL,GAEnC,KAAK,EACL,IAAK,MACH,OAAOE,EAASI,OAGxB,GAAGP,EAAS3iE,KACd,KAMA,OAJA,SAAekR,GACb,OAAOuxD,EAAO/W,MAAM1rD,KAAMlL,UAC5B,CAGF,CApCO,IA2CN,CACD8gB,IAAK,cACLha,MAAO,WACL,IAAIunE,GAAe,EAAIpD,EAA4B,SAAiBD,EAAsB,QAAE4C,MAAK,SAASU,IACxG,OAAOtD,EAAsB,QAAE+C,MAAK,SAAmBQ,GACrD,OACE,OAAQA,EAAUN,KAAOM,EAAU3nD,MACjC,KAAK,EAEH,OADA2nD,EAAU3nD,KAAO,EACV1b,KAAKlF,KAAK,iBAEnB,KAAK,EACH,OAAOuoE,EAAUJ,OAAO,SAAUI,EAAUL,MAE9C,KAAK,EACL,IAAK,MACH,OAAOK,EAAUH,OAGzB,GAAGE,EAAUpjE,KACf,KAMA,OAJA,WACE,OAAOmjE,EAAazX,MAAM1rD,KAAMlL,UAClC,CAGF,CAzBO,IAkCN,CACD8gB,IAAK,SACLha,MAAO,SAAgBs4C,EAAQvU,GAC7B,IAAI2jC,EAAStjE,KAEb,OAAO,IAAIy9B,SAAQ,SAAUC,EAASkH,GACpC,IAAK0+B,EAAOtB,MAAO,OAAOp9B,EAAO,IAAIjwC,MAAM,qBAC3C,IAAI0L,EAAU,CACZimC,QAAS,MACT4N,OAAQA,EACRvU,OAAQA,GAAU,MAGpB2jC,EAAO7+B,OAAO89B,KAAK7oD,KAAKC,UAAUtZ,IAAU,SAAUmoB,GACpD,GAAIA,EAAO,OAAOoc,EAAOpc,GACzBkV,GACF,GACF,GACF,GASC,CACD9nB,IAAK,YACLha,MAAO,WACL,IAAI2nE,GAAa,EAAIxD,EAA4B,SAAiBD,EAAsB,QAAE4C,MAAK,SAASc,EAASC,GAC/G,IAAI7wD,EACJ,OAAOktD,EAAsB,QAAE+C,MAAK,SAAmBa,GACrD,OACE,OAAQA,EAAUX,KAAOW,EAAUhoD,MACjC,KAAK,EAGH,MAFqB,kBAAV+nD,IAAoBA,EAAQ,CAACA,IACxCC,EAAUhoD,KAAO,EACV1b,KAAKlF,KAAK,SAAU2oE,GAE7B,KAAK,EAGH,GAFA7wD,EAAS8wD,EAAUV,KAEI,kBAAVS,GAAwC,OAAlB7wD,EAAO6wD,GAAkB,CAC1DC,EAAUhoD,KAAO,EACjB,KACF,CAEA,MAAM,IAAI/mB,MAAM,mCAAqC8uE,EAAQ,WAAa7wD,EAAO6wD,IAEnF,KAAK,EACH,OAAOC,EAAUT,OAAO,SAAUrwD,GAEpC,KAAK,EACL,IAAK,MACH,OAAO8wD,EAAUR,OAGzB,GAAGM,EAAUxjE,KACf,KAMA,OAJA,SAAmB2jE,GACjB,OAAOJ,EAAW7X,MAAM1rD,KAAMlL,UAChC,CAGF,CArCO,IA8CN,CACD8gB,IAAK,cACLha,MAAO,WACL,IAAIgoE,GAAe,EAAI7D,EAA4B,SAAiBD,EAAsB,QAAE4C,MAAK,SAASmB,EAASJ,GACjH,IAAI7wD,EACJ,OAAOktD,EAAsB,QAAE+C,MAAK,SAAmBiB,GACrD,OACE,OAAQA,EAAUf,KAAOe,EAAUpoD,MACjC,KAAK,EAGH,MAFqB,kBAAV+nD,IAAoBA,EAAQ,CAACA,IACxCK,EAAUpoD,KAAO,EACV1b,KAAKlF,KAAK,UAAW2oE,GAE9B,KAAK,EAGH,GAFA7wD,EAASkxD,EAAUd,KAEI,kBAAVS,GAAwC,OAAlB7wD,EAAO6wD,GAAkB,CAC1DK,EAAUpoD,KAAO,EACjB,KACF,CAEA,MAAM,IAAI/mB,MAAM,4CAA8Cie,GAEhE,KAAK,EACH,OAAOkxD,EAAUb,OAAO,SAAUrwD,GAEpC,KAAK,EACL,IAAK,MACH,OAAOkxD,EAAUZ,OAGzB,GAAGW,EAAU7jE,KACf,KAMA,OAJA,SAAqB+jE,GACnB,OAAOH,EAAalY,MAAM1rD,KAAMlL,UAClC,CAGF,CArCO,IA8CN,CACD8gB,IAAK,QACLha,MAAO,SAAe8nC,EAAMhkC,GAC1BM,KAAKykC,OAAO8Z,MAAM7a,GAAQ,IAAMhkC,EAClC,GAUC,CACDkW,IAAK,WACLha,MAAO,SAAkBsxB,EAAS5S,GAChC,IAAI0pD,EAAShkE,KAEbs6C,aAAat6C,KAAKiiE,oBAClBjiE,KAAKykC,OAASzkC,KAAKshE,iBAAiBp0C,EAAS5S,GAC7Cta,KAAKykC,OAAOoT,iBAAiB,QAAQ,WACnCmsB,EAAOhC,OAAQ,EAEfgC,EAAO1N,KAAK,QAEZ0N,EAAO9B,mBAAqB,CAC9B,IACAliE,KAAKykC,OAAOoT,iBAAiB,WAAW,SAAUxmB,GAChD,IAAIhxB,EAAUgxB,EAAK3xB,KACfW,aAAmBunD,cAAavnD,EAAUtN,EAAOC,KAAKqN,GAASnD,YAEnE,IACEmD,EAAUqZ,KAAKgmD,MAAMr/D,EACvB,CAAE,MAAOmoB,GACP,MACF,CAGA,GAAInoB,EAAQ2+C,cAAgBglB,EAAOC,UAAU5jE,EAAQ2+C,cAAc7rD,OAAQ,CACzE,IAAKa,OAAO4oB,KAAKvc,EAAQs/B,QAAQxsC,OAAQ,OAAO6wE,EAAO1N,KAAKj2D,EAAQ2+C,cACpE,IAAI3rB,EAAO,CAAChzB,EAAQ2+C,cACpB,GAAI3+C,EAAQs/B,OAAOtsC,cAAgBW,OAAQq/B,EAAK76B,KAAK6H,EAAQs/B,aAC3D,IAAK,IAAIpnC,EAAI,EAAGA,EAAI8H,EAAQs/B,OAAOxsC,OAAQoF,IACzC86B,EAAK76B,KAAK6H,EAAQs/B,OAAOpnC,IAI7B,OAAOklC,QAAQC,UAAUwY,MAAK,WAC5B8tB,EAAO1N,KAAK5K,MAAMsY,EAAQ3wC,EAC5B,GACF,CAEA,IAAK2wC,EAAOlC,MAAMzhE,EAAQkmC,IAExB,OAAIlmC,EAAQ6zC,QAAU7zC,EAAQs/B,OAErBlC,QAAQC,UAAUwY,MAAK,WAC5B8tB,EAAO1N,KAAKj2D,EAAQ6zC,OAAQ7zC,EAAQs/B,OACtC,SAGF,EAIE,UAAWt/B,IAAY,WAAYA,GAAS2jE,EAAOlC,MAAMzhE,EAAQkmC,IAAIi8B,QAAQ,GAAG,IAAI7tE,MAAM,+FAC1FqvE,EAAOlC,MAAMzhE,EAAQkmC,IAAI67B,SAAS9nB,aAAa0pB,EAAOlC,MAAMzhE,EAAQkmC,IAAI67B,SACxE/hE,EAAQmoB,MAAOw7C,EAAOlC,MAAMzhE,EAAQkmC,IAAIi8B,QAAQ,GAAGniE,EAAQmoB,OAAYw7C,EAAOlC,MAAMzhE,EAAQkmC,IAAIi8B,QAAQ,GAAGniE,EAAQuS,eAChHoxD,EAAOlC,MAAMzhE,EAAQkmC,GAC9B,IACAvmC,KAAKykC,OAAOoT,iBAAiB,SAAS,SAAUrvB,GAC9C,OAAOw7C,EAAO1N,KAAK,QAAS9tC,EAC9B,IACAxoB,KAAKykC,OAAOoT,iBAAiB,SAAS,SAAUtmB,GAC9C,IAAImS,EAAOnS,EAAMmS,KACb6T,EAAShmB,EAAMgmB,OACfysB,EAAOhC,OACTrkC,YAAW,WACT,OAAOqmC,EAAO1N,KAAK,QAAS5yB,EAAM6T,EACpC,GAAG,GACLysB,EAAOhC,OAAQ,EACfgC,EAAOv/B,YAAS1vC,EACH,MAAT2uC,IACJsgC,EAAO9B,qBACH8B,EAAO1/B,YAAc0/B,EAAO3/B,eAAiB2/B,EAAO9B,oBAAgD,IAA1B8B,EAAO3/B,kBAAuB2/B,EAAO/B,mBAAqBtkC,YAAW,WACjJ,OAAOqmC,EAAO7B,SAASj1C,EAAS5S,EAClC,GAAG0pD,EAAOz/B,qBACZ,GACF,KAEK48B,CACT,CA7agC,CA6a9Bb,EAAc4D,cAEhBxmE,EAAAA,EAAqByjE,oCC3djBtB,EAAyBptE,EAAQ,OAKrCiL,EAAAA,EA4GA,SAAkBwvB,EAAS5S,GACzB,OAAO,IAAI6pD,EAAqBj3C,EAAS5S,EAC3C,EA5GA,IAAI2lD,EAAmBJ,EAAuBptE,EAAQ,QAElDytE,EAAgBL,EAAuBptE,EAAQ,QAE/C0tE,EAAaN,EAAuBptE,EAAQ,QAE5C2tE,EAA8BP,EAAuBptE,EAAQ,QAE7D4tE,EAAmBR,EAAuBptE,EAAQ,QAItD,SAAS8tE,EAAaC,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZzF,UAA4BA,QAAQ0F,UAAW,OAAO,EAAO,GAAI1F,QAAQ0F,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhFxkE,QAAQlI,UAAUk0D,QAAQttD,KAAKkgE,QAAQ0F,UAAUtkE,QAAS,IAAI,WAAa,MAAY,CAAM,CAAE,MAAOjD,GAAK,OAAO,CAAO,CAAE,CAFvQ0nE,GAA6B,OAAO,WAAkC,IAAuDjuD,EAAnDkuD,GAAQ,EAAIT,EAA0B,SAAGG,GAAkB,GAAIC,EAA2B,CAAE,IAAIM,GAAY,EAAIV,EAA0B,SAAGrgE,MAAM3M,YAAauf,EAASooD,QAAQ0F,UAAUI,EAAOhsE,UAAWisE,EAAY,MAASnuD,EAASkuD,EAAMpV,MAAM1rD,KAAMlL,WAAc,OAAO,EAAIsrE,EAAqC,SAAGpgE,KAAM4S,EAAS,CAAG,CAI3d,IAAIuxD,EAAoC,SAAU/C,IAChD,EAAIjB,EAAoB,SAAGgE,EAAsB/C,GAEjD,IAAIC,EAASd,EAAa4D,GAS1B,SAASA,EAAqBj3C,EAAS5S,EAAS8pD,GAC9C,IAAI7C,EAsBJ,OApBA,EAAItB,EAA0B,SAAGjgE,KAAMmkE,IACvC5C,EAAQF,EAAOvmE,KAAKkF,OACdykC,OAAS,IAAI34B,OAAOu4D,UAAUn3C,EAASk3C,GAE7C7C,EAAM98B,OAAO6/B,OAAS,WACpB,OAAO/C,EAAMjL,KAAK,OACpB,EAEAiL,EAAM98B,OAAO8/B,UAAY,SAAUd,GACjC,OAAOlC,EAAMjL,KAAK,UAAWmN,EAAM/jE,KACrC,EAEA6hE,EAAM98B,OAAO+/B,QAAU,SAAUh8C,GAC/B,OAAO+4C,EAAMjL,KAAK,QAAS9tC,EAC7B,EAEA+4C,EAAM98B,OAAOggC,QAAU,SAAUhB,GAC/BlC,EAAMjL,KAAK,QAASmN,EAAM//B,KAAM+/B,EAAMlsB,OACxC,EAEOgqB,CACT,CA2CA,OAhCA,EAAIrB,EAAuB,SAAGiE,EAAsB,CAAC,CACnDvuD,IAAK,OACLha,MAAO,SAAc8D,EAAMglE,EAAmBzwB,GAC5C,IAAImK,EAAKnK,GAAYywB,EAErB,IACE1kE,KAAKykC,OAAO89B,KAAK7iE,GACjB0+C,GACF,CAAE,MAAO51B,GACP41B,EAAG51B,EACL,CACF,GAUC,CACD5S,IAAK,QACLha,MAAO,SAAe8nC,EAAM6T,GAC1Bv3C,KAAKykC,OAAO8Z,MAAM7a,EAAM6T,EAC1B,GACC,CACD3hC,IAAK,mBACLha,MAAO,SAA0Boe,EAAM2qD,EAAUrqD,GAC/Cta,KAAKykC,OAAOoT,iBAAiB79B,EAAM2qD,EAAUrqD,EAC/C,KAEK6pD,CACT,CAhFwC,CANpB1xE,EAAQ,OAsFZyxE,4CC1GhB,IAAItsD,oBACJ,IAAIgtD,EAAQ,IAAIhyE,WAAW,IACZ,SAASiyE,IAEtB,IAAKjtD,KAGHA,EAAoC,qBAAX1Y,QAA0BA,OAAO0Y,iBAAmB1Y,OAAO0Y,gBAAgBrd,KAAK2E,SAA+B,qBAAb4lE,UAAgE,oBAA7BA,SAASltD,iBAAkCktD,SAASltD,gBAAgBrd,KAAKuqE,WAGrO,MAAM,IAAInwE,MAAM,4GAIpB,OAAOijB,EAAgBgtD,EACzB,CClBA,8HCMA,QAJA,SAAkB9F,GAChB,MAAuB,kBAATA,GAAqBiG,EAAAA,KAAWjG,EAChD,ECIA,IAFA,IAAIkG,EAAY,GAEPzsE,EAAI,EAAGA,EAAI,MAAOA,EACzBysE,EAAUxsE,MAAMD,EAAI,KAAO2E,SAAS,IAAIumD,OAAO,IAoBjD,QAjBA,SAAmBtkD,GACjB,IAAIvL,EAASkB,UAAU3B,OAAS,QAAsB4B,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,EAG7EgqE,GAAQkG,EAAU7lE,EAAIvL,EAAS,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAM,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAM,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAM,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAMoxE,EAAU7lE,EAAIvL,EAAS,IAAM,IAAMoxE,EAAU7lE,EAAIvL,EAAS,KAAOoxE,EAAU7lE,EAAIvL,EAAS,KAAOoxE,EAAU7lE,EAAIvL,EAAS,KAAOoxE,EAAU7lE,EAAIvL,EAAS,KAAOoxE,EAAU7lE,EAAIvL,EAAS,KAAOoxE,EAAU7lE,EAAIvL,EAAS,MAAMk1D,cAMzf,IAAK1tC,EAAS0jD,GACZ,MAAMjsE,UAAU,+BAGlB,OAAOisE,CACT,ECJA,QApBA,SAAYxkD,EAASsF,EAAKhsB,GAExB,IAAIqxE,GADJ3qD,EAAUA,GAAW,CAAC,GACH4qD,SAAW5qD,EAAQuqD,KAAOA,KAK7C,GAHAI,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBrlD,EAAK,CACPhsB,EAASA,GAAU,EAEnB,IAAK,IAAI2E,EAAI,EAAGA,EAAI,KAAMA,EACxBqnB,EAAIhsB,EAAS2E,GAAK0sE,EAAK1sE,GAGzB,OAAOqnB,CACT,CAEA,OAAOjG,EAAUsrD,EACnB,aCfAhM,EAAOv7D,QANP,SAAgCuB,GAC9B,QAAa,IAATA,EACF,MAAM,IAAIkmE,eAAe,6DAE3B,OAAOlmE,CACT,EACyCg6D,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,mBCN9G,SAAS0nE,EAAmBlmD,EAAKwe,EAASkH,EAAQkwB,EAAOuQ,EAAQzvD,EAAK6gC,GACpE,IACE,IAAI/C,EAAOx0B,EAAItJ,GAAK6gC,GAChB76C,EAAQ83C,EAAK93C,KACnB,CAAE,MAAO4sB,GAEP,YADAoc,EAAOpc,EAET,CACIkrB,EAAKj4B,KACPiiB,EAAQ9hC,GAER6hC,QAAQC,QAAQ9hC,GAAOs6C,KAAK4e,EAAOuQ,EAEvC,CAiBApM,EAAOv7D,QAhBP,SAA2Bm0D,GACzB,OAAO,WACL,IAAI5yD,EAAOe,KACTqzB,EAAOv+B,UACT,OAAO,IAAI2oC,SAAQ,SAAUC,EAASkH,GACpC,IAAI1lB,EAAM2yC,EAAGnG,MAAMzsD,EAAMo0B,GACzB,SAASyhC,EAAMl5D,GACbwpE,EAAmBlmD,EAAKwe,EAASkH,EAAQkwB,EAAOuQ,EAAQ,OAAQzpE,EAClE,CACA,SAASypE,EAAO/3C,GACd83C,EAAmBlmD,EAAKwe,EAASkH,EAAQkwB,EAAOuQ,EAAQ,QAAS/3C,EACnE,CACAwnC,OAAM//D,EACR,GACF,CACF,EACoCkkE,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,mBCzBzGu7D,EAAOv7D,QALP,SAAyBe,EAAU6mE,GACjC,KAAM7mE,aAAoB6mE,GACxB,MAAM,IAAIzyE,UAAU,oCAExB,EACkComE,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,yBCLvG,IAAI6nE,EAAgB,EAAQ,OAC5B,SAASC,EAAkB3Y,EAAQ1xC,GACjC,IAAK,IAAI5iB,EAAI,EAAGA,EAAI4iB,EAAMhoB,OAAQoF,IAAK,CACrC,IAAIktE,EAAatqD,EAAM5iB,GACvBktE,EAAWzZ,WAAayZ,EAAWzZ,aAAc,EACjDyZ,EAAWrtD,cAAe,EACtB,UAAWqtD,IAAYA,EAAWn3C,UAAW,GACjDt6B,OAAO65B,eAAeg/B,EAAQ0Y,EAAcE,EAAW7vD,KAAM6vD,EAC/D,CACF,CASAxM,EAAOv7D,QARP,SAAsB4nE,EAAaI,EAAYC,GAM7C,OALID,GAAYF,EAAkBF,EAAYpxE,UAAWwxE,GACrDC,GAAaH,EAAkBF,EAAaK,GAChD3xE,OAAO65B,eAAey3C,EAAa,YAAa,CAC9Ch3C,UAAU,IAELg3C,CACT,EAC+BrM,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,mBClBpG,SAASkoE,EAAgBlL,GAIvB,OAHAzB,EAAOv7D,QAAUkoE,EAAkB5xE,OAAOszD,eAAiBtzD,OAAO6rB,eAAetlB,OAAS,SAAyBmgE,GACjH,OAAOA,EAAEmL,WAAa7xE,OAAO6rB,eAAe66C,EAC9C,EAAGzB,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,QACjEkoE,EAAgBlL,EACzB,CACAzB,EAAOv7D,QAAUkoE,EAAiB3M,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,yBCNvG,IAAI4pD,EAAiB,EAAQ,MAiB7B2R,EAAOv7D,QAhBP,SAAmBooE,EAAUC,GAC3B,GAA0B,oBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIlzE,UAAU,sDAEtBizE,EAAS5xE,UAAYF,OAAOC,OAAO8xE,GAAcA,EAAW7xE,UAAW,CACrEb,YAAa,CACXuI,MAAOkqE,EACPx3C,UAAU,EACVlW,cAAc,KAGlBpkB,OAAO65B,eAAei4C,EAAU,YAAa,CAC3Cx3C,UAAU,IAERy3C,GAAYze,EAAewe,EAAUC,EAC3C,EAC4B9M,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,mBCZjGu7D,EAAOv7D,QALP,SAAgCqkC,GAC9B,OAAOA,GAAOA,EAAIo5B,WAAap5B,EAAM,CACnC,QAAWA,EAEf,EACyCk3B,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,yBCL9G,IAAIsoE,EAAU,iBACVC,EAAwB,EAAQ,OASpChN,EAAOv7D,QARP,SAAoCuB,EAAMnE,GACxC,GAAIA,IAA2B,WAAlBkrE,EAAQlrE,IAAsC,oBAATA,GAChD,OAAOA,EACF,QAAa,IAATA,EACT,MAAM,IAAIjI,UAAU,4DAEtB,OAAOozE,EAAsBhnE,EAC/B,EAC6Cg6D,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,kBCVlH,SAASwoE,EAAgBxL,EAAG9xD,GAK1B,OAJAqwD,EAAOv7D,QAAUwoE,EAAkBlyE,OAAOszD,eAAiBtzD,OAAOszD,eAAe/sD,OAAS,SAAyBmgE,EAAG9xD,GAEpH,OADA8xD,EAAEmL,UAAYj9D,EACP8xD,CACT,EAAGzB,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,QACjEwoE,EAAgBxL,EAAG9xD,EAC5B,CACAqwD,EAAOv7D,QAAUwoE,EAAiBjN,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,yBCPvG,IAAIsoE,EAAU,iBAWd/M,EAAOv7D,QAVP,SAAsB8d,EAAO2qD,GAC3B,GAAuB,WAAnBH,EAAQxqD,IAAiC,OAAVA,EAAgB,OAAOA,EAC1D,IAAI4qD,EAAO5qD,EAAMrB,OAAOsuC,aACxB,QAAa1zD,IAATqxE,EAAoB,CACtB,IAAI/jE,EAAM+jE,EAAKtrE,KAAK0gB,EAAO2qD,GAAQ,WACnC,GAAqB,WAAjBH,EAAQ3jE,GAAmB,OAAOA,EACtC,MAAM,IAAIxP,UAAU,+CACtB,CACA,OAAiB,WAATszE,EAAoB/oE,OAAS5J,QAAQgoB,EAC/C,EAC+By9C,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,yBCXpG,IAAIsoE,EAAU,iBACVvd,EAAc,EAAQ,OAK1BwQ,EAAOv7D,QAJP,SAAwB+4C,GACtB,IAAI7gC,EAAM6yC,EAAYhS,EAAK,UAC3B,MAAwB,WAAjBuvB,EAAQpwD,GAAoBA,EAAMxY,OAAOwY,EAClD,EACiCqjD,EAAOv7D,QAAQy9D,YAAa,EAAMlC,EAAOv7D,QAAiB,QAAIu7D,EAAOv7D,sCCStG,SAAS2oE,EAAQ1+D,EAAG5I,EAAK0W,GACvB,OAAO1W,GAAO4I,GAAKA,GAAK8N,CAC1B,CAMA,SAAS6wD,EAAa5L,GACpB,QAAU3lE,IAAN2lE,EAAiB,MAAO,CAAC,EAC7B,GAAIA,IAAM1mE,OAAO0mE,GAAI,OAAOA,EAC5B,MAAM7nE,UAAU,2CAClB,qDAsHI,IAAI0zE,GAAiB,EASzB,SAASC,EAAOC,GAEdzmE,KAAKymE,OAAS,GAAG1pE,MAAMjC,KAAK2rE,EAC9B,CAEAD,EAAOtyE,UAAY,CAIjBwyE,YAAa,WACX,OAAQ1mE,KAAKymE,OAAOtzE,MACtB,EAUC42D,KAAM,WACL,OAAK/pD,KAAKymE,OAAOtzE,OAET6M,KAAKymE,OAAO/sE,QADX6sE,CAEV,EASDI,QAAS,SAASC,GAChB,GAAI7tE,MAAMC,QAAQ4tE,GAEhB,IADA,IAAIH,EAAsCG,EACnCH,EAAOtzE,QACZ6M,KAAKymE,OAAO5sC,QAAQ4sC,EAAOI,YAE7B7mE,KAAKymE,OAAO5sC,QAAQ+sC,EAExB,EASApuE,KAAM,SAASouE,GACb,GAAI7tE,MAAMC,QAAQ4tE,GAEhB,IADA,IAAIH,EAAsCG,EACnCH,EAAOtzE,QACZ6M,KAAKymE,OAAOjuE,KAAKiuE,EAAO/sE,cAE1BsG,KAAKymE,OAAOjuE,KAAKouE,EAErB,GAUF,IAAIhoE,GAAY,EAOhB,SAASkoE,EAAahL,EAAOiL,GAC3B,GAAIjL,EACF,MAAMjpE,UAAU,iBAClB,OAAOk0E,GAAkB,KAC3B,CA8Bc,IAAIC,EAAmB,QAUrC,SAASnL,EAAY7kB,EAAU18B,GAC7B,KAAMta,gBAAgB67D,GACpB,OAAO,IAAIA,EAAY7kB,EAAU18B,GAGnC,IADA08B,OAAwBjiD,IAAbiiD,EAAyB55C,OAAO45C,GAAU8R,cAAgBke,KACpDA,EACf,MAAM,IAAIryE,MAAM,mDAElB2lB,EAAUgsD,EAAahsD,GAGvBta,KAAKinE,YAAa,EAElBjnE,KAAKknE,UAAW,EAEhBlnE,KAAKmnE,SAAW,KAEhBnnE,KAAKonE,OAAShrE,QAAQke,EAAe,OAErCta,KAAKqnE,WAAajrE,QAAQke,EAAmB,WAE7CtmB,OAAO65B,eAAe7tB,KAAM,WAAY,CAACpE,MAAO,UAChD5H,OAAO65B,eAAe7tB,KAAM,QAAS,CAACpE,MAAOoE,KAAKonE,SAClDpzE,OAAO65B,eAAe7tB,KAAM,YAAa,CAACpE,MAAOoE,KAAKqnE,YACxD,CA4FA,SAASznE,EAAYo3C,EAAU18B,GAC7B,KAAMta,gBAAgBJ,GACpB,OAAO,IAAIA,EAAYo3C,EAAU18B,GAEnC,IADA08B,OAAwBjiD,IAAbiiD,EAAyB55C,OAAO45C,GAAU8R,cAAgBke,KACpDA,EACf,MAAM,IAAIryE,MAAM,mDAElB2lB,EAAUgsD,EAAahsD,GAGvBta,KAAKinE,YAAa,EAElBjnE,KAAKsnE,SAAW,KAEhBtnE,KAAKunE,SAAW,CAACzL,MAAO1/D,QAAQke,EAAe,QAE/CtmB,OAAO65B,eAAe7tB,KAAM,WAAY,CAACpE,MAAO,SAClD,CA2DA,SAAS4rE,EAAYltD,GACnB,IAAIwhD,EAAQxhD,EAAQwhD,MAMM2L,EAAkB,EAClBC,EAAkB,EAClBC,EAAoB,EACpBC,EAAsB,IACtBC,EAAsB,IAShD7nE,KAAK6yD,QAAU,SAASiV,EAAQC,GAG9B,GAAIA,IAASxB,GAAuC,IAAtBoB,EAE5B,OADAA,EAAoB,EACbb,EAAahL,GAItB,GAAIiM,IAASxB,EACX,OAAO3nE,EAGT,GAA0B,IAAtB+oE,EAAyB,CAG3B,GAAItB,EAAQ0B,EAAM,EAAM,KAEtB,OAAOA,EAIT,GAAI1B,EAAQ0B,EAAM,IAAM,KAGtBJ,EAAoB,EACpBF,EAAkBM,EAAO,SAItB,GAAI1B,EAAQ0B,EAAM,IAAM,KAEd,MAATA,IACFH,EAAsB,KAEX,MAATG,IACFF,EAAsB,KAGxBF,EAAoB,EACpBF,EAAkBM,EAAO,QAItB,KAAI1B,EAAQ0B,EAAM,IAAM,KAgB3B,OAAOjB,EAAahL,GAdP,MAATiM,IACFH,EAAsB,KAEX,MAATG,IACFF,EAAsB,KAGxBF,EAAoB,EACpBF,EAAkBM,EAAO,GAO3B,CAMA,OADAN,IAAsC,EAAIE,EACnC,IACT,CAIA,IAAKtB,EAAQ0B,EAAMH,EAAqBC,GAatC,OARAJ,EAAkBE,EAAoBD,EAAkB,EACxDE,EAAsB,IACtBC,EAAsB,IAGtBC,EAAOnB,QAAQoB,GAGRjB,EAAahL,GAgBtB,GAXA8L,EAAsB,IACtBC,EAAsB,IAMtBJ,GAAoBM,EAAO,KAAU,GAAKJ,GAD1CD,GAAmB,IAKfA,IAAoBC,EACtB,OAAO,KAGT,IAAIK,EAAaP,EAOjB,OAHAA,EAAkBE,EAAoBD,EAAkB,EAGjDM,CACT,CACF,CAOA,SAASC,EAAY3tD,GACPA,EAAQwhD,MAMpB97D,KAAK6yD,QAAU,SAASiV,EAAQE,GAE9B,GAAIA,IAAezB,EACjB,OAAO3nE,EAIT,GAAIynE,EAAQ2B,EAAY,EAAQ,KAC9B,OAAOA,EAGT,IAAI3vE,EAAOzE,EAEPyyE,EAAQ2B,EAAY,IAAQ,OAC9B3vE,EAAQ,EACRzE,EAAS,KAGFyyE,EAAQ2B,EAAY,KAAQ,QACnC3vE,EAAQ,EACRzE,EAAS,KAGFyyE,EAAQ2B,EAAY,MAAS,WACpC3vE,EAAQ,EACRzE,EAAS,KAQX,IAHA,IAAIkK,EAAQ,EAAEkqE,GAAe,EAAI3vE,GAAUzE,GAGpCyE,EAAQ,GAAG,CAGhB,IAAI6vE,EAAOF,GAAe,GAAK3vE,EAAQ,GAGvCyF,EAAMtF,KAAK,IAAe,GAAP0vE,GAGnB7vE,GAAS,CACX,CAGA,OAAOyF,CACT,CACF,CA1WA+9D,EAAY3nE,UAAY,CAMtBc,OAAQ,SAAgBwmB,EAAOlB,GAC7B,IAAIxc,EAEFA,EADmB,kBAAV0d,GAAsBA,aAAiBosC,YACxC,IAAIh1D,WAAW4oB,GACG,kBAAVA,GAAsB,WAAYA,GACzCA,EAAMvoB,kBAAkB20D,YACzB,IAAIh1D,WAAW4oB,EAAMvoB,OACNuoB,EAAMtoB,WACNsoB,EAAMnc,YAErB,IAAIzM,WAAW,GAGzB0nB,EAAUgsD,EAAahsD,GAElBta,KAAKinE,aACRjnE,KAAKmnE,SAAW,IAAIK,EAAY,CAAC1L,MAAO97D,KAAKonE,SAC7CpnE,KAAKknE,UAAW,GAElBlnE,KAAKinE,WAAa7qE,QAAQke,EAAgB,QAS1C,IAPA,IAKI1H,EALAu1D,EAAe,IAAI3B,EAAO1oE,GAE1BsqE,EAAc,IAKVD,EAAazB,gBACnB9zD,EAAS5S,KAAKmnE,SAAStU,QAAQsV,EAAcA,EAAape,WAC3CnrD,GAEA,OAAXgU,IAEA7Z,MAAMC,QAAQ4Z,GAChBw1D,EAAY5vE,KAAKkzD,MAAM0c,EAA0Cx1D,GAEjEw1D,EAAY5vE,KAAKoa,IAErB,IAAK5S,KAAKinE,WAAY,CACpB,EAAG,CAED,IADAr0D,EAAS5S,KAAKmnE,SAAStU,QAAQsV,EAAcA,EAAape,WAC3CnrD,EACb,MACa,OAAXgU,IAEA7Z,MAAMC,QAAQ4Z,GAChBw1D,EAAY5vE,KAAKkzD,MAAM0c,EAA0Cx1D,GAEjEw1D,EAAY5vE,KAAKoa,GACrB,QAAUu1D,EAAazB,eACvB1mE,KAAKmnE,SAAW,IAClB,CAoBA,OAlBIiB,EAAYj1E,UAI4B,IAAtC,CAAC,SAAS8mC,QAAQj6B,KAAKg3C,WACtBh3C,KAAKqnE,YAAernE,KAAKknE,WAEL,QAAnBkB,EAAY,IACdpoE,KAAKknE,UAAW,EAChBkB,EAAY1uE,SAIZsG,KAAKknE,UAAW,IAjQ1B,SAA4BkB,GAE1B,IADA,IAAIplE,EAAI,GACCzK,EAAI,EAAGA,EAAI6vE,EAAYj1E,SAAUoF,EAAG,CAC3C,IAAI8vE,EAAKD,EAAY7vE,GACjB8vE,GAAM,MACRrlE,GAAK5F,OAAOquD,aAAa4c,IAEzBA,GAAM,MACNrlE,GAAK5F,OAAOquD,aAA0B,OAAZ4c,GAAM,IACQ,OAAT,KAALA,IAE9B,CACA,OAAOrlE,CACT,CAyPWslE,CAAmBF,EAC5B,GA8BFxoE,EAAY1L,UAAY,CAMtBkB,OAAQ,SAAgBmzE,EAAYjuD,GAClCiuD,EAAaA,EAAanrE,OAAOmrE,GAAc,GAC/CjuD,EAAUgsD,EAAahsD,GAKlBta,KAAKinE,aACRjnE,KAAKsnE,SAAW,IAAIW,EAAYjoE,KAAKunE,WACvCvnE,KAAKinE,WAAa7qE,QAAQke,EAAgB,QAM1C,IAJA,IAGI1H,EAHA9U,EAAQ,GACRqqE,EAAe,IAAI3B,EA1Y3B,SAA4B/pD,GAgB1B,IAZA,IAAIzZ,EAAI5F,OAAOqf,GAGX7e,EAAIoF,EAAE7P,OAGNoF,EAAI,EAGJwZ,EAAI,GAGDxZ,EAAIqF,GAAG,CAGZ,IAAI+Q,EAAI3L,EAAE4nB,WAAWryB,GAKrB,GAAIoW,EAAI,OAAUA,EAAI,MAEpBoD,EAAEvZ,KAAKmW,QAIJ,GAAI,OAAUA,GAAKA,GAAK,MAE3BoD,EAAEvZ,KAAK,YAIJ,GAAI,OAAUmW,GAAKA,GAAK,MAG3B,GAAIpW,IAAMqF,EAAI,EACZmU,EAAEvZ,KAAK,WAGJ,CAEH,IAAIoP,EAAI6U,EAAOmO,WAAWryB,EAAI,GAG9B,GAAI,OAAUqP,GAAKA,GAAK,MAAQ,CAE9B,IAAID,EAAQ,KAAJgH,EAGJhc,EAAQ,KAAJiV,EAIRmK,EAAEvZ,KAAK,OAAWmP,GAAK,IAAMhV,GAG7B4F,GAAK,CACP,MAKEwZ,EAAEvZ,KAAK,MAEX,CAIFD,GAAK,CACP,CAGA,OAAOwZ,CACT,CA6TkCy2D,CAAmBD,KAGzCJ,EAAazB,gBACnB9zD,EAAS5S,KAAKsnE,SAASzU,QAAQsV,EAAcA,EAAape,WAC3CnrD,GAEX7F,MAAMC,QAAQ4Z,GAChB9U,EAAMtF,KAAKkzD,MAAM5tD,EAAoC8U,GAErD9U,EAAMtF,KAAKoa,GAEf,IAAK5S,KAAKinE,WAAY,CACpB,MACEr0D,EAAS5S,KAAKsnE,SAASzU,QAAQsV,EAAcA,EAAape,WAC3CnrD,GAEX7F,MAAMC,QAAQ4Z,GAChB9U,EAAMtF,KAAKkzD,MAAM5tD,EAAoC8U,GAErD9U,EAAMtF,KAAKoa,GAEf5S,KAAKsnE,SAAW,IAClB,CACA,OAAO,IAAI10E,WAAWkL,EACxB","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/cryptoBrowser.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/node_modules/buffer/index.js","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  // Cleanup internal state. Not '.clean' because instance is not usable after that.\n  // Clean usually resets instance to initial state, but it is not possible for keyed hashes if key is consumed into state.\n  // NOTE: if digest is not consumed by user, user need manually call '.destroy' if zeroing is required\n  abstract destroy(): void;\n  // Unsafe because doesn't check if \"to\" is correct. Can be used as clone() if no opts passed.\n  // Why cloneInto instead of clone? Mostly performance (same as _digestInto), but also has nice property: it reuses instance\n  // which means all internal buffers is overwritten, which also causes overwrite buffer which used for digest (in some cases).\n  // We don't provide any guarantees about cleanup (it is impossible to!), so should be enough for now.\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto.web) {\n    return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n  } else if (crypto.node) {\n    return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n  } else {\n    throw new Error(\"The environment doesn't have randomBytes function\");\n  }\n}\n","// Global symbol available in browsers only\ndeclare const self: Record<string, any> | undefined;\nexport const crypto: { node?: any; web?: any } = {\n  node: undefined,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bytes","_len","lengths","_key","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","createView","self","crypto","arr","DataView","byteLength","rotr","Uint32Array","padStart","toBytes","data","str","TextEncoder","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","SHA2","padOffset","isLE","super","pos","view","len","take","set","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","destroy","to","U32_MASK64","fromBig","lst","le","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_0n","_1n","_2n","_8n","CU_O","CURVE","freeze","a","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","static","p","Point","equals","ZERO","mod","points","toInv","nums","inverted","invert","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","precomputeWindow","W","windows","base","window","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","is0","ax","ay","zz","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","condition","item","neg","assertRstPoint","RistrettoPoint","ep","r0","r","Ns","c","isValid","Ns_D_is_sq","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","privateKey","getExtendedPublicKey","point","toX25519","Signature","assertValidity","fromHex","u8","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","reverse","MAX_255B","modulo","q","m","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","async","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","createHash","precompute","cached","sha512Sync","defineProperties","configurable","val","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","Chi","SHA224","sha256","StructError","failure","failures","rest","path","join","_cached","isObject","print","JSON","stringify","toFailure","context","struct","branch","type","refinement","toFailures","Symbol","iterator","run","options","coerce","ctx","coercer","schema","valid","validator","entries","ts","Map","Set","refiner","Struct","props","validate","is","tuples","tuple","input","done","next","shiftIterator","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","keys","Structs","S","first","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","iHash","oHash","buf","getPrototypeOf","hmac","_3n","beta","divNearest","endo","splitScalar","a1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","scratch","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","hasEvenY","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","normalizeSignature","truncateHash","radj","rinv","numTo32bStr","Q","multiplyAndAddUnsafe","isCompressed","toHexX","toRawX","left","aP","bQ","sliceDER","parseDERInt","hexToNumber","sBytes","rBytesLeft","parseDERSignature","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","toCompactHex","numTo32b","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","qByteLen","counter","_len2","_key2","hmacSha256","hmacSync","_len3","_key3","checkSync","incr","seed","reseedSync","sl","generateSync","kmdToSig","kBytes","lowS","kinv","error","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","der","recovered","canonical","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","_len4","messages","_key4","forEach","_len5","_key5","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","charCodeAt","_len6","_key6","taggedHashSync","_len7","_key7","_JacobianPoint","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","field","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","some","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","_ref13","customMessage","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","reject","notify","_this$underlyingSocke2","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","_config$abortSignal","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_ref14","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","_ref15","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref16","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_ref17","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","unsafeRes","transactionDetails","_ref18","extra","block","_ref19","_ref20","endSlot","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_ref21","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","fastStableStringify$1","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","base64","ieee754","customInspectSymbol","K_MAX_LENGTH","createBuffer","setPrototypeOf","encodingOrOffset","allocUnsafe","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","base64ToBytes","toLowerCase","slowToString","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","errors","sym","getMessage","Base","stack","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","INVALID_BASE64_RE","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","injectedProvider","engine","JRPCEngine","solanaMiddleware","getProviderHandlers","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","ethErrors","display","_req$params","_req$params2","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","getSlopeHandlers","getProviderEngineProxy","txMessage","conn","rpcTarget","_data$signatures","allTxns","unsignedTx","SolflareInjectedProvider","getSolflareHandlers","solflareProviderHandlers","TorusInjectedProvider","_objectSpread$1","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_req$params3","_req$params4","_req$params5","getTorusHandlers","configure","setupProvider","SolanaPrivateKeyProvider","_objectSpread","_providerEngineProxy","keyPair","nacl","_req$params6","txns","tx","networkMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchChain","updatePrivatekey","createAccountMiddleware","updateAccount","providerFactory","SolanaWallet","_defineProperty","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","basex","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","__rest","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","_this2","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","event","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","listeners","EventEmitter","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","rnds8","rng","msCrypto","REGEX","byteToHex","rnds","random","ReferenceError","asyncGeneratorStep","_throw","Constructor","toPropertyKey","_defineProperties","descriptor","protoProps","staticProps","_getPrototypeOf","__proto__","subClass","superClass","_typeof","assertThisInitialized","_setPrototypeOf","hint","prim","inRange","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}