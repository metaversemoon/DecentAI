{"version":3,"file":"static/js/751.2040a1c3.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/cryptoBrowser.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/node_modules/buffer/index.js","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  // Cleanup internal state. Not '.clean' because instance is not usable after that.\n  // Clean usually resets instance to initial state, but it is not possible for keyed hashes if key is consumed into state.\n  // NOTE: if digest is not consumed by user, user need manually call '.destroy' if zeroing is required\n  abstract destroy(): void;\n  // Unsafe because doesn't check if \"to\" is correct. Can be used as clone() if no opts passed.\n  // Why cloneInto instead of clone? Mostly performance (same as _digestInto), but also has nice property: it reuses instance\n  // which means all internal buffers is overwritten, which also causes overwrite buffer which used for digest (in some cases).\n  // We don't provide any guarantees about cleanup (it is impossible to!), so should be enough for now.\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto.web) {\n    return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n  } else if (crypto.node) {\n    return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n  } else {\n    throw new Error(\"The environment doesn't have randomBytes function\");\n  }\n}\n","// Global symbol available in browsers only\ndeclare const self: Record<string, any> | undefined;\nexport const crypto: { node?: any; web?: any } = {\n  node: undefined,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["_get","require","_getPrototypeOf","_assertThisInitialized","_createForOfIteratorHelper","_inherits","_createSuper","_classCallCheck","_createClass","buffer_1","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","key","value","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","ExternalLayout","_Layout","_super","apply","arguments","Error","GreedyCount","_ExternalLayout","_super2","_this","elementSpan","undefined","call","rem","Math","floor","src","OffsetLayout","_ExternalLayout2","_super3","layout","_this2","UInt","UIntBE","decode","encode","_Layout2","_super4","_this3","readUIntLE","writeUIntLE","_Layout3","_super5","_this4","readUIntBE","writeUIntBE","Int","_Layout4","_super6","_this5","readIntLE","writeIntLE","IntBE","_Layout5","_super7","_this6","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","_Layout6","_super8","readUInt32LE","split","writeUInt32LE","NearUInt64BE","_Layout7","_super9","readUInt32BE","writeUInt32BE","NearInt64","_Layout8","_super10","readInt32LE","writeInt32LE","NearInt64BE","_Layout9","_super11","readInt32BE","writeInt32BE","Float","_Layout10","_super12","readFloatLE","writeFloatLE","FloatBE","_Layout11","_super13","readFloatBE","writeFloatBE","Double","_Layout12","_super14","readDoubleLE","writeDoubleLE","DoubleBE","_Layout13","_super15","readDoubleBE","writeDoubleBE","Sequence","_Layout14","_super16","elementLayout","count","_this7","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","_Layout15","_super17","fields","decodePrefixes","_this8","Array","isArray","acc","_step","_iterator","s","n","done","fd","err","e","f","fsp","_step2","dest","makeDestinationObject","_iterator2","_step3","firstOffset","lastOffset","lastWrote","_iterator3","fv","_step4","_iterator4","shift","_step5","_iterator5","_step6","_iterator6","UnionDiscriminator","UnionLayoutDiscriminator","_UnionDiscriminator","_super18","_this9","Union","_Layout16","_super19","discr","defaultLayout","_this10","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","_Layout17","_super20","union","_this11","fromArray","fixBitwiseResult","BitStructure","_Layout18","_super21","word","msb","_this12","_packedSetValue","_packedGetValue","_step7","_iterator7","_step8","_iterator8","bits","bf","BitField","Boolean","_step9","_iterator9","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","_BitField","_super22","Blob","_Layout19","_super23","_this13","slice","srcBuffer","write","toString","CString","_Layout20","_super24","String","srcb","copy","UTF8","_Layout21","_super25","maxSpan","_this14","Constant","_Layout22","_super26","_this15","exports","number","isSafeInteger","concat","bytes","_len","lengths","_key","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","u32","self","crypto","arr","Uint32Array","byteLength","createView","DataView","rotr","padStart","toBytes","data","str","TextEncoder","utf8ToBytes","Hash","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","SHA2","_Hash","padOffset","isLE","pos","view","len","take","set","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","destroy","to","_to","_toConsumableArray","U32_MASK64","fromBig","u64","lst","le","Ah","Al","_fromBig","_ref","toBig","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","_u64$split","map","_u64$split2","_slicedToArray","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","_SHA","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","_u64$add","All","_u64$add2","_u64$add3","_u64$add4","_u64$add5","_u64$add6","_u64$add7","_u64$add8","_u64$add9","SHA512_224","_SHA2","SHA512_256","_SHA3","SHA384","_SHA4","sha512","_0n","_1n","_2n","_8n","CU_O","CURVE","freeze","a","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","double","negate","W","windows","points","p","base","window","affinePoint","equals","BASE","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","is0","invert","ax","ay","zz","legacyRist","toInv","nums","inverted","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","condition","item","neg","assertRstPoint","RistrettoPoint","ep","_this$ep","u1","u2","u2sq","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_x","_y","numberTo32BytesLE","bytesToHex","toRawBytes","toHex","one","two","subtract","multiply","r0","r","Ns","c","_uvRatio","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","_invertSqrt2","I","Dx","Dy","WeakMap","delete","isTorsionFree","strict","normed","bytesToNumberLE","y2","_uvRatio2","isXOdd","_fromPrivateKey","_asyncToGenerator","_regeneratorRuntime","mark","_callee","privateKey","wrap","_context","prev","next","getExtendedPublicKey","abrupt","sent","point","stop","_x2","Signature","assertValidity","u8","fromHex","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","reverse","_sha512Sync","MAX_255B","modulo","u","q","m","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","sha512s","_x3","_getExtendedPublicKey","_callee3","_context3","t0","utils","t1","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","_getExtendedPublicKey2","R","verify","_prepareVerification","_setWindowSize","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","_sha","_callee2","_args2","_context2","subtle","createHash","precompute","cached","sha512Sync","defineProperties","configurable","val","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","SHA224","sha256","toFailures","StructError","_TypeError","failure","failures","rest","_objectWithoutProperties","_excluded","path","join","_cached","_wrapNativeSuper","isIterable","isObject","Symbol","iterator","print","JSON","stringify","toFailure","context","struct","branch","type","_result","refinement","_result$message","_objectSpread","finish","_marked","run","options","_options$path","_options$branch","_options$coerce","coerce","_options$mask","ctx","valid","_failure","_step3$value","ts","coercer","schema","validator","entries","Map","Set","t2","refiner","t3","Struct","props","_props$coercer","_props$entries","validate","is","tuples","tuple","input","_input$next","shiftIterator","error","_context4","define","Element","_step9$value","_context7","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","_context13","keys","string","Elements","Never","_context15","_i","_keys","_context16","Structs","_step18","_iterator18","_run","_toArray","_step19","_iterator19","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","keccak","bufferOut","writeInto","xofInto","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","iHash","oHash","buf","getPrototypeOf","hmac","_3n","beta","divNearest","endo","a1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","_Error","assertJacPoint","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","_endo$splitScalar","k1p","k2p","fake","_endo$splitScalar2","_this$wNAF","f1p","_this$wNAF2","f2p","_this$wNAF3","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","hasEvenY","isValidFieldElement","left","Q","aP","bQ","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","rt","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","_normalizeSignature","normalizeSignature","truncateHash","radj","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toDERRawBytes","toCompactHex","hexToNumber","_parseDERSignature","_parseDERInt","_parseDERInt2","rBytesLeft","parseDERSignature","fromDER","_sha256Sync","_hmacSha256Sync","numTo32b","truncateOnly","delta","bits2int_2","HmacDrbg","qByteLen","counter","_len2","_key2","hmacSha256","_len3","_key3","_reseed","seed","_args","checkSync","hmacSync","_generate","sl","incr","kmdToSig","kBytes","lowS","kinv","normalizeS","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","_Object$assign","canonical","der","recovered","toCompactRawBytes","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","_callee4","_len4","messages","_key4","_args4","forEach","_hmacSha","_callee5","_len5","_key5","ckey","createHmac","_args5","_context5","importKey","_x9","sha256Sync","hmacSha256Sync","taggedHash","_taggedHash","_callee6","tagP","tagH","_len6","_key6","_args6","_context6","charCodeAt","_x10","taggedHashSync","_len7","_key7","_JacobianPoint","ed25519","_ed25519$utils","generateKeypair","privateScalar","secretKey","isOnCurve","_unused","toBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_Struct2","_Symbol$toStringTag2","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toArrayLike","zeroPad","_createWithSeed","fromPublicKey","programId","publicKeyBytes","seeds","_createProgramAddress","createProgramAddressSync","_x4","_x5","address","nonce","seedsWithNonce","_findProgramAddress","findProgramAddressSync","_x6","_x7","pubkeyData","toStringTag","default","kind","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","_Error2","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","_Error3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","field","decodeLength","size","elem","encodeLength","rem_len","TransactionStatus","CompiledKeys","payer","keyMetaMap","mapEntries","writableSigners","filter","isSigner","isWritable","readonlySigners","_ref3","writableNonSigners","_ref5","readonlyNonSigners","_ref7","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_ref9","_ref11","_ref13","_ref15","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_loop","_step2$value","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","numSignedAccounts","has","_","isProgramId","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","_compiledKeys$getMess","compile","payerKey","getMessageComponents","_compiledKeys$getMess2","compileInstructions","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","_loop2","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","_step10","_iterator10","encodedWritableIndexesLength","encodedReadonlyIndexesLength","_step11","compiledKeys","lookupTableAccounts","_iterator11","extractResult","extractTableLookup","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","_compiledKeys$getMess3","_compiledKeys$getMess4","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","version","DEFAULT_SIGNATURE","TransactionInstruction","_ref17","toJSON","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref18","items","console","warn","programIds","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","_uniqueMetas$splice","payerMeta","unshift","_step12","_iterator12","_loop3","signedKeys","unsignedKeys","_ref19","indexOf","compileMessage","pair","_compile","_getEstimatedFee","connection","getFeeForMessage","_x8","seen","uniqueSigners","_i4","_signers","signer","_partialSign","_i5","_signers2","_addSignature","sigpair","requireAllSignatures","_verifySignatures","serializeMessage","_step13","_iterator13","_step13$value","config","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","_ref20","keyObj","populate","sigPubkeyPair","some","isAccountSigner","isAccountWritable","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","_step16","messageData","signerPubkeys","_iterator16","_loop4","signerIndex","signaturesLength","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_x11","_x12","_sendAndConfirmTransaction","_callee106","sendOptions","status","nonceAccountPubkey","_context106","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","_encodeDecode","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","_load","program","balanceNeeded","programInfo","dataLayout","transactions","_data","_transaction","_dataLayout","_data2","_transaction2","getMinimumBalanceForRentExemption","getAccountInfo","executable","allocate","owner","transfer","bytesLengthPadding","_rpcEndpoint","all","_x13","_x14","_x15","_x16","_x17","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","SendTransactionError","_Error4","logs","SolanaJSONRPCError","_Error5","_ref21","customMessage","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","_get2","readyState","reject","_this$underlyingSocke2","_get3","RpcWebSocketCommonClient","AddressLookupTableAccount","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","_matches","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","_ref22","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","_x18","_x19","clientBrowser","RpcClient","_ref23","_callee7","request","callback","too_many_requests_retries","waitTime","text","method","body","agent","headers","log","statusText","ok","_x20","_x21","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee8","_extractCommitmentFro","unsafeRes","_context8","_buildArgs","_x22","_x23","_getBalance","_callee9","_context9","getBalanceAndContext","then","catch","_x24","_x25","_getBlockTime","_callee10","_context10","_x26","_getMinimumLedgerSlot","_callee11","_context11","_getFirstAvailableBlock","_callee12","_context12","_getSupply","_callee13","configArg","_x27","_getTokenSupply","_callee14","tokenMintAddress","_context14","_x28","_x29","_getTokenAccountBalance","_callee15","tokenAddress","_x30","_x31","_getTokenAccountsByOwner","_callee16","ownerAddress","_extractCommitmentFro2","_x32","_x33","_x34","_getParsedTokenAccountsByOwner","_callee17","_context17","_x35","_x36","_x37","_getLargestAccounts","_callee18","arg","_context18","_x38","_getTokenLargestAccounts","_callee19","mintAddress","_context19","_x39","_x40","_getAccountInfoAndContext","_callee20","_extractCommitmentFro3","_context20","_x41","_x42","_getParsedAccountInfo","_callee21","_extractCommitmentFro4","_context21","_x43","_x44","_getAccountInfo","_callee22","_context22","getAccountInfoAndContext","_x45","_x46","_getMultipleParsedAccounts","_callee23","publicKeys","rawConfig","_extractCommitmentFro5","_context23","_x47","_x48","_getMultipleAccountsInfoAndContext","_callee24","_extractCommitmentFro6","_context24","_x49","_x50","_getMultipleAccountsInfo","_callee25","_context25","getMultipleAccountsInfoAndContext","_x51","_x52","_getStakeActivation","_callee26","_extractCommitmentFro7","_context26","_x53","_x54","_x55","_getProgramAccounts","_callee27","configOrCommitment","_extractCommitmentFro8","_ref24","encoding","configWithoutEncoding","_context27","_excluded2","_x56","_x57","_getParsedProgramAccounts","_callee28","_extractCommitmentFro9","_context28","_x58","_x59","_confirmTransaction","_callee29","strategy","rawSignature","_config$abortSignal","decodedSignature","_context29","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x60","_x61","signal","addEventListener","_ref25","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee30","_context30","getSignatureStatus","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee33","_ref27","_ref27$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_this16","_context33","checkBlockHeight","_ref28","_callee31","_context31","getBlockHeight","_callee32","currentBlockHeight","_context32","BLOCKHEIGHT_EXCEEDED","getTransactionConfirmationPromise","getCancellationPromise","race","_x62","_confirmTransactionUsingDurableNonceStrategy","_callee36","_ref30","_ref30$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_this17","_context36","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_ref31","_callee34","_yield$_this17$getNon","_context34","getNonceAndContext","_callee35","_context35","NONCE_INVALID","slotInWhichNonceDidAdvance","_x63","_confirmTransactionUsingLegacyTimeoutStrategy","_callee37","_ref33","timeoutId","_this$getTransactionC3","_this18","_context37","timeoutMs","TIMED_OUT","clearTimeout","_x64","_getClusterNodes","_callee38","_context38","_getVoteAccounts","_callee39","_context39","_x65","_getSlot","_callee40","_extractCommitmentFro10","_context40","_x66","_getSlotLeader","_callee41","_extractCommitmentFro11","_context41","_x67","_getSlotLeaders","_callee42","startSlot","limit","_context42","_x68","_x69","_getSignatureStatus","_callee43","_yield$this$getSignat","_context43","getSignatureStatuses","_x70","_x71","_getSignatureStatuses","_callee44","_context44","_x72","_x73","_getTransactionCount","_callee45","_extractCommitmentFro12","_context45","_x74","_getTotalSupply","_callee46","_context46","getSupply","excludeNonCirculatingAccountsList","_x75","_getInflationGovernor","_callee47","_context47","_x76","_getInflationReward","_callee48","_extractCommitmentFro13","_context48","_x77","_x78","_x79","_getInflationRate","_callee49","_context49","_getEpochInfo","_callee50","_extractCommitmentFro14","_context50","_x80","_getEpochSchedule","_callee51","epochSchedule","_context51","_getLeaderSchedule","_callee52","_context52","_getMinimumBalanceForRentExemption","_callee53","_context53","_x81","_x82","_getRecentBlockhashAndContext","_callee54","_context54","_x83","_getRecentPerformanceSamples","_callee55","_context55","_x84","_getFeeCalculatorForBlockhash","_callee56","_res$result","_context56","_x85","_x86","_getFeeForMessage","_callee57","wireMessage","_context57","_x87","_x88","_getRecentBlockhash","_callee58","_context58","getRecentBlockhashAndContext","_x89","_getLatestBlockhash","_callee59","_context59","getLatestBlockhashAndContext","_x90","_getLatestBlockhashAndContext","_callee60","_extractCommitmentFro15","_context60","_x91","_getVersion","_callee61","_context61","_getGenesisHash","_callee62","_context62","_getBlock","_callee63","_extractCommitmentFro16","_res","_res2","_context63","_buildArgsAtLeastConfirmed","transactionDetails","_ref34","_x92","_x93","_getParsedBlock","_callee64","_extractCommitmentFro17","_res3","_res4","_context64","_x94","_x95","_getBlockHeight","_callee65","_extractCommitmentFro18","_context65","_x96","_getBlockProduction","_callee66","extra","_context66","_excluded3","_x97","_getTransaction","_callee67","_extractCommitmentFro19","_context67","_x98","_x99","_getParsedTransaction","_callee68","_extractCommitmentFro20","_context68","_x100","_x101","_getParsedTransactions","_callee69","_extractCommitmentFro21","_this19","_context69","_x102","_x103","_getTransactions","_callee70","_extractCommitmentFro22","_this20","_context70","_x104","_x105","_getConfirmedBlock","_callee71","block","_context71","_ref35","_ref36","_x106","_x107","_getBlocks","_callee72","endSlot","_context72","_x108","_x109","_x110","_getBlockSignatures","_callee73","_context73","_x111","_x112","_getConfirmedBlockSignatures","_callee74","_context74","_x113","_x114","_getConfirmedTransaction","_callee75","_context75","_x115","_x116","_getParsedConfirmedTransaction","_callee76","_context76","_x117","_x118","_getParsedConfirmedTransactions","_callee77","_this21","_context77","_x119","_x120","_getConfirmedSignaturesForAddress","_callee78","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_context78","getFirstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","before","getConfirmedSignaturesForAddress2","_x121","_x122","_x123","_getConfirmedSignaturesForAddress2","_callee79","_context79","_x124","_x125","_x126","_getSignaturesForAddress","_callee80","_context80","_x127","_x128","_x129","_getAddressLookupTable","_callee81","_yield$this$getAccoun","accountInfo","_context81","_x130","_x131","_getNonceAndContext","_callee82","_yield$this$getAccoun2","_context82","fromAccountData","_x132","_x133","_getNonce","_callee83","_context83","_x134","_x135","_requestAirdrop","_callee84","_context84","_x136","_x137","_blockhashWithExpiryBlockHeight2","_callee85","disableCache","timeSinceFetch","expired","_context85","Date","now","_pollNewBlockhash","_x138","_pollNewBlockhash2","_callee86","startTime","cachedLatestBlockhash","cachedBlockhash","_context86","getLatestBlockhash","MS_PER_SLOT","_getStakeMinimumDelegation","_callee87","_extractCommitmentFro23","_context87","_x139","_simulateTransaction","_callee88","transactionOrMessage","configOrSigners","includeAccounts","_wireTransaction","_encodedTransaction","_config","_args89","_unsafeRes","_res5","originalTx","_transaction3","_transaction4","_signature3","encodedTransaction","traceIndent","logTrace","_context88","_blockhashWithExpiryBlockHeight","nonProgramIds","sigVerify","_x140","_x141","_x142","_sendTransaction","_callee89","signersOrOptions","_wireTransaction2","_signature4","_context89","sendRawTransaction","_x143","_x144","_x145","_sendRawTransaction","_callee90","rawTransaction","_context90","sendEncodedTransaction","_x146","_x147","_sendEncodedTransaction","_callee91","_context91","_x148","_x149","_this22","setInterval","_callee92","_context92","notify","_updateSubscriptions","_this23","MAX_SAFE_INTEGER","clearInterval","_ref38","_ref39","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","_unused3","clientSubscriptionId","_this$_subscriptionSt","_this24","_updateSubscriptions2","_callee96","activeWebSocketGeneration","isCurrentConnectionStillActive","_this25","_context96","close","connect","_ref40","_callee95","_context95","callbacks","serverSubscriptionId","_callee93","_context93","_callee94","unsubscribeMethod","_context94","_x150","callbackArgs","notification","_create","_handleServerNotification","subscriptionConfig","_this26","fastStableStringify$1","existingSubscription","_callee97","_context97","_makeSubscription","_removeAccountChangeListener","_callee98","_context98","_unsubscribeClientSubscription","_x151","_create2","accountId","filters","_removeProgramAccountChangeListener","_callee99","_context99","_x152","mentions","_removeOnLogsListener","_callee100","_context100","_x153","_create3","_create4","_removeSlotChangeListener","_callee101","_context101","_x154","_create5","_removeSlotUpdateListener","_callee102","_context102","_x155","_unsubscribeClientSubscription2","_callee103","subscriptionName","dispose","_context103","_x156","_x157","override","_create6","_this27","_err","_this28","_options$commitment","_excluded4","_removeSignatureListener","_callee104","_context104","_x158","_create7","_removeRootChangeListener","_callee105","_context105","_x159","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","_PublicKey$findProgra","recentSlot","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","secp256k1","_len8","msgs","_key8","ecdsaSign","privKey","_initSigArgs","drbg","reseedSync","generateSync","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","_params$instructionIn","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","_ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","VoteProgram","Voter","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","base64","ieee754","customInspectSymbol","K_MAX_LENGTH","createBuffer","setPrototypeOf","encodingOrOffset","allocUnsafe","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","base64ToBytes","toLowerCase","slowToString","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","errors","sym","getMessage","Base","_Base","NodeError","stack","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","INVALID_BASE64_RE","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","_ref2","requestAccounts","_ref6","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","_switchChain","_setupProvider","injectedProvider","engine","solanaMiddleware","configMiddleware","injectedProviderProxy","provider","JRPCEngine","getProviderHandlers","getInjectedProviderProxy","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","_getSecretKey","_signTransaction","_signMessage","sigData","display","_signAllTransactions","_req$params","_req$params2","_signAndSendTransaction","txRes","createInjectedProviderProxyMiddleware","_ref8","_next","_objectSpread$2","PhantomInjectedProvider","_BaseInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","_BaseInjectedProvider2","getProviderEngineProxy","_requestAccounts2","_yield$injectedProvid","_getAccounts2","_yield$injectedProvid2","_getPrivateKey2","_getSecretKey2","_signTransaction2","txMessage","_yield$injectedProvid3","addSignature","_signMessage2","_signAndSendTransaction2","_yield$injectedProvid4","conn","_signAllTransactions2","_data$signatures","allTxns","unsignedTx","_yield$injectedProvid5","getSlopeHandlers","SolflareInjectedProvider","_BaseInjectedProvider3","solflareProviderHandlers","getSolflareHandlers","getTorusHandlers","_requestAccounts3","_getAccounts3","_getPrivateKey3","_getSecretKey3","_signMessage3","_signTransaction3","_signAndSendTransaction3","_req$params3","_signAllTransactions3","_req$params4","_req$params5","TorusInjectedProvider","_BaseProvider2","_objectSpread$1","_switchChain2","_setupProvider2","handleInjectedProviderUpdate","setupEngine","_lookupNetwork2","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_setupEngine","_handleInjectedProviderUpdate","_ref10","configure","setupProvider","_getProviderHandlers","keyPairGenerator","keyPair","_requestAccounts5","_getAccounts4","_getPrivateKey4","_getSecretKey4","_signTransaction5","partialSign","_signMessage5","signedMsg","nacl","_signAndSendTransaction5","_providerEngineProxy","_signAllTransactions5","_req$params6","txns","tx","SolanaPrivateKeyProvider","_BaseProvider3","_enable","_setupProvider3","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","_updateAccount","_switchChain3","getChainConfig","_lookupNetwork3","health","chainSwitchHandlers","addNewChainConfig","_addNewChainConfig","_req$params7","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","_switchSolanaChain","switchChain","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_updatePrivatekey","updateAccount","_ref4","createAccountMiddleware","_ref12","providerFactory","SolanaWallet","_defineProperty","_requestAccounts4","_signAndSendTransaction4","_yield$this$provider$","_signTransaction4","signedTransaction","_signAllTransactions4","signedTransactions","_signMessage4","_request","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeBuffer","toArray","writeU32","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","_structSchema$values$","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","_structSchema$values$2","fieldValue","basex","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","__rest","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","send","promise","_login","resp","_listMethods","_subscribe","event","_unsubscribe","listeners","EventEmitter","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","rnds8","rng","msCrypto","REGEX","byteToHex","rnds","random","inRange","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}