{"version":3,"file":"static/js/878.8bfd2fd4.chunk.js","mappings":"kNAQMA,EAAKC,IAAAA,SAEL,SAAUC,EAAcC,GAI5B,IAAIC,EAEFA,EADwB,kBAAfD,EACCE,EAAOC,KAAKH,EAAY,OAExBA,EAIZ,IAAMI,EAAI,IAAIC,WAAW,IACnBC,EAAI,CAACT,EAAEU,KAAMV,EAAEU,KAAMV,EAAEU,KAAMV,EAAEU,MAC/BC,EAAK,IAAIH,WAAW,GAADI,QAAAC,EAAAA,EAAAA,GAAK,IAAIL,WAAWJ,KAAQS,EAAAA,EAAAA,GAAK,IAAIL,WAAW,OACnEM,EAAK,IAAIN,WAAW,IAC1BR,EAAEe,YAAYR,EAAGI,EAAI,IAErBJ,EAAE,IAAM,IAERA,EAAE,KAAO,IAETA,EAAE,KAAO,GACTP,EAAEgB,WAAWP,EAAGF,GAChBP,EAAEiB,KAAKH,EAAIL,GACX,IAAK,IAAIS,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAGP,EAAGO,EAAI,IAAMJ,EAAGI,GAEhD,MAAO,CAAEP,GAAIN,EAAOC,KAAKK,GAAKG,GAAIT,EAAOC,KAAKQ,GAChD,C","sources":["../node_modules/@toruslabs/openlogin-ed25519/src/utils.ts"],"sourcesContent":["import nacl from \"@toruslabs/tweetnacl-js\";\n\nexport type SECP256K1KeyType = \"secp256k1\";\nexport type ED25519KeyType = \"ed25519\";\n\nexport type SECP256K1Key = Buffer;\nexport type ED25519Key = Buffer;\n\nconst l = (nacl as any).lowlevel;\n\nexport function getED25519Key(privateKey: string | Buffer): {\n  sk: Buffer;\n  pk: Buffer;\n} {\n  let privKey: Buffer;\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  }\n  // Implementation copied from tweetnacl\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n\n  d[0] &= 248;\n\n  d[31] &= 127;\n\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n"],"names":["l","nacl","getED25519Key","privateKey","privKey","Buffer","from","d","Uint8Array","p","gf","sk","concat","_toConsumableArray","pk","crypto_hash","scalarbase","pack","i"],"sourceRoot":""}